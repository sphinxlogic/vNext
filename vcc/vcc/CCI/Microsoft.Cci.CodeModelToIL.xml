<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Cci.CodeModelToIL</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Cci.CodeModelToILConverter">
      <summary>
            An object with a method that converts a given block of statements to a list of IL operations, exception information and possibly some private
            helper types.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodDefinition,Microsoft.Cci.ISourceLocationProvider)">
      <summary>
            Initializes an object with a method that converts a given block of statements to a list of IL operations, exception information and possibly some private 
            helper types.
            </summary>
      <param name="host">An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="method">The method that contains the block of statements that will be converted.</param>
      <param name="sourceLocationProvider">An object that can map the ILocation objects found in the block of statements to IPrimarySourceLocation objects.  May be null.</param>
      <requires>host != null</requires>
      <requires>method != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.#ctor(Microsoft.Cci.IMetadataHost,Microsoft.Cci.IMethodDefinition,Microsoft.Cci.ISourceLocationProvider,System.Collections.Generic.IDictionary{Microsoft.Cci.IBlockStatement,System.UInt32})">
      <summary>
            Initializes an object with a method that converts a given block of statements to a list of IL operations, exception information and possibly some private 
            helper types.
            </summary>
      <param name="host">An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.</param>
      <param name="method">The method that contains the block of statements that will be converted.</param>
      <param name="sourceLocationProvider">An object that can map the ILocation objects found in the block of statements to IPrimarySourceLocation objects.  May be null.</param>
      <param name="iteratorLocalCount">A map that indicates how many iterator locals are present in a given block. Only useful for generated MoveNext methods. May be null.</param>
      <requires>host != null</requires>
      <requires>method != null</requires>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.currentBreakTarget">
      <summary>
            A label for the instruction to where a break statement should currently branch to.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.currentContinueTarget">
      <summary>
            A label for the instruction to where a continue statement should currently branch to.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.currentTryCatchFinallyEnd">
      <summary>
            A label for the first instruction that comes after the current TryCatchFinally statement.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.currentTryCatch">
      <summary>
            The TryCatchFinally statement for which IL is currently being generated.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.endOfMethod">
      <summary>
            A label for the final (return) instruction in the current method, or the instruction that loads the argument of the final return instruction.
            If there is no final return intruction, this is location of the instruction following the final instruction (which of course does not exist).
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.generator">
      <summary>
            On object into which IL instructions are generated.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.host">
      <summary>
            An object representing the application that is hosting the converter. It is used to obtain access to some global
            objects and services such as the shared name table and the table for interning references.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.labelFor">
      <summary>
            A map from source label name unique keys to ILGenerator labels.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.lastStatementWasUnconditionalTransfer">
      <summary>
            True if the last generated statement tranferred control unconditionally, and hence an instruction at the current location can only
            be reached via a branch.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.localIndex">
      <summary>
            A map from ILocalDefinition instances to indices that can be used in IL instructions referring to locals.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.method">
      <summary>
            The method whose CodeModel body is being converted to IL instructions.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.minizeCodeSize">
      <summary>
            If true, code generation emphasizes small code size over patterns that make debugging better.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.mostNestedTryCatchFor">
      <summary>
            A map from labels (and labeled statements) to the most nested try catch that contains them. If a branch is
            enountered to a label and the current try catch is not the one that contains the label, then the branch leaves
            the current try catch block (and thus must become a leave instruction).
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.returnLocal">
      <summary>
            A local (temporary) that holds the return value until control reaches the end of the method body.
            Only used if minimizeCodeSize is false or if the return statement is inside a try catch.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.sourceLocationProvider">
      <summary>
            An object that can map the ILocation objects found in the block of statements to IPrimarySourceLocation objects.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.localVariables">
      <summary>
            A list of all the local variable definitions that were encountered during the translation to IL.
            </summary>
    </member>
    <member name="F:Microsoft.Cci.CodeModelToILConverter.iteratorLocalCount">
      <summary>
            A map that indicates how many iterator locals are present in a given block. Only useful for generated MoveNext methods. May be null.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetParameterIndex(Microsoft.Cci.IParameterDefinition)">
      <summary>
            Translates the parameter list position of the given parameter to an IL parameter index. In other words,
            it adds 1 to the parameterDefinition.Index value if the containing method has an implicit this parameter.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAddition)">
      <summary>
            Generates IL for the specified addition.
            </summary>
      <param name="addition">The addition.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddition)" inheritedFromTypeName="CodeTraverser">addition != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAddressableExpression)">
      <summary>
            Generates IL for the specified addressable expression.
            </summary>
      <param name="addressableExpression">The addressable expression.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressableExpression)" inheritedFromTypeName="CodeTraverser">addressableExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAddressDereference)">
      <summary>
            Generates IL for the specified address dereference.
            </summary>
      <param name="addressDereference">The address dereference.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressDereference)" inheritedFromTypeName="CodeTraverser">addressDereference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAddressOf)">
      <summary>
            Generates IL for the specified address of.
            </summary>
      <param name="addressOf">The address of.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAddressOf)" inheritedFromTypeName="CodeTraverser">addressOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAnonymousDelegate)">
      <summary>
            Generates IL for the specified anonymous delegate.
            </summary>
      <param name="anonymousDelegate">The anonymous delegate.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAnonymousDelegate)" inheritedFromTypeName="CodeTraverser">anonymousDelegate != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IArrayIndexer)">
      <summary>
            Generates IL for the specified array indexer.
            </summary>
      <param name="arrayIndexer">The array indexer.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IArrayIndexer)" inheritedFromTypeName="CodeTraverser">arrayIndexer != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAssertStatement)">
      <summary>
            Throws an exception when executed: IAssertStatement nodes
            must be replaced before converting the Code Model to IL.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAssertStatement)" inheritedFromTypeName="CodeTraverser">assertStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAssignment)">
      <summary>
            Generates IL for the specified assignment.
            </summary>
      <param name="assignment">The assignment.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAssignment)" inheritedFromTypeName="CodeTraverser">assignment != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.VisitAssignment(Microsoft.Cci.IAssignment,System.Boolean)">
      <summary>
            Generates IL for the assignment.
            </summary>
      <param name="assignment">The assignment.</param>
      <param name="treatAsStatement">if set to <c>true</c> [treat as statement].</param>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IAssumeStatement)">
      <summary>
            Throws an exception when executed: IAssumeStatement nodes
            must be replaced before converting the Code Model to IL.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IAssumeStatement)" inheritedFromTypeName="CodeTraverser">assumeStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBitwiseAnd)">
      <summary>
            Generates IL for the specified bitwise and.
            </summary>
      <param name="bitwiseAnd">The bitwise and.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBitwiseAnd)" inheritedFromTypeName="CodeTraverser">bitwiseAnd != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBitwiseOr)">
      <summary>
            Generates IL for the specified bitwise or.
            </summary>
      <param name="bitwiseOr">The bitwise or.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBitwiseOr)" inheritedFromTypeName="CodeTraverser">bitwiseOr != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBlockExpression)">
      <summary>
            Generates IL for the specified block expression.
            </summary>
      <param name="blockExpression">The block expression.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockExpression)" inheritedFromTypeName="CodeTraverser">blockExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBlockStatement)">
      <summary>
            Generates IL for the specified block.
            </summary>
      <param name="block">The block.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBlockStatement)" inheritedFromTypeName="CodeTraverser">block != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBoundExpression)">
      <summary>
            Performs some computation with the given bound expression.
            </summary>
      <param name="boundExpression" />
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBoundExpression)" inheritedFromTypeName="CodeTraverser">boundExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IBreakStatement)">
      <summary>
            Generates IL for the specified break statement.
            </summary>
      <param name="breakStatement">The break statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IBreakStatement)" inheritedFromTypeName="CodeTraverser">breakStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICastIfPossible)">
      <summary>
            Generates IL for the specified cast if possible.
            </summary>
      <param name="castIfPossible">The cast if possible.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICastIfPossible)" inheritedFromTypeName="CodeTraverser">castIfPossible != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICatchClause)">
      <summary>
            Generates IL for the specified catch clause.
            </summary>
      <param name="catchClause">The catch clause.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICatchClause)" inheritedFromTypeName="CodeTraverser">catchClause != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICheckIfInstance)">
      <summary>
            Generates IL for the specified check if instance.
            </summary>
      <param name="checkIfInstance">The check if instance.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICheckIfInstance)" inheritedFromTypeName="CodeTraverser">checkIfInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICompileTimeConstant)">
      <summary>
            Generates IL for the specified constant.
            </summary>
      <param name="constant">The constant.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICompileTimeConstant)" inheritedFromTypeName="CodeTraverser">constant != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IConditional)">
      <summary>
            Generates IL for the specified conditional.
            </summary>
      <param name="conditional">The conditional.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConditional)" inheritedFromTypeName="CodeTraverser">conditional != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IConditionalStatement)">
      <summary>
            Generates IL for the specified conditional statement.
            </summary>
      <param name="conditionalStatement">The conditional statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConditionalStatement)" inheritedFromTypeName="CodeTraverser">conditionalStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IContinueStatement)">
      <summary>
            Generates IL for the specified continue statement.
            </summary>
      <param name="continueStatement">The continue statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IContinueStatement)" inheritedFromTypeName="CodeTraverser">continueStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICopyMemoryStatement)">
      <summary>
            Generates IL for the specified copy memory statement.
            </summary>
      <param name="copyMemoryStatement">The copy memory statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICopyMemoryStatement)" inheritedFromTypeName="CodeTraverser">copyMemoryStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IConversion)">
      <summary>
            Generates IL for the specified conversion.
            </summary>
      <param name="conversion">The conversion.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IConversion)" inheritedFromTypeName="CodeTraverser">conversion != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICreateArray)">
      <summary>
            Generates IL for the specified create array.
            </summary>
      <param name="createArray">The create array instance to visit.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateArray)" inheritedFromTypeName="CodeTraverser">createArray != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)">
      <summary>
            Generates IL for the specified create delegate instance.
            </summary>
      <param name="createDelegateInstance">The create delegate instance.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateDelegateInstance)" inheritedFromTypeName="CodeTraverser">createDelegateInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ICreateObjectInstance)">
      <summary>
            Generates IL for the specified create object instance.
            </summary>
      <param name="createObjectInstance">The create object instance.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ICreateObjectInstance)" inheritedFromTypeName="CodeTraverser">createObjectInstance != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IDefaultValue)">
      <summary>
            Generates IL for the specified default value.
            </summary>
      <param name="defaultValue">The default value.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDefaultValue)" inheritedFromTypeName="CodeTraverser">defaultValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IDebuggerBreakStatement)">
      <summary>
            Generates IL for the specified debugger break statement.
            </summary>
      <param name="debuggerBreakStatement">The debugger break statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDebuggerBreakStatement)" inheritedFromTypeName="CodeTraverser">debuggerBreakStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IDivision)">
      <summary>
            Generates IL for the specified division.
            </summary>
      <param name="division">The division.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDivision)" inheritedFromTypeName="CodeTraverser">division != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IDoUntilStatement)">
      <summary>
            Generates IL for the specified do until statement.
            </summary>
      <param name="doUntilStatement">The do until statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDoUntilStatement)" inheritedFromTypeName="CodeTraverser">doUntilStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IDupValue)">
      <summary>
            Performs some computation with the given dup value expression.
            </summary>
      <param name="dupValue" />
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IDupValue)" inheritedFromTypeName="CodeTraverser">dupValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IEmptyStatement)">
      <summary>
            Generates IL for the specified empty statement.
            </summary>
      <param name="emptyStatement">The empty statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IEmptyStatement)" inheritedFromTypeName="CodeTraverser">emptyStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IEquality)">
      <summary>
            Generates IL for the specified equality.
            </summary>
      <param name="equality">The equality.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IEquality)" inheritedFromTypeName="CodeTraverser">equality != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IExclusiveOr)">
      <summary>
            Generates IL for the specified exclusive or.
            </summary>
      <param name="exclusiveOr">The exclusive or.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IExclusiveOr)" inheritedFromTypeName="CodeTraverser">exclusiveOr != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IExpressionStatement)">
      <summary>
            Generates IL for the specified expression statement.
            </summary>
      <param name="expressionStatement">The expression statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IExpressionStatement)" inheritedFromTypeName="CodeTraverser">expressionStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IFillMemoryStatement)">
      <summary>
            Generates IL for the specified fill memory statement.
            </summary>
      <param name="fillMemoryStatement">The fill memory statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IFillMemoryStatement)" inheritedFromTypeName="CodeTraverser">fillMemoryStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IForEachStatement)">
      <summary>
            Generates IL for the specified for each statement.
            </summary>
      <param name="forEachStatement">For each statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IForEachStatement)" inheritedFromTypeName="CodeTraverser">forEachStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.VisitForeachArrayElement(Microsoft.Cci.IForEachStatement,Microsoft.Cci.IArrayTypeReference)">
      <summary>
            Generates IL code for the given for each statement for the special case where the collection is known
            to be vector type.
            </summary>
      <param name="forEachStatement">The foreach statement to visit.</param>
      <param name="arrayType">The vector type of the collection.</param>
      <requires>arrayType.IsVector</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IForStatement)">
      <summary>
            Generates IL for the specified for statement.
            </summary>
      <param name="forStatement">For statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IForStatement)" inheritedFromTypeName="CodeTraverser">forStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGetTypeOfTypedReference)">
      <summary>
            Generates IL for the specified get type of typed reference.
            </summary>
      <param name="getTypeOfTypedReference">The get type of typed reference.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGetTypeOfTypedReference)" inheritedFromTypeName="CodeTraverser">getTypeOfTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGetValueOfTypedReference)">
      <summary>
            Generates IL for the specified get value of typed reference.
            </summary>
      <param name="getValueOfTypedReference">The get value of typed reference.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGetValueOfTypedReference)" inheritedFromTypeName="CodeTraverser">getValueOfTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGotoStatement)">
      <summary>
            Generates IL for the specified goto statement.
            </summary>
      <param name="gotoStatement">The goto statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGotoStatement)" inheritedFromTypeName="CodeTraverser">gotoStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGotoSwitchCaseStatement)">
      <summary>
            Generates IL for the specified goto switch case statement.
            </summary>
      <param name="gotoSwitchCaseStatement">The goto switch case statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGotoSwitchCaseStatement)" inheritedFromTypeName="CodeTraverser">gotoSwitchCaseStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGreaterThan)">
      <summary>
            Generates IL for the specified greater than.
            </summary>
      <param name="greaterThan">The greater than.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGreaterThan)" inheritedFromTypeName="CodeTraverser">greaterThan != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IGreaterThanOrEqual)">
      <summary>
            Generates IL for the specified greater than or equal.
            </summary>
      <param name="greaterThanOrEqual">The greater than or equal.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IGreaterThanOrEqual)" inheritedFromTypeName="CodeTraverser">greaterThanOrEqual != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILabeledStatement)">
      <summary>
            Generates IL for the specified labeled statement.
            </summary>
      <param name="labeledStatement">The labeled statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILabeledStatement)" inheritedFromTypeName="CodeTraverser">labeledStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILeftShift)">
      <summary>
            Generates IL for the specified left shift.
            </summary>
      <param name="leftShift">The left shift.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILeftShift)" inheritedFromTypeName="CodeTraverser">leftShift != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILessThan)">
      <summary>
            Generates IL for the specified less than.
            </summary>
      <param name="lessThan">The less than.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILessThan)" inheritedFromTypeName="CodeTraverser">lessThan != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILessThanOrEqual)">
      <summary>
            Generates IL for the specified less than or equal.
            </summary>
      <param name="lessThanOrEqual">The less than or equal.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILessThanOrEqual)" inheritedFromTypeName="CodeTraverser">lessThanOrEqual != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILocalDeclarationStatement)">
      <summary>
            Generates IL for the specified local declaration statement.
            </summary>
      <param name="localDeclarationStatement">The local declaration statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILocalDeclarationStatement)" inheritedFromTypeName="CodeTraverser">localDeclarationStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILockStatement)">
      <summary>
            Generates IL for the specified lock statement.
            </summary>
      <param name="lockStatement">The lock statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILockStatement)" inheritedFromTypeName="CodeTraverser">lockStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ILogicalNot)">
      <summary>
            Generates IL for the specified logical not.
            </summary>
      <param name="logicalNot">The logical not.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILogicalNot)" inheritedFromTypeName="CodeTraverser">logicalNot != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IMakeTypedReference)">
      <summary>
            Generates IL for the specified make typed reference.
            </summary>
      <param name="makeTypedReference">The make typed reference.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMakeTypedReference)" inheritedFromTypeName="CodeTraverser">makeTypedReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IMethodCall)">
      <summary>
            Generates IL for the specified method call.
            </summary>
      <param name="methodCall">The method call.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMethodCall)" inheritedFromTypeName="CodeTraverser">methodCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IModulus)">
      <summary>
            Generates IL for the specified modulus.
            </summary>
      <param name="modulus">The modulus.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IModulus)" inheritedFromTypeName="CodeTraverser">modulus != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IMultiplication)">
      <summary>
            Generates IL for the specified multiplication.
            </summary>
      <param name="multiplication">The multiplication.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IMultiplication)" inheritedFromTypeName="CodeTraverser">multiplication != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.INotEquality)">
      <summary>
            Generates IL for the specified not equality.
            </summary>
      <param name="notEquality">The not equality.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.INotEquality)" inheritedFromTypeName="CodeTraverser">notEquality != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IOldValue)">
      <summary>
            Throws an exception when executed: IOldValue nodes
            must be replaced before converting the Code Model to IL.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOldValue)" inheritedFromTypeName="CodeTraverser">oldValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IOnesComplement)">
      <summary>
            Generates IL for the specified ones complement.
            </summary>
      <param name="onesComplement">The ones complement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOnesComplement)" inheritedFromTypeName="CodeTraverser">onesComplement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IOutArgument)">
      <summary>
            Generates IL for the specified out argument.
            </summary>
      <param name="outArgument">The out argument.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IOutArgument)" inheritedFromTypeName="CodeTraverser">outArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IPointerCall)">
      <summary>
            Generates IL for the specified pointer call.
            </summary>
      <param name="pointerCall">The pointer call.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IPointerCall)" inheritedFromTypeName="CodeTraverser">pointerCall != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IPopValue)">
      <summary>
            Performs some computation with the given pop value expression.
            </summary>
      <param name="popValue" />
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IPopValue)" inheritedFromTypeName="CodeTraverser">popValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IPushStatement)">
      <summary>
            Performs some computation with the given push statement.
            </summary>
      <param name="pushStatement" />
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IPushStatement)" inheritedFromTypeName="CodeTraverser">pushStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IRefArgument)">
      <summary>
            Generates IL for the specified ref argument.
            </summary>
      <param name="refArgument">The ref argument.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRefArgument)" inheritedFromTypeName="CodeTraverser">refArgument != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IResourceUseStatement)">
      <summary>
            Generates IL for the specified resource use statement.
            </summary>
      <param name="resourceUseStatement">The resource use statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IResourceUseStatement)" inheritedFromTypeName="CodeTraverser">resourceUseStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IRethrowStatement)">
      <summary>
            Generates IL for the specified rethrow statement.
            </summary>
      <param name="rethrowStatement">The rethrow statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRethrowStatement)" inheritedFromTypeName="CodeTraverser">rethrowStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IReturnStatement)">
      <summary>
            Generates IL for the specified return statement.
            </summary>
      <param name="returnStatement">The return statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IReturnStatement)" inheritedFromTypeName="CodeTraverser">returnStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IReturnValue)">
      <summary>
            Throws an exception when executed: IReturnValue nodes
            must be replaced before converting the Code Model to IL.
            </summary>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IReturnValue)" inheritedFromTypeName="CodeTraverser">returnValue != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IRightShift)">
      <summary>
            Generates IL for the specified right shift.
            </summary>
      <param name="rightShift">The right shift.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRightShift)" inheritedFromTypeName="CodeTraverser">rightShift != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IRuntimeArgumentHandleExpression)">
      <summary>
            Generates IL for the specified runtime argument handle expression.
            </summary>
      <param name="runtimeArgumentHandleExpression">The runtime argument handle expression.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IRuntimeArgumentHandleExpression)" inheritedFromTypeName="CodeTraverser">runtimeArgumentHandleExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ISizeOf)">
      <summary>
            Generates IL for the specified size of.
            </summary>
      <param name="sizeOf">The size of.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISizeOf)" inheritedFromTypeName="CodeTraverser">sizeOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ISourceMethodBody)">
      <summary>
            Generates IL for the specified method body.
            </summary>
      <param name="methodBody">The method body.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISourceMethodBody)" inheritedFromTypeName="CodeTraverser">sourceMethodBody != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IStackArrayCreate)">
      <summary>
            Generates IL for the specified stack array create.
            </summary>
      <param name="stackArrayCreate">The stack array create.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IStackArrayCreate)" inheritedFromTypeName="CodeTraverser">stackArrayCreate != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ISubtraction)">
      <summary>
            Generates IL for the specified subtraction.
            </summary>
      <param name="subtraction">The subtraction.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISubtraction)" inheritedFromTypeName="CodeTraverser">subtraction != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ISwitchCase)">
      <summary>
            Generates IL for the specified switch case.
            </summary>
      <param name="switchCase">The switch case.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISwitchCase)" inheritedFromTypeName="CodeTraverser">switchCase != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ISwitchStatement)">
      <summary>
            Generates IL for the specified switch statement.
            </summary>
      <param name="switchStatement">The switch statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ISwitchStatement)" inheritedFromTypeName="CodeTraverser">switchStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ITargetExpression)">
      <summary>
            Performs some computation with the given target expression.
            </summary>
      <param name="targetExpression" />
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITargetExpression)" inheritedFromTypeName="CodeTraverser">targetExpression != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IThisReference)">
      <summary>
            Generates IL for the specified this reference.
            </summary>
      <param name="thisReference">The this reference.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IThisReference)" inheritedFromTypeName="CodeTraverser">thisReference != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IThrowStatement)">
      <summary>
            Generates IL for the specified throw statement.
            </summary>
      <param name="throwStatement">The throw statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IThrowStatement)" inheritedFromTypeName="CodeTraverser">throwStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ITryCatchFinallyStatement)">
      <summary>
            Generates IL for the specified try catch filter finally statement.
            </summary>
      <param name="tryCatchFilterFinallyStatement">The try catch filter finally statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITryCatchFinallyStatement)" inheritedFromTypeName="CodeTraverser">tryCatchFilterFinallyStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ITokenOf)">
      <summary>
            Generates IL for the specified token of.
            </summary>
      <param name="tokenOf">The token of.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITokenOf)" inheritedFromTypeName="CodeTraverser">tokenOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.ITypeOf)">
      <summary>
            Generates IL for the specified type of.
            </summary>
      <param name="typeOf">The type of.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITypeOf)" inheritedFromTypeName="CodeTraverser">typeOf != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IUnaryNegation)">
      <summary>
            Generates IL for the specified unary negation.
            </summary>
      <param name="unaryNegation">The unary negation.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IUnaryNegation)" inheritedFromTypeName="CodeTraverser">unaryNegation != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IUnaryPlus)">
      <summary>
            Generates IL for the specified unary plus.
            </summary>
      <param name="unaryPlus">The unary plus.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IUnaryPlus)" inheritedFromTypeName="CodeTraverser">unaryPlus != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IVectorLength)">
      <summary>
            Generates IL for the specified vector length.
            </summary>
      <param name="vectorLength">Length of the vector.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IVectorLength)" inheritedFromTypeName="CodeTraverser">vectorLength != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IWhileDoStatement)">
      <summary>
            Generates IL for the specified while do statement.
            </summary>
      <param name="whileDoStatement">The while do statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IWhileDoStatement)" inheritedFromTypeName="CodeTraverser">whileDoStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IYieldBreakStatement)">
      <summary>
            Generates IL for the specified yield break statement.
            </summary>
      <param name="yieldBreakStatement">The yield break statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IYieldBreakStatement)" inheritedFromTypeName="CodeTraverser">yieldBreakStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.TraverseChildren(Microsoft.Cci.IYieldReturnStatement)">
      <summary>
            Generates IL for the specified yield return statement.
            </summary>
      <param name="yieldReturnStatement">The yield return statement.</param>
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.IYieldReturnStatement)" inheritedFromTypeName="CodeTraverser">yieldReturnStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetIteratorScopes">
      <summary>
            Returns a local scope for each local variable in the iterator that generated the MoveNext method body that was
            converted to IL by this converter. The scopes may be duplicated and occur in the same order as the local variable
            declarations occur in the iterator. If this converter did not convert a MoveNext method, the result is null.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetLocalScopes">
      <summary>
            Returns zero or more local (block) scopes into which the CLR IL operations of this converted Code Model block is organized.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetLocalVariables">
      <summary>
            Returns all of the local variables (including compiler generated temporary variables) that are local to the block
            of statements translated by this converter.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetNamespaceScopes">
      <summary>
            Returns zero or more namespace scopes into which the namespace type containing the given method body has been nested.
            These scopes determine how simple names are looked up inside the method body. There is a separate scope for each dotted
            component in the namespace type name. For istance namespace type x.y.z will have two namespace scopes, the first is for the x and the second
            is for the y.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetOperations">
      <summary>
            Returns the IL operations that correspond to the statements that have been converted to IL by this converter.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetOperationExceptionInformation">
      <summary>
            Returns zero or more exception exception information blocks (information about handlers, filters and finally blocks)
            that correspond to try-catch-finally constructs that appear in the statements that have been converted to IL by this converter.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.GetPrivateHelperTypes">
      <summary>
            Returns zero or more types that are used to keep track of information needed to implement
            the statements that have been converted to IL by this converter. For example, any closure classes
            needed to compile anonymous delegate expressions (lambdas) will be returned by this method.
            </summary>
    </member>
    <member name="M:Microsoft.Cci.CodeModelToILConverter.ConvertToIL(Microsoft.Cci.IBlockStatement)">
      <summary>
            Traverses the given block of statements in the context of the given method to produce a list of
            IL operations, exception information blocks (the locations of handlers, filters and finallies) and any private helper
            types (for example closure classes) that represent the semantics of the given block of statements.
            The results of the traversal can be retrieved via the GetOperations, GetOperationExceptionInformation
            and GetPrivateHelperTypes methods.
            </summary>
      <param name="body">A block of statements that are to be converted to IL.</param>
    </member>
    <member name="P:Microsoft.Cci.CodeModelToILConverter.MaximumStackSizeNeeded">
      <summary>
            The maximum number of stack slots that will be needed by an interpreter of the IL produced by this converter.
            </summary>
    </member>
    <member name="P:Microsoft.Cci.CodeModelToILConverter.GetTypeFromHandle">
      <summary>
            A reference to System.Type.GetTypeFromHandle(System.Runtime.TypeHandle).
            </summary>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.Name">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.INamedEntity.get_Name" inheritedFromTypeName="INamedEntity">Contract.Result&lt;IName&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.Type">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_Type" inheritedFromTypeName="ILocalDefinition">Contract.Result&lt;ITypeReference&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.CompileTimeValue">
      <getter>
        <requires inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_CompileTimeValue" inheritedFromTypeName="ILocalDefinition">this.IsConstant</requires>
        <ensures inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_CompileTimeValue" inheritedFromTypeName="ILocalDefinition">Contract.Result&lt;IMetadataConstant&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.MethodDefinition">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_MethodDefinition" inheritedFromTypeName="ILocalDefinition">Contract.Result&lt;IMethodDefinition&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.CustomModifiers">
      <getter>
        <requires inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_CustomModifiers" inheritedFromTypeName="ILocalDefinition">this.IsModified</requires>
        <ensures inheritedFrom="M:Microsoft.Cci.ILocalDefinition.get_CustomModifiers" inheritedFromTypeName="ILocalDefinition">Contract.Result&lt;IEnumerable&lt;ICustomModifier&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:Microsoft.Cci.TemporaryVariable.Locations">
      <getter>
        <ensures inheritedFrom="M:Microsoft.Cci.IObjectWithLocations.get_Locations" inheritedFromTypeName="IObjectWithLocations">Contract.Result&lt;IEnumerable&lt;ILocation&gt;&gt;() != null</ensures>
        <ensures inheritedFrom="M:Microsoft.Cci.IObjectWithLocations.get_Locations" inheritedFromTypeName="IObjectWithLocations">Contract.ForAll(Contract.Result&lt;IEnumerable&lt;ILocation&gt;&gt;(), x =&gt; x != null)</ensures>
      </getter>
    </member>
    <member name="M:Microsoft.Cci.LabelAndTryBlockAssociater.TraverseChildren(Microsoft.Cci.ILabeledStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ILabeledStatement)" inheritedFromTypeName="CodeTraverser">labeledStatement != null</requires>
    </member>
    <member name="M:Microsoft.Cci.LabelAndTryBlockAssociater.TraverseChildren(Microsoft.Cci.ITryCatchFinallyStatement)">
      <requires inheritedFrom="M:Microsoft.Cci.CodeTraverser.TraverseChildren(Microsoft.Cci.ITryCatchFinallyStatement)" inheritedFromTypeName="CodeTraverser">tryCatchFilterFinallyStatement != null</requires>
    </member>
  </members>
</doc>