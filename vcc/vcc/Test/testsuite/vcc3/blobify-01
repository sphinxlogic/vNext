#include <vcc.h>

_(logic \bool fresh_object(\object ptr) =
  \object_root(ptr) && \mutable(ptr) && \fresh(ptr))

_(abstract \object ticket_blob(\claim c)
{
  // in reality it would be something along the lines of:
  // choose(\lambda \object blob; \claims(c, (_(root)(MM_BLOCK*)((char*)blob - 4))->size == \sizeof_object(blob)), 0)
  // it's unclear how exactly that would work
  return 0;
})

void *alloc(unsigned __int64 sz  _(out \claim ticket))
  _(ensures fresh_object(_(blob sz)(\result)) && ticket_blob(ticket) == _(blob sz)(\result))
  _(ensures \fresh(ticket) && \wrapped(ticket))
  ;

void mfree(void *p _(ghost \claim ticket))
  _(requires ticket_blob(ticket) == _(blob \sizeof_object(ticket_blob(ticket)))p)
  _(requires \wrapped(ticket))
  _(writes \extent(_(blob \sizeof_object(ticket_blob(ticket)))p))
  _(writes ticket)
  ;

_(logic \object emb(\object e) = \embedding(e))

struct B {
  unsigned size;
  // int buf[0];
#define BUFADDR(b) ((int*)((char*)(b)+sizeof(struct B))) // this is what b->buf would evaluate to
#define BUF(b) (_(root_index (b)->size) BUFADDR(b))  // this is is syntactic sugar expansion
#define BUFA(b) (emb(BUF(b)))

  _(invariant \mine(BUFA(\this)))
};


void clr(struct B *b)
  _(updates b)
  _(ensures \old(b->size) == b->size)
{
  unsigned i;

  _(unwrapping b, BUFA(b)) {

    for (i = 0; i < b->size; ++i)
      _(writes \array_range(BUF(b), b->size))
    {
      BUF(b)[i] = 0;
    }
  }

}


void f2()
{
  _(ghost \claim t1, t2)
  struct B * b = _(unblobify) (struct B*)alloc(sizeof(struct B) _(out t1));
  int *buf = _(unblobify) _(root_array 10)(int*)alloc(10 * sizeof(int) _(out t2));

  _(assume \addr(buf) == \addr(BUF(b))) // simulate split_blob

  b->size = 10;
  BUF(b)[2] = 7;

  _(wrap BUFA(b))
  _(wrap b)

  clr(b);

  _(unwrap b)
  _(unwrap BUFA(b))

  _(blobify BUFA(b))
  mfree(BUF(b) _(ghost t2));

  _(blobify b)
  mfree(b _(ghost t1));
}

`
Verification of B#adm succeeded.
Verification of ticket_blob succeeded.
Verification of clr succeeded.
Verification of f2 succeeded.
`
