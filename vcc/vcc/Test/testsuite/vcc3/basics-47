// vim:set expandtab shiftwidth=2 tabstop=2:
#include "vcc.h"
#include <stdlib.h>

typedef struct _Y *PY;

typedef _(claimable) struct _X {
  int dummy;
  _(ghost volatile \bool T[PY])
  _(invariant \approves(\this->\owner,T))
  _(invariant \forall PY t; {T[t]} T[t] <==> t->\closed && t->x == \this)
} X, *PX;

typedef _(claimable) struct _Y {
  PX x;
  _(ghost \claim xClaim;)
  _(invariant \unchanged(\this->\closed) || \inv2(x))
  _(invariant \mine(xClaim))
} Y, *PY;

void foo(PX P _(ghost \claim c))
  _(always c, P->\closed)
  _(writes P)
{
  PY y = (PY) malloc(sizeof(Y));
  _(assume y) // successful allocation
  y->x = P;
  _(assert P->T==P->T) // TODO for triggering, find another way ?
  _(ghost y->xClaim = \make_claim({P}, P->\closed))
  _(wrap y) // This fails to check inv2(y->x)
  _(assert \inv(P))
  _(assert !P->T[y])
  _(assert \false)
}
`
Verification of _X#adm succeeded.
Verification of _Y#adm succeeded.
Verification of foo failed.
testcase(30,10) : error VC8014: invariant(\unchanged(\this->\closed) || \inv2(x)) of _Y fails on wrap.
testcase(17,15) : error VC9599: (related information) location of the invariant.
`
