#include <vcc.h>

typedef unsigned __int32 UINT32;
typedef __int32 INT32;

#define _InterlockedCompareExchange(T)                                         \
_(atomic_inline)                                                             \
T InterlockedCompareExchange(volatile T *Destination, T Exchange, T Compare) { \
  if (*Destination == Compare) {                                               \
    *Destination = Exchange;                                                   \
    return Compare;                                                            \
  }                                                                            \
  else {                                                                       \
    return *Destination;                                                       \
  }                                                                            \
}                                                                              \

_InterlockedCompareExchange(UINT32)

_InterlockedCompareExchange(INT32)

struct S {
  volatile UINT32 ui;
  volatile INT32 i;
};


void foo(struct S *s _(ghost \claim c)) 
  _(always c, s->\closed)
{
  _(atomic c,s) {
    InterlockedCompareExchange(&s->i, -5, -7);
  }
}

void bar(struct S *s _(ghost \claim c)) 
  _(always c, s->\closed)
{
  _(atomic c,s) {
    InterlockedCompareExchange(&s->ui, 3, 8);
  }
}
`
Verification of foo succeeded.
Verification of bar succeeded.
`
