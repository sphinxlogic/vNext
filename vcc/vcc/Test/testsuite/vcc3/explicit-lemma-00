#include "vcc2test.h"

struct A {
  volatile int x;
  _(invariant \old(x) <= x)
};

_(abstract \bool Q(int x0, int x1))

_(def \bool lemma(\state s0, struct A *a) { return Q(\at(s0, a->x), a->x); })

_(abstract \bool lemmaProof(\state s0, \state s1, struct A *a)
  _(requires \inv2s(s0, s1, a))
  _(ensures \at(s1, lemma(s0, a))))


void foo(struct A *a)
  _(requires \wrapped(a))
{
  _(ghost \state s0)

  _(atomic a) {
    _(ghost s0 = \now())
    _(assume a->x == 10)
    a->x = 42;
  }
  _(ghost lemmaProof(s0, \now(), a))
  _(assert Q(10, 42))
}
`
Verification of A#adm succeeded.
Verification of lemma succeeded.
Verification of foo succeeded.
`
