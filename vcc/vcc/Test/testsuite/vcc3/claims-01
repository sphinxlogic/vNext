#include <vcc.h>

_(atomic_inline) int InterlockedCompareExchange(volatile int *Destination, int Exchange, int Comparand) {
  if (*Destination == Comparand) {
    *Destination = Exchange;
    return Comparand;
  } else {
    return *Destination;
  }
}

struct A {
  volatile int x;
  _(invariant \old(\this->x) == \this->x || \old(\this->x) + 1 == \this->x)
};

void LockFreeIncr(struct A *a _(ghost \claim c))
  _(writes c)
  _(always c, a->\closed)
{
  int y;
  int z;
   _(ghost \claim c1, c2;) 

  _(atomic c,a) {
    y = a->x;
    //spec( c1 = claim(c, y <= a->x); )
  }
  
  if (y >= 0x7fffffff) return;

  _(atomic c, a) {
    InterlockedCompareExchange(&a->x, y+1, y);
     _(ghost c2 = \make_claim({c}, y < a->x);) 
  }
}
`
Verification of A#adm succeeded.
Verification of LockFreeIncr failed.
testcase(34,19) : error VC8520: Assertion 'chunk y < a->x of the claim initially holds' did not verify.
`
