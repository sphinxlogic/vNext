#include <vcc.h>
struct S { int a; };
struct T { int b; };

void foo()
{
  struct S *s, *s2;
  struct T *t;
  int *i;
  

  if (s == i) { 
  }

  if (s == t) { 
  }

  if (s == s2) { 
  }

  _(assert s == t)
  _(assert (void*)s == (void*)t)
  _(assert s == i)

  _(assert s == (struct S*)t)
  _(assert (char*)s == (char*)t)
  _(assert s == s2)

  // comparing against null shouldn't produce warnings
  _(assert s == (void*)0)
  _(assert s == (struct S*)0)
  _(assert (void*)0 == s)
  _(assert (struct S*)0 == s)
  // these should be also translated as comparing against null
  _(assert s)
  _(assert !s)
  _(assert s ==> 1 > 0)
}

`
testcase(21,12) : warning VC9124: pointers of different types (struct S and struct T) are never equal in pure context
testcase(22,12) : warning VC9124: pointers of different types (struct S and struct T) are never equal in pure context
testcase(23,12) : warning VC9124: pointers of different types (struct S and int32_t) are never equal in pure context
Verification of foo failed.
testcase(21,12) : error VC9500: Assertion 's == t' did not verify.
`
