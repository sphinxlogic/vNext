; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blpxe.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlPxeApiPacket@@3U_PXE_API_PACKET@@A		; BlPxeApiPacket
PUBLIC	?BlPxeCallFrame@@3PAGA				; BlPxeCallFrame
PUBLIC	?BlPxeEntry16@@3U_FAR_POINTER@@A		; BlPxeEntry16
PUBLIC	?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
PUBLIC	?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
PUBLIC	?BlPxeBootpReply@@3U_BOOTP_REPLY@@A		; BlPxeBootpReply
_BSS	SEGMENT
?BlPxeApiPacket@@3U_PXE_API_PACKET@@A DB 09eH DUP (?)	; BlPxeApiPacket
	ALIGN	4

?BlPxeCallFrame@@3PAGA DW 010H DUP (?)			; BlPxeCallFrame
?BlPxeEntry16@@3U_FAR_POINTER@@A DD 01H DUP (?)		; BlPxeEntry16
?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A DD 01H DUP (?) ; BlPxeExtendedInformation
?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A DD 01H DUP (?) ; BlPxeInstallationCheck
?BlPxeBootpReply@@3U_BOOTP_REPLY@@A DB 06ccH DUP (?)	; BlPxeBootpReply
_BSS	ENDS
PUBLIC	?BlPxeCallPxeApi@@YIXGPAX@Z			; BlPxeCallPxeApi
EXTRN	?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z:PROC ; BlRtlCallLegacyFunction
EXTRN	?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertLinearPointerToFarPointer
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
; Function compile flags: /Odtp
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blpxe.cpp
;	COMDAT ?BlPxeCallPxeApi@@YIXGPAX@Z
_TEXT	SEGMENT
_Packet$ = -48						; size = 4
_OpCode$ = -44						; size = 2
_Context$ = -40						; size = 36
_FarPointer$ = -4					; size = 4
?BlPxeCallPxeApi@@YIXGPAX@Z PROC			; BlPxeCallPxeApi, COMDAT
; _OpCode$ = cx
; _Packet$ = edx

; 191  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	89 55 d0	 mov	 DWORD PTR _Packet$[ebp], edx
  00009	66 89 4d d4	 mov	 WORD PTR _OpCode$[ebp], cx

; 192  :     BL_LEGACY_CALL_CONTEXT Context;
; 193  :     FAR_POINTER FarPointer;
; 194  : 
; 195  :     BlRtlZeroMemory(&Context, sizeof(BL_LEGACY_CALL_CONTEXT));

  0000d	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  00012	8d 4d d8	 lea	 ecx, DWORD PTR _Context$[ebp]
  00015	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 196  : 
; 197  :     if (BlPxeExtendedInformation != NULL) {

  0001a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A, 0 ; BlPxeExtendedInformation
  00021	74 40		 je	 SHORT $LN2@BlPxeCallP

; 198  : 
; 199  :         BlPxeCallFrame[0] = OpCode;

  00023	66 8b 45 d4	 mov	 ax, WORD PTR _OpCode$[ebp]
  00027	66 a3 00 00 00
	00		 mov	 WORD PTR ?BlPxeCallFrame@@3PAGA, ax

; 200  :         BlRtlConvertLinearPointerToFarPointer(Packet, (PFAR_POINTER) &BlPxeCallFrame[1]);

  0002d	ba 02 00 00 00	 mov	 edx, OFFSET ?BlPxeCallFrame@@3PAGA+2
  00032	8b 4d d0	 mov	 ecx, DWORD PTR _Packet$[ebp]
  00035	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 201  : 
; 202  :         BlRtlCallLegacyFunction(BlPxeExtendedInformation->Entry16.Segment,
; 203  :                                 BlPxeExtendedInformation->Entry16.Offset,
; 204  :                                 BlPxeCallFrame,
; 205  :                                 3 * sizeof(UINT16),
; 206  :                                 &Context,
; 207  :                                 &Context);

  0003a	8d 4d d8	 lea	 ecx, DWORD PTR _Context$[ebp]
  0003d	51		 push	 ecx
  0003e	8d 55 d8	 lea	 edx, DWORD PTR _Context$[ebp]
  00041	52		 push	 edx
  00042	6a 06		 push	 6
  00044	68 00 00 00 00	 push	 OFFSET ?BlPxeCallFrame@@3PAGA
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0004e	66 8b 50 10	 mov	 dx, WORD PTR [eax+16]
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00058	66 8b 49 12	 mov	 cx, WORD PTR [ecx+18]
  0005c	e8 00 00 00 00	 call	 ?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z ; BlRtlCallLegacyFunction

; 208  : 
; 209  :     } else {

  00061	eb 44		 jmp	 SHORT $LN3@BlPxeCallP
$LN2@BlPxeCallP:

; 210  : 
; 211  :         BlRtlConvertLinearPointerToFarPointer(Packet, &FarPointer);

  00063	8d 55 fc	 lea	 edx, DWORD PTR _FarPointer$[ebp]
  00066	8b 4d d0	 mov	 ecx, DWORD PTR _Packet$[ebp]
  00069	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 212  : 
; 213  :         Context.ebx = OpCode;

  0006e	0f b7 55 d4	 movzx	 edx, WORD PTR _OpCode$[ebp]
  00072	89 55 dc	 mov	 DWORD PTR _Context$[ebp+4], edx

; 214  :         Context.es = FarPointer.Segment;

  00075	0f b7 45 fe	 movzx	 eax, WORD PTR _FarPointer$[ebp+2]
  00079	89 45 f4	 mov	 DWORD PTR _Context$[ebp+28], eax

; 215  :         Context.edi = FarPointer.Offset;

  0007c	0f b7 4d fc	 movzx	 ecx, WORD PTR _FarPointer$[ebp]
  00080	89 4d ec	 mov	 DWORD PTR _Context$[ebp+20], ecx

; 216  : 
; 217  :         BlRtlCallLegacyFunction(BlPxeInstallationCheck->RealModeEntry.Segment,
; 218  :                                 BlPxeInstallationCheck->RealModeEntry.Offset,
; 219  :                                 NULL,
; 220  :                                 0,
; 221  :                                 &Context,
; 222  :                                 &Context);

  00083	8d 55 d8	 lea	 edx, DWORD PTR _Context$[ebp]
  00086	52		 push	 edx
  00087	8d 45 d8	 lea	 eax, DWORD PTR _Context$[ebp]
  0008a	50		 push	 eax
  0008b	6a 00		 push	 0
  0008d	6a 00		 push	 0
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  00095	66 8b 51 0a	 mov	 dx, WORD PTR [ecx+10]
  00099	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0009e	66 8b 48 0c	 mov	 cx, WORD PTR [eax+12]
  000a2	e8 00 00 00 00	 call	 ?BlRtlCallLegacyFunction@@YIXGGPAXKPAU_BL_LEGACY_CALL_CONTEXT@@1@Z ; BlRtlCallLegacyFunction
$LN3@BlPxeCallP:

; 223  :     }
; 224  : 
; 225  :     return;
; 226  : }

  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?BlPxeCallPxeApi@@YIXGPAX@Z ENDP			; BlPxeCallPxeApi
_TEXT	ENDS
PUBLIC	??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@ ; `string'
PUBLIC	??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@ ; `string'
PUBLIC	??_C@_09HEHCHIGP@blpxe?4cpp?$AA@		; `string'
PUBLIC	??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@ ; `string'
PUBLIC	?BlPxeGetBootpReply@@YIXXZ			; BlPxeGetBootpReply
EXTRN	?BlCommandLine@@3PA_WA:DWORD			; BlCommandLine
EXTRN	?BlPoolAllocateBlock@@YIPAXK@Z:PROC		; BlPoolAllocateBlock
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
;	COMDAT ??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@
CONST	SEGMENT
??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@ DB 'PXE: Inva'
	DB	'lid BOOTP_REPLY packet!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@
CONST	SEGMENT
??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@ DB 'PXE: '
	DB	'Get DHCP_ACK failed 0x%04x!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
CONST	SEGMENT
??_C@_09HEHCHIGP@blpxe?4cpp?$AA@ DB 'blpxe.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@
CONST	SEGMENT
??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@ DB 'PXE: Ge'
	DB	't PXE_REPLY failed: 0x%04x!', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlPxeGetBootpReply@@YIXXZ
_TEXT	SEGMENT
tv140 = -24						; size = 4
_GetCachedInfo$ = -20					; size = 4
_Next$ = -16						; size = 4
_Option$ = -12						; size = 4
_Limit$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlPxeGetBootpReply@@YIXXZ PROC				; BlPxeGetBootpReply, COMDAT

; 241  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 242  :     PPXE_GET_CACHED_INFO GetCachedInfo;
; 243  :     UINT32 Index;
; 244  :     ULONG_PTR Limit;
; 245  :     ULONG_PTR Next;
; 246  :     PDHCP_OPTION_HEADER Option;
; 247  : 
; 248  :     GetCachedInfo = &BlPxeApiPacket.u1.GetCachedInfo;

  00006	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _GetCachedInfo$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 249  : 
; 250  :     //
; 251  :     // Get the discover reply packet received from the boot server.
; 252  :     //
; 253  : 
; 254  :     BlRtlZeroMemory(GetCachedInfo, sizeof(PXE_GET_CACHED_INFO));

  0000d	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00012	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00015	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 255  :     GetCachedInfo->PacketType = PXE_PACKET_TYPE_CACHED_REPLY;

  0001a	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  0001d	66 c7 40 02 03
	00		 mov	 WORD PTR [eax+2], 3

; 256  :     BlRtlConvertLinearPointerToFarPointer(&BlPxeBootpReply, &GetCachedInfo->Buffer);

  00023	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  00026	83 c2 06	 add	 edx, 6
  00029	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  0002e	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 257  :     GetCachedInfo->BufferSize = sizeof(BlPxeBootpReply);

  00033	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00036	66 c7 41 04 cc
	06		 mov	 WORD PTR [ecx+4], 1740	; 000006ccH

; 258  : 
; 259  :     BlPxeCallPxeApi(PXE_OPCODE_GET_CACHED_INFO, GetCachedInfo);

  0003c	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  0003f	b9 71 00 00 00	 mov	 ecx, 113		; 00000071H
  00044	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 260  : 
; 261  :     if (GetCachedInfo->Status != PXE_STATUS_SUCCESS) {

  00049	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  0004c	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0004f	85 c0		 test	 eax, eax
  00051	74 23		 je	 SHORT $LN15@BlPxeGetBo

; 262  : 
; 263  :         BlRtlPrintf("PXE: Get PXE_REPLY failed: 0x%04x!\n", GetCachedInfo->Status);

  00053	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00056	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00059	52		 push	 edx
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@DBAHJIHD@PXE?3?5Get?5PXE_REPLY?5failed?3?50x?$CF04@
  0005f	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00064	83 c4 08	 add	 esp, 8

; 264  :         BlRtlHalt();

  00067	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  0006c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  00071	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN15@BlPxeGetBo:

; 265  :     }
; 266  : 
; 267  :     //
; 268  :     // If the discover reply packet does not have the BOOTP reply opcode, then get the DHCP ACK packet.
; 269  :     //
; 270  : 
; 271  :     if (BlPxeBootpReply.OpCode != BOOTP_REPLY_OPCODE_REPLY) {

  00076	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A
  0007d	83 f8 02	 cmp	 eax, 2
  00080	74 69		 je	 SHORT $LN14@BlPxeGetBo

; 272  : 
; 273  :         BlRtlZeroMemory(GetCachedInfo, sizeof(PXE_GET_CACHED_INFO));

  00082	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  00087	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  0008a	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 274  :         GetCachedInfo->PacketType = PXE_PACKET_TYPE_DHCP_ACK;

  0008f	8b 4d ec	 mov	 ecx, DWORD PTR _GetCachedInfo$[ebp]
  00092	66 c7 41 02 02
	00		 mov	 WORD PTR [ecx+2], 2

; 275  :         BlRtlConvertLinearPointerToFarPointer(&BlPxeBootpReply, &GetCachedInfo->Buffer);

  00098	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  0009b	83 c2 06	 add	 edx, 6
  0009e	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  000a3	e8 00 00 00 00	 call	 ?BlRtlConvertLinearPointerToFarPointer@@YIXPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertLinearPointerToFarPointer

; 276  :         GetCachedInfo->BufferSize = sizeof(BlPxeBootpReply);

  000a8	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  000ab	66 c7 42 04 cc
	06		 mov	 WORD PTR [edx+4], 1740	; 000006ccH

; 277  : 
; 278  :         BlPxeCallPxeApi(PXE_OPCODE_GET_CACHED_INFO, GetCachedInfo);

  000b1	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  000b4	b9 71 00 00 00	 mov	 ecx, 113		; 00000071H
  000b9	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 279  : 
; 280  :         if (GetCachedInfo->Status != PXE_STATUS_SUCCESS) {

  000be	8b 45 ec	 mov	 eax, DWORD PTR _GetCachedInfo$[ebp]
  000c1	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  000c4	85 c9		 test	 ecx, ecx
  000c6	74 23		 je	 SHORT $LN14@BlPxeGetBo

; 281  : 
; 282  :             BlRtlPrintf("PXE: Get DHCP_ACK failed 0x%04x!\n", GetCachedInfo->Status);

  000c8	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  000cb	0f b7 02	 movzx	 eax, WORD PTR [edx]
  000ce	50		 push	 eax
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MBIIDCBG@PXE?3?5Get?5DHCP_ACK?5failed?50x?$CF04x?$CB@
  000d4	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000d9	83 c4 08	 add	 esp, 8

; 283  :             BlRtlHalt();

  000dc	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  000e1	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  000e6	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN14@BlPxeGetBo:

; 284  :         }
; 285  :     }
; 286  : 
; 287  :     //
; 288  :     // If neither discover reply packet nor the DHCP ACK packet contains the BOOTP reply opcode, then PXE boot is not possible.
; 289  :     //
; 290  : 
; 291  :     if (BlPxeBootpReply.OpCode != BOOTP_REPLY_OPCODE_REPLY) {

  000eb	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A
  000f2	83 f9 02	 cmp	 ecx, 2
  000f5	74 1c		 je	 SHORT $LN12@BlPxeGetBo

; 292  : 
; 293  :         BlRtlPrintf("PXE: Invalid BOOTP_REPLY packet!\n");

  000f7	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ILIHPFFI@PXE?3?5Invalid?5BOOTP_REPLY?5packet?$CB@
  000fc	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00101	83 c4 04	 add	 esp, 4

; 294  :         BlRtlHalt();

  00104	ba 26 01 00 00	 mov	 edx, 294		; 00000126H
  00109	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  0010e	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN12@BlPxeGetBo:

; 295  :     }
; 296  : 
; 297  : #if PXE_VERBOSE
; 298  : 
; 299  :     BlRtlPrintf("PXE: IP=%u.%u.%u.%u DHCP=%u.%u.%u.%u GATEWAY=%u.%u.%u.%u\n",
; 300  :                 BlPxeBootpReply.ClientIP.Array[0],
; 301  :                 BlPxeBootpReply.ClientIP.Array[1],
; 302  :                 BlPxeBootpReply.ClientIP.Array[2],
; 303  :                 BlPxeBootpReply.ClientIP.Array[3],
; 304  :                 BlPxeBootpReply.ServerIP.Array[0],
; 305  :                 BlPxeBootpReply.ServerIP.Array[1],
; 306  :                 BlPxeBootpReply.ServerIP.Array[2],
; 307  :                 BlPxeBootpReply.ServerIP.Array[3],
; 308  :                 BlPxeBootpReply.GatewayIP.Array[0],
; 309  :                 BlPxeBootpReply.GatewayIP.Array[1],
; 310  :                 BlPxeBootpReply.GatewayIP.Array[2],
; 311  :                 BlPxeBootpReply.GatewayIP.Array[3]
; 312  :                 );
; 313  : 
; 314  : #endif
; 315  : 
; 316  :     Limit = ((ULONG_PTR) &BlPxeBootpReply) + GetCachedInfo->BufferSize;

  00113	8b 55 ec	 mov	 edx, DWORD PTR _GetCachedInfo$[ebp]
  00116	0f b7 42 04	 movzx	 eax, WORD PTR [edx+4]
  0011a	05 00 00 00 00	 add	 eax, OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A ; BlPxeBootpReply
  0011f	89 45 f8	 mov	 DWORD PTR _Limit$[ebp], eax

; 317  :     Next = (ULONG_PTR) (&BlPxeBootpReply.Data);

  00122	c7 45 f0 f0 00
	00 00		 mov	 DWORD PTR _Next$[ebp], OFFSET ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+240
$LN11@BlPxeGetBo:

; 318  : 
; 319  :     while (Next < Limit) {

  00129	8b 4d f0	 mov	 ecx, DWORD PTR _Next$[ebp]
  0012c	3b 4d f8	 cmp	 ecx, DWORD PTR _Limit$[ebp]
  0012f	0f 83 c9 00 00
	00		 jae	 $LN16@BlPxeGetBo

; 320  : 
; 321  :         Option = (PDHCP_OPTION_HEADER) Next;

  00135	8b 55 f0	 mov	 edx, DWORD PTR _Next$[ebp]
  00138	89 55 f4	 mov	 DWORD PTR _Option$[ebp], edx

; 322  : 
; 323  :         switch (Option->Code) {

  0013b	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  0013e	8a 08		 mov	 cl, BYTE PTR [eax]
  00140	88 4d e8	 mov	 BYTE PTR tv140[ebp], cl
  00143	80 7d e8 00	 cmp	 BYTE PTR tv140[ebp], 0
  00147	74 0b		 je	 SHORT $LN7@BlPxeGetBo
  00149	80 7d e8 08	 cmp	 BYTE PTR tv140[ebp], 8
  0014d	74 13		 je	 SHORT $LN6@BlPxeGetBo
  0014f	e9 94 00 00 00	 jmp	 $LN1@BlPxeGetBo
$LN7@BlPxeGetBo:

; 324  : 
; 325  :             case DHCP_OPTION_CODE_PAD: {
; 326  : 
; 327  :                 Next += 1;

  00154	8b 55 f0	 mov	 edx, DWORD PTR _Next$[ebp]
  00157	83 c2 01	 add	 edx, 1
  0015a	89 55 f0	 mov	 DWORD PTR _Next$[ebp], edx

; 328  : 
; 329  :                 break;

  0015d	e9 97 00 00 00	 jmp	 $LN8@BlPxeGetBo
$LN6@BlPxeGetBo:

; 330  :             }
; 331  : 
; 332  :             case DHCP_OPTION_CODE_COMMAND_LINE: {
; 333  : 
; 334  :                 if (((Next + sizeof(DHCP_OPTION_HEADER)) < Limit) &&
; 335  :                     ((Next + sizeof(DHCP_OPTION_HEADER) + Option->Length) < Limit)) {

  00162	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00165	83 c0 02	 add	 eax, 2
  00168	3b 45 f8	 cmp	 eax, DWORD PTR _Limit$[ebp]
  0016b	73 73		 jae	 SHORT $LN5@BlPxeGetBo
  0016d	8b 4d f4	 mov	 ecx, DWORD PTR _Option$[ebp]
  00170	0f b6 51 01	 movzx	 edx, BYTE PTR [ecx+1]
  00174	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00177	8d 4c 10 02	 lea	 ecx, DWORD PTR [eax+edx+2]
  0017b	3b 4d f8	 cmp	 ecx, DWORD PTR _Limit$[ebp]
  0017e	73 60		 jae	 SHORT $LN5@BlPxeGetBo

; 336  : 
; 337  :                     BlCommandLine = (PWCHAR)BlPoolAllocateBlock((Option->Length + 1) * sizeof(WCHAR));

  00180	8b 55 f4	 mov	 edx, DWORD PTR _Option$[ebp]
  00183	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00187	8d 4c 00 02	 lea	 ecx, DWORD PTR [eax+eax+2]
  0018b	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00190	a3 00 00 00 00	 mov	 DWORD PTR ?BlCommandLine@@3PA_WA, eax ; BlCommandLine

; 338  : 
; 339  :                     for (Index = 0; Index < Option->Length; Index += 1) {

  00195	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  0019c	eb 09		 jmp	 SHORT $LN4@BlPxeGetBo
$LN3@BlPxeGetBo:
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  001a1	83 c1 01	 add	 ecx, 1
  001a4	89 4d fc	 mov	 DWORD PTR _Index$[ebp], ecx
$LN4@BlPxeGetBo:
  001a7	8b 55 f4	 mov	 edx, DWORD PTR _Option$[ebp]
  001aa	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001ae	39 45 fc	 cmp	 DWORD PTR _Index$[ebp], eax
  001b1	73 1a		 jae	 SHORT $LN2@BlPxeGetBo

; 340  : 
; 341  :                         BlCommandLine[Index] = (WCHAR) (((PCHAR) (Option + 1))[Index]);

  001b3	8b 4d f4	 mov	 ecx, DWORD PTR _Option$[ebp]
  001b6	03 4d fc	 add	 ecx, DWORD PTR _Index$[ebp]
  001b9	66 0f be 51 02	 movsx	 dx, BYTE PTR [ecx+2]
  001be	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  001c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  001c7	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 342  :                     }

  001cb	eb d1		 jmp	 SHORT $LN3@BlPxeGetBo
$LN2@BlPxeGetBo:

; 343  : 
; 344  :                     BlCommandLine[Option->Length] = 0;

  001cd	8b 55 f4	 mov	 edx, DWORD PTR _Option$[ebp]
  001d0	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  001d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  001da	66 c7 04 41 00
	00		 mov	 WORD PTR [ecx+eax*2], 0
$LN5@BlPxeGetBo:

; 345  : 
; 346  : #if PXE_VERBOSE
; 347  : 
; 348  :                     BlRtlPrintf("PXE: CMD=[%s]\n", BlCommandLine);
; 349  : 
; 350  : #endif
; 351  :                 }
; 352  : 
; 353  :                 Next = Limit;

  001e0	8b 55 f8	 mov	 edx, DWORD PTR _Limit$[ebp]
  001e3	89 55 f0	 mov	 DWORD PTR _Next$[ebp], edx

; 354  : 
; 355  :                 break;

  001e6	eb 11		 jmp	 SHORT $LN8@BlPxeGetBo
$LN1@BlPxeGetBo:

; 356  :             }
; 357  : 
; 358  :             default: {
; 359  : 
; 360  :                 Next += (sizeof(DHCP_OPTION_HEADER) + Option->Length);

  001e8	8b 45 f4	 mov	 eax, DWORD PTR _Option$[ebp]
  001eb	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  001ef	8b 55 f0	 mov	 edx, DWORD PTR _Next$[ebp]
  001f2	8d 44 0a 02	 lea	 eax, DWORD PTR [edx+ecx+2]
  001f6	89 45 f0	 mov	 DWORD PTR _Next$[ebp], eax
$LN8@BlPxeGetBo:

; 361  :             }
; 362  :         }
; 363  :     }

  001f9	e9 2b ff ff ff	 jmp	 $LN11@BlPxeGetBo
$LN16@BlPxeGetBo:

; 364  : 
; 365  :     return;
; 366  : }

  001fe	8b e5		 mov	 esp, ebp
  00200	5d		 pop	 ebp
  00201	c3		 ret	 0
?BlPxeGetBootpReply@@YIXXZ ENDP				; BlPxeGetBootpReply
_TEXT	ENDS
PUBLIC	?BlPxeGetFileSize@@YIEPBDPAK@Z			; BlPxeGetFileSize
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
EXTRN	?BlRtlStringLength@@YIKPBD@Z:PROC		; BlRtlStringLength
; Function compile flags: /Odtp
;	COMDAT ?BlPxeGetFileSize@@YIEPBDPAK@Z
_TEXT	SEGMENT
_FileSize$ = -16					; size = 4
_Path$ = -12						; size = 4
_PathLength$ = -8					; size = 4
_GetFileSize$ = -4					; size = 4
?BlPxeGetFileSize@@YIEPBDPAK@Z PROC			; BlPxeGetFileSize, COMDAT
; _Path$ = ecx
; _FileSize$ = edx

; 393  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 55 f0	 mov	 DWORD PTR _FileSize$[ebp], edx
  00009	89 4d f4	 mov	 DWORD PTR _Path$[ebp], ecx

; 394  :     PPXE_TFTP_GET_FILE_SIZE GetFileSize;
; 395  :     UINT32 PathLength;
; 396  : 
; 397  :     GetFileSize = &BlPxeApiPacket.u1.TFTPGetFileSize;

  0000c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _GetFileSize$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 398  : 
; 399  :     BlRtlZeroMemory(GetFileSize, sizeof(PXE_TFTP_GET_FILE_SIZE));

  00013	ba 8e 00 00 00	 mov	 edx, 142		; 0000008eH
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _GetFileSize$[ebp]
  0001b	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 400  : 
; 401  :     PathLength = BlRtlStringLength(Path);

  00020	8b 4d f4	 mov	 ecx, DWORD PTR _Path$[ebp]
  00023	e8 00 00 00 00	 call	 ?BlRtlStringLength@@YIKPBD@Z ; BlRtlStringLength
  00028	89 45 f8	 mov	 DWORD PTR _PathLength$[ebp], eax

; 402  : 
; 403  :     if (PathLength >= sizeof(GetFileSize->FileName)) {

  0002b	81 7d f8 80 00
	00 00		 cmp	 DWORD PTR _PathLength$[ebp], 128 ; 00000080H
  00032	72 04		 jb	 SHORT $LN2@BlPxeGetFi

; 404  : 
; 405  :         return FALSE;

  00034	32 c0		 xor	 al, al
  00036	eb 5e		 jmp	 SHORT $LN3@BlPxeGetFi
$LN2@BlPxeGetFi:

; 406  : 
; 407  :     }
; 408  : 
; 409  :     GetFileSize->ServerIP = BlPxeBootpReply.ServerIP;

  00038	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  0003b	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+20
  00041	89 48 02	 mov	 DWORD PTR [eax+2], ecx

; 410  :     GetFileSize->GatewayIP = BlPxeBootpReply.GatewayIP;

  00044	8b 55 fc	 mov	 edx, DWORD PTR _GetFileSize$[ebp]
  00047	a1 18 00 00 00	 mov	 eax, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+24
  0004c	89 42 06	 mov	 DWORD PTR [edx+6], eax

; 411  : 
; 412  :     BlRtlCopyMemory(GetFileSize->FileName, Path, PathLength);

  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _PathLength$[ebp]
  00052	51		 push	 ecx
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _GetFileSize$[ebp]
  00056	83 c1 0a	 add	 ecx, 10			; 0000000aH
  00059	8b 55 f4	 mov	 edx, DWORD PTR _Path$[ebp]
  0005c	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 413  : 
; 414  :     GetFileSize->FileName[PathLength] = 0;

  00061	8b 55 fc	 mov	 edx, DWORD PTR _GetFileSize$[ebp]
  00064	03 55 f8	 add	 edx, DWORD PTR _PathLength$[ebp]
  00067	c6 42 0a 00	 mov	 BYTE PTR [edx+10], 0

; 415  : 
; 416  :     BlPxeCallPxeApi(PXE_OPCODE_TFTP_GET_FILE_SIZE, GetFileSize);

  0006b	8b 55 fc	 mov	 edx, DWORD PTR _GetFileSize$[ebp]
  0006e	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00073	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 417  : 
; 418  :     if (GetFileSize->Status != PXE_STATUS_SUCCESS) {

  00078	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  0007b	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0007e	85 c9		 test	 ecx, ecx
  00080	74 04		 je	 SHORT $LN1@BlPxeGetFi

; 419  : 
; 420  :         return FALSE;

  00082	32 c0		 xor	 al, al
  00084	eb 10		 jmp	 SHORT $LN3@BlPxeGetFi
$LN1@BlPxeGetFi:

; 421  :     }
; 422  : 
; 423  :     *FileSize = GetFileSize->FileSize;

  00086	8b 55 f0	 mov	 edx, DWORD PTR _FileSize$[ebp]
  00089	8b 45 fc	 mov	 eax, DWORD PTR _GetFileSize$[ebp]
  0008c	8b 88 8a 00 00
	00		 mov	 ecx, DWORD PTR [eax+138]
  00092	89 0a		 mov	 DWORD PTR [edx], ecx

; 424  : 
; 425  :     return TRUE;

  00094	b0 01		 mov	 al, 1
$LN3@BlPxeGetFi:

; 426  : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
?BlPxeGetFileSize@@YIEPBDPAK@Z ENDP			; BlPxeGetFileSize
_TEXT	ENDS
PUBLIC	?BlPxeReadFile@@YIEPBDPAXK@Z			; BlPxeReadFile
EXTRN	?BlRtlAssertFailed@@YIXPBDK@Z:PROC		; BlRtlAssertFailed
; Function compile flags: /Odtp
;	COMDAT ?BlPxeReadFile@@YIEPBDPAXK@Z
_TEXT	SEGMENT
_Buffer$ = -20						; size = 4
_Path$ = -16						; size = 4
_PathLength$ = -12					; size = 4
_ReadFile$ = -8						; size = 4
_Index$ = -4						; size = 4
_NumberOfBytes$ = 8					; size = 4
?BlPxeReadFile@@YIEPBDPAXK@Z PROC			; BlPxeReadFile, COMDAT
; _Path$ = ecx
; _Buffer$ = edx

; 456  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 55 ec	 mov	 DWORD PTR _Buffer$[ebp], edx
  00009	89 4d f0	 mov	 DWORD PTR _Path$[ebp], ecx

; 457  :     UINT32 Index;
; 458  :     UINT32 PathLength;
; 459  :     PPXE_TFTP_READ_FILE ReadFile;
; 460  : 
; 461  :     BLASSERT((((ULONG_PTR) Buffer) + NumberOfBytes) > ((ULONG_PTR) Buffer));

  0000c	8b 45 ec	 mov	 eax, DWORD PTR _Buffer$[ebp]
  0000f	03 45 08	 add	 eax, DWORD PTR _NumberOfBytes$[ebp]
  00012	3b 45 ec	 cmp	 eax, DWORD PTR _Buffer$[ebp]
  00015	77 0f		 ja	 SHORT $LN7@BlPxeReadF
  00017	ba cd 01 00 00	 mov	 edx, 461		; 000001cdH
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  00021	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN7@BlPxeReadF:

; 462  : 
; 463  :     BLASSERT((((ULONG_PTR) Buffer) + NumberOfBytes) <= 0xFFFFFFFF);

  00026	8b 4d ec	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00029	03 4d 08	 add	 ecx, DWORD PTR _NumberOfBytes$[ebp]
  0002c	83 f9 ff	 cmp	 ecx, -1
  0002f	76 0f		 jbe	 SHORT $LN6@BlPxeReadF
  00031	ba cf 01 00 00	 mov	 edx, 463		; 000001cfH
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  0003b	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlPxeReadF:

; 464  : 
; 465  :     ReadFile = &BlPxeApiPacket.u1.TFTPReadFile;

  00040	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ReadFile$[ebp], OFFSET ?BlPxeApiPacket@@3U_PXE_API_PACKET@@A ; BlPxeApiPacket

; 466  : 
; 467  :     PathLength = BlRtlStringLength(Path);

  00047	8b 4d f0	 mov	 ecx, DWORD PTR _Path$[ebp]
  0004a	e8 00 00 00 00	 call	 ?BlRtlStringLength@@YIKPBD@Z ; BlRtlStringLength
  0004f	89 45 f4	 mov	 DWORD PTR _PathLength$[ebp], eax

; 468  : 
; 469  :     if (PathLength >= sizeof(ReadFile->FileName)) {

  00052	81 7d f4 80 00
	00 00		 cmp	 DWORD PTR _PathLength$[ebp], 128 ; 00000080H
  00059	72 07		 jb	 SHORT $LN5@BlPxeReadF

; 470  : 
; 471  : #if PXE_VERBOSE
; 472  : 
; 473  :         BlRtlPrintf("PXE: Path is too long [%s]\n", Path);
; 474  : 
; 475  : #endif
; 476  : 
; 477  :         return FALSE;

  0005b	32 c0		 xor	 al, al
  0005d	e9 96 00 00 00	 jmp	 $LN8@BlPxeReadF
$LN5@BlPxeReadF:

; 478  :     }
; 479  : 
; 480  :     for (Index = 0; Index < PXE_TFTP_READ_FILE_RETRY_COUNT; Index += 1) {

  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  00069	eb 09		 jmp	 SHORT $LN4@BlPxeReadF
$LN3@BlPxeReadF:
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _Index$[ebp]
  0006e	83 c2 01	 add	 edx, 1
  00071	89 55 fc	 mov	 DWORD PTR _Index$[ebp], edx
$LN4@BlPxeReadF:
  00074	83 7d fc 05	 cmp	 DWORD PTR _Index$[ebp], 5
  00078	73 7c		 jae	 SHORT $LN2@BlPxeReadF

; 481  : 
; 482  :         BlRtlZeroMemory(ReadFile, sizeof(PXE_TFTP_READ_FILE));

  0007a	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  00082	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 483  : 
; 484  :         BlRtlCopyMemory(ReadFile->FileName,
; 485  :                         Path,
; 486  :                         PathLength);

  00087	8b 45 f4	 mov	 eax, DWORD PTR _PathLength$[ebp]
  0008a	50		 push	 eax
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  0008e	83 c1 02	 add	 ecx, 2
  00091	8b 55 f0	 mov	 edx, DWORD PTR _Path$[ebp]
  00094	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 487  : 
; 488  :         ReadFile->FileName[PathLength] = 0;

  00099	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  0009c	03 4d f4	 add	 ecx, DWORD PTR _PathLength$[ebp]
  0009f	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 489  : 
; 490  :         ReadFile->BufferSize = NumberOfBytes;

  000a3	8b 55 f8	 mov	 edx, DWORD PTR _ReadFile$[ebp]
  000a6	8b 45 08	 mov	 eax, DWORD PTR _NumberOfBytes$[ebp]
  000a9	89 82 82 00 00
	00		 mov	 DWORD PTR [edx+130], eax

; 491  :         ReadFile->Buffer = (UINT32) (ULONG_PTR) Buffer;

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  000b2	8b 55 ec	 mov	 edx, DWORD PTR _Buffer$[ebp]
  000b5	89 91 86 00 00
	00		 mov	 DWORD PTR [ecx+134], edx

; 492  :         ReadFile->ServerIP = BlPxeBootpReply.ServerIP;

  000bb	8b 45 f8	 mov	 eax, DWORD PTR _ReadFile$[ebp]
  000be	8b 0d 14 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+20
  000c4	89 88 8a 00 00
	00		 mov	 DWORD PTR [eax+138], ecx

; 493  :         ReadFile->GatewayIP = BlPxeBootpReply.GatewayIP;

  000ca	8b 55 f8	 mov	 edx, DWORD PTR _ReadFile$[ebp]
  000cd	a1 18 00 00 00	 mov	 eax, DWORD PTR ?BlPxeBootpReply@@3U_BOOTP_REPLY@@A+24
  000d2	89 82 8e 00 00
	00		 mov	 DWORD PTR [edx+142], eax

; 494  : 
; 495  :         BlPxeCallPxeApi(PXE_OPCODE_TFTP_READ_FILE, ReadFile);

  000d8	8b 55 f8	 mov	 edx, DWORD PTR _ReadFile$[ebp]
  000db	b9 23 00 00 00	 mov	 ecx, 35			; 00000023H
  000e0	e8 00 00 00 00	 call	 ?BlPxeCallPxeApi@@YIXGPAX@Z ; BlPxeCallPxeApi

; 496  : 
; 497  :         if (ReadFile->Status == PXE_STATUS_SUCCESS) {

  000e5	8b 4d f8	 mov	 ecx, DWORD PTR _ReadFile$[ebp]
  000e8	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000eb	85 d2		 test	 edx, edx
  000ed	75 02		 jne	 SHORT $LN1@BlPxeReadF

; 498  : 
; 499  :             break;

  000ef	eb 05		 jmp	 SHORT $LN2@BlPxeReadF
$LN1@BlPxeReadF:

; 500  :         }
; 501  : 
; 502  : #if PXE_VERBOSE
; 503  : 
; 504  :         BlRtlPrintf("PXE: TFTP_READ failed: 0x%04x! [%u / %u]\n",
; 505  :                     ReadFile->Status,
; 506  :                     Index + 1,
; 507  :                     PXE_TFTP_READ_FILE_RETRY_COUNT);
; 508  : 
; 509  : #endif
; 510  : 
; 511  :     }

  000f1	e9 75 ff ff ff	 jmp	 $LN3@BlPxeReadF
$LN2@BlPxeReadF:

; 512  : 
; 513  :     return TRUE;

  000f6	b0 01		 mov	 al, 1
$LN8@BlPxeReadF:

; 514  : }

  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 04 00	 ret	 4
?BlPxeReadFile@@YIEPBDPAXK@Z ENDP			; BlPxeReadFile
_TEXT	ENDS
PUBLIC	??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@ ; `string'
PUBLIC	?BlPxeInitialize@@YIXXZ				; BlPxeInitialize
EXTRN	?BlFsReadFile@@3P6IEPBDPAXK@ZA:DWORD		; BlFsReadFile
EXTRN	?BlFsGetFileSize@@3P6IEPBDPAK@ZA:DWORD		; BlFsGetFileSize
EXTRN	?BlRtlComputeChecksum8@@YIEPBXK@Z:PROC		; BlRtlComputeChecksum8
EXTRN	?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertFarPointerToLinearPointer
EXTRN	?BlRtlCallLegacyInterruptService@@YIXEPAU_BL_LEGACY_CALL_CONTEXT@@0@Z:PROC ; BlRtlCallLegacyInterruptService
;	COMDAT ??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@ DB 'PXE: !PXE i'
	DB	's invalid!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@ DB 'PXE: Unabl'
	DB	'e to find PXE!', 0aH, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlPxeInitialize@@YIXXZ
_TEXT	SEGMENT
_Context$ = -52						; size = 36
_Next$ = -16						; size = 4
_Limit$ = -12						; size = 4
_FarPointer$ = -8					; size = 4
_InstallationCheck$ = -4				; size = 4
?BlPxeInitialize@@YIXXZ PROC				; BlPxeInitialize, COMDAT

; 529  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 530  :     BL_LEGACY_CALL_CONTEXT Context;
; 531  :     FAR_POINTER FarPointer;
; 532  :     PPXE_INSTALLATION_CHECK InstallationCheck;
; 533  :     ULONG_PTR Limit;
; 534  :     ULONG_PTR Next;
; 535  : 
; 536  :     BlRtlZeroMemory(&Context, sizeof(Context));

  00006	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  0000b	8d 4d cc	 lea	 ecx, DWORD PTR _Context$[ebp]
  0000e	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 537  : 
; 538  :     Context.eax = 0x5650;

  00013	c7 45 cc 50 56
	00 00		 mov	 DWORD PTR _Context$[ebp], 22096 ; 00005650H

; 539  : 
; 540  :     BlRtlCallLegacyInterruptService(0x1A,
; 541  :                                     &Context,
; 542  :                                     &Context);

  0001a	8d 45 cc	 lea	 eax, DWORD PTR _Context$[ebp]
  0001d	50		 push	 eax
  0001e	8d 55 cc	 lea	 edx, DWORD PTR _Context$[ebp]
  00021	b1 1a		 mov	 cl, 26			; 0000001aH
  00023	e8 00 00 00 00	 call	 ?BlRtlCallLegacyInterruptService@@YIXEPAU_BL_LEGACY_CALL_CONTEXT@@0@Z ; BlRtlCallLegacyInterruptService

; 543  : 
; 544  :     if (((Context.eflags & RFLAGS_CF) == 0) && ((Context.eax & 0xFFFF) == 0x564E)) {

  00028	8b 4d ec	 mov	 ecx, DWORD PTR _Context$[ebp+32]
  0002b	83 e1 01	 and	 ecx, 1
  0002e	75 38		 jne	 SHORT $LN11@BlPxeIniti
  00030	8b 55 cc	 mov	 edx, DWORD PTR _Context$[ebp]
  00033	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00039	81 fa 4e 56 00
	00		 cmp	 edx, 22094		; 0000564eH
  0003f	75 27		 jne	 SHORT $LN11@BlPxeIniti

; 545  : 
; 546  :         FarPointer.Segment = (UINT16) Context.es;

  00041	66 8b 45 e8	 mov	 ax, WORD PTR _Context$[ebp+28]
  00045	66 89 45 fa	 mov	 WORD PTR _FarPointer$[ebp+2], ax

; 547  :         FarPointer.Offset = (UINT16) (Context.ebx & 0xFFFF);

  00049	8b 4d d0	 mov	 ecx, DWORD PTR _Context$[ebp+4]
  0004c	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00052	66 89 4d f8	 mov	 WORD PTR _FarPointer$[ebp], cx

; 548  : 
; 549  : #if PXE_VERBOSE
; 550  : 
; 551  :         BlRtlPrintf("PXE: INT1A/5650h => [ES:BX = %04x:%04x]\n",
; 552  :                     FarPointer.Segment,
; 553  :                     FarPointer.Offset);
; 554  : 
; 555  : #endif
; 556  : 
; 557  :         BlPxeInstallationCheck = (PPXE_INSTALLATION_CHECK)
; 558  :             BlRtlConvertFarPointerToLinearPointer(&FarPointer);

  00056	8d 4d f8	 lea	 ecx, DWORD PTR _FarPointer$[ebp]
  00059	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  0005e	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, eax ; BlPxeInstallationCheck

; 559  : 
; 560  :     } else {

  00063	e9 a7 00 00 00	 jmp	 $LN10@BlPxeIniti
$LN11@BlPxeIniti:

; 561  : 
; 562  :         Next = 0xA0000;

  00068	c7 45 f0 00 00
	0a 00		 mov	 DWORD PTR _Next$[ebp], 655360 ; 000a0000H

; 563  :         Limit = 0x10000;

  0006f	c7 45 f4 00 00
	01 00		 mov	 DWORD PTR _Limit$[ebp], 65536 ; 00010000H

; 564  : 
; 565  :         BlPxeInstallationCheck = NULL;

  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, 0 ; BlPxeInstallationCheck
$LN9@BlPxeIniti:

; 566  : 
; 567  :         do {
; 568  : 
; 569  :             Next -= 16;

  00080	8b 55 f0	 mov	 edx, DWORD PTR _Next$[ebp]
  00083	83 ea 10	 sub	 edx, 16			; 00000010H
  00086	89 55 f0	 mov	 DWORD PTR _Next$[ebp], edx

; 570  : 
; 571  :             InstallationCheck = (PPXE_INSTALLATION_CHECK) Next;

  00089	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  0008c	89 45 fc	 mov	 DWORD PTR _InstallationCheck$[ebp], eax

; 572  : 
; 573  :             if ((InstallationCheck->Length >= sizeof(PXE_INSTALLATION_CHECK)) &&
; 574  :                 (InstallationCheck->Signature[0] == 'P') &&
; 575  :                 (InstallationCheck->Signature[1] == 'X') &&
; 576  :                 (InstallationCheck->Signature[2] == 'E') &&
; 577  :                 (InstallationCheck->Signature[3] == 'N') &&
; 578  :                 (InstallationCheck->Signature[4] == 'V') &&
; 579  :                 (InstallationCheck->Signature[5] == '+') &&
; 580  :                 (BlRtlComputeChecksum8(InstallationCheck, InstallationCheck->Length) == 0)) {

  0008f	8b 4d fc	 mov	 ecx, DWORD PTR _InstallationCheck$[ebp]
  00092	0f b6 51 08	 movzx	 edx, BYTE PTR [ecx+8]
  00096	83 fa 2c	 cmp	 edx, 44			; 0000002cH
  00099	72 68		 jb	 SHORT $LN8@BlPxeIniti
  0009b	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  0009e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  000a1	83 f9 50	 cmp	 ecx, 80			; 00000050H
  000a4	75 5d		 jne	 SHORT $LN8@BlPxeIniti
  000a6	8b 55 fc	 mov	 edx, DWORD PTR _InstallationCheck$[ebp]
  000a9	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  000ad	83 f8 58	 cmp	 eax, 88			; 00000058H
  000b0	75 51		 jne	 SHORT $LN8@BlPxeIniti
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR _InstallationCheck$[ebp]
  000b5	0f b6 51 02	 movzx	 edx, BYTE PTR [ecx+2]
  000b9	83 fa 45	 cmp	 edx, 69			; 00000045H
  000bc	75 45		 jne	 SHORT $LN8@BlPxeIniti
  000be	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000c1	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000c5	83 f9 4e	 cmp	 ecx, 78			; 0000004eH
  000c8	75 39		 jne	 SHORT $LN8@BlPxeIniti
  000ca	8b 55 fc	 mov	 edx, DWORD PTR _InstallationCheck$[ebp]
  000cd	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  000d1	83 f8 56	 cmp	 eax, 86			; 00000056H
  000d4	75 2d		 jne	 SHORT $LN8@BlPxeIniti
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR _InstallationCheck$[ebp]
  000d9	0f b6 51 05	 movzx	 edx, BYTE PTR [ecx+5]
  000dd	83 fa 2b	 cmp	 edx, 43			; 0000002bH
  000e0	75 21		 jne	 SHORT $LN8@BlPxeIniti
  000e2	8b 45 fc	 mov	 eax, DWORD PTR _InstallationCheck$[ebp]
  000e5	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _InstallationCheck$[ebp]
  000ec	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  000f1	0f b6 c8	 movzx	 ecx, al
  000f4	85 c9		 test	 ecx, ecx
  000f6	75 0b		 jne	 SHORT $LN8@BlPxeIniti

; 581  : 
; 582  :                 BlPxeInstallationCheck = InstallationCheck;

  000f8	8b 55 fc	 mov	 edx, DWORD PTR _InstallationCheck$[ebp]
  000fb	89 15 00 00 00
	00		 mov	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, edx ; BlPxeInstallationCheck

; 583  : 
; 584  :                 break;

  00101	eb 0c		 jmp	 SHORT $LN10@BlPxeIniti
$LN8@BlPxeIniti:

; 585  :             }
; 586  : 
; 587  :         } while (Next > Limit);

  00103	8b 45 f0	 mov	 eax, DWORD PTR _Next$[ebp]
  00106	3b 45 f4	 cmp	 eax, DWORD PTR _Limit$[ebp]
  00109	0f 87 71 ff ff
	ff		 ja	 $LN9@BlPxeIniti
$LN10@BlPxeIniti:

; 588  :     }
; 589  : 
; 590  :     if (BlPxeInstallationCheck == NULL) {

  0010f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A, 0 ; BlPxeInstallationCheck
  00116	75 1c		 jne	 SHORT $LN5@BlPxeIniti

; 591  : 
; 592  :         BlRtlPrintf("PXE: Unable to find PXE!\n");

  00118	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@BNOBOGEO@PXE?3?5Unable?5to?5find?5PXE?$CB?6?$AA@
  0011d	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00122	83 c4 04	 add	 esp, 4

; 593  :         BlRtlHalt();

  00125	ba 51 02 00 00	 mov	 edx, 593		; 00000251H
  0012a	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  0012f	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlPxeIniti:

; 594  :     }
; 595  : 
; 596  :     if (BlPxeInstallationCheck->Version < 0x201) {

  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0013a	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0013e	81 fa 01 02 00
	00		 cmp	 edx, 513		; 00000201H
  00144	7d 13		 jge	 SHORT $LN4@BlPxeIniti

; 597  : 
; 598  : #if PXE_VERBOSE
; 599  : 
; 600  :         BlRtlPrintf("PXE: Using PXENV+.\n");
; 601  : 
; 602  : #endif
; 603  : 
; 604  :         BlPxeEntry16 = BlPxeInstallationCheck->RealModeEntry;

  00146	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0014b	8b 48 0a	 mov	 ecx, DWORD PTR [eax+10]
  0014e	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BlPxeEntry16@@3U_FAR_POINTER@@A, ecx ; BlPxeEntry16

; 605  : 
; 606  :     } else {

  00154	e9 a1 00 00 00	 jmp	 $LN3@BlPxeIniti
$LN4@BlPxeIniti:

; 607  : 
; 608  : #if PXE_VERBOSE
; 609  : 
; 610  :         BlRtlPrintf("PXE: Using !PXE.\n");
; 611  : 
; 612  : #endif
; 613  : 
; 614  :         BlPxeExtendedInformation = (PPXE_EXTENDED_INFORMATION)
; 615  :             BlRtlConvertFarPointerToLinearPointer(&BlPxeInstallationCheck->ExtendedInformation);

  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeInstallationCheck@@3PAU_PXE_INSTALLATION_CHECK@@A ; BlPxeInstallationCheck
  0015f	83 c1 28	 add	 ecx, 40			; 00000028H
  00162	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  00167	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A, eax ; BlPxeExtendedInformation

; 616  : 
; 617  :         if (!((BlPxeExtendedInformation->Length >= sizeof(PXE_EXTENDED_INFORMATION)) &&
; 618  :               (BlPxeExtendedInformation->Signature[0] == '!') &&
; 619  :               (BlPxeExtendedInformation->Signature[1] == 'P') &&
; 620  :               (BlPxeExtendedInformation->Signature[2] == 'X') &&
; 621  :               (BlPxeExtendedInformation->Signature[3] == 'E') &&
; 622  :               (BlRtlComputeChecksum8(BlPxeExtendedInformation, BlPxeExtendedInformation->Length) == 0))) {

  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00172	0f b6 42 04	 movzx	 eax, BYTE PTR [edx+4]
  00176	83 f8 58	 cmp	 eax, 88			; 00000058H
  00179	72 55		 jb	 SHORT $LN1@BlPxeIniti
  0017b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  00181	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00184	83 fa 21	 cmp	 edx, 33			; 00000021H
  00187	75 47		 jne	 SHORT $LN1@BlPxeIniti
  00189	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0018e	0f b6 48 01	 movzx	 ecx, BYTE PTR [eax+1]
  00192	83 f9 50	 cmp	 ecx, 80			; 00000050H
  00195	75 39		 jne	 SHORT $LN1@BlPxeIniti
  00197	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  0019d	0f b6 42 02	 movzx	 eax, BYTE PTR [edx+2]
  001a1	83 f8 58	 cmp	 eax, 88			; 00000058H
  001a4	75 2a		 jne	 SHORT $LN1@BlPxeIniti
  001a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001ac	0f b6 51 03	 movzx	 edx, BYTE PTR [ecx+3]
  001b0	83 fa 45	 cmp	 edx, 69			; 00000045H
  001b3	75 1b		 jne	 SHORT $LN1@BlPxeIniti
  001b5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001ba	0f b6 50 04	 movzx	 edx, BYTE PTR [eax+4]
  001be	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001c4	e8 00 00 00 00	 call	 ?BlRtlComputeChecksum8@@YIEPBXK@Z ; BlRtlComputeChecksum8
  001c9	0f b6 c8	 movzx	 ecx, al
  001cc	85 c9		 test	 ecx, ecx
  001ce	74 1c		 je	 SHORT $LN2@BlPxeIniti
$LN1@BlPxeIniti:

; 623  : 
; 624  :             BlRtlPrintf("PXE: !PXE is invalid!\n");

  001d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OIJGCMHH@PXE?3?5?$CBPXE?5is?5invalid?$CB?6?$AA@
  001d5	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  001da	83 c4 04	 add	 esp, 4

; 625  :             BlRtlHalt();

  001dd	ba 71 02 00 00	 mov	 edx, 625		; 00000271H
  001e2	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09HEHCHIGP@blpxe?4cpp?$AA@
  001e7	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN2@BlPxeIniti:

; 626  :         }
; 627  : 
; 628  :         BlPxeEntry16 = BlPxeExtendedInformation->Entry16;

  001ec	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPxeExtendedInformation@@3PAU_PXE_EXTENDED_INFORMATION@@A ; BlPxeExtendedInformation
  001f2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001f5	a3 00 00 00 00	 mov	 DWORD PTR ?BlPxeEntry16@@3U_FAR_POINTER@@A, eax ; BlPxeEntry16
$LN3@BlPxeIniti:

; 629  :     }
; 630  : 
; 631  : #if PXE_VERBOSE
; 632  : 
; 633  :     BlRtlPrintf("PXE: PXENV+ @ %p\n"
; 634  :                 "PXE: !PXE   @ %p\n"
; 635  :                 "PXE: Entry16 @ %04x:%04x\n",
; 636  :                 BlPxeInstallationCheck,
; 637  :                 BlPxeExtendedInformation,
; 638  :                 BlPxeEntry16.Segment,
; 639  :                 BlPxeEntry16.Offset);
; 640  : 
; 641  : #endif
; 642  : 
; 643  :     BlPxeGetBootpReply();

  001fa	e8 00 00 00 00	 call	 ?BlPxeGetBootpReply@@YIXXZ ; BlPxeGetBootpReply

; 644  : 
; 645  :     BlFsGetFileSize = BlPxeGetFileSize;

  001ff	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA, OFFSET ?BlPxeGetFileSize@@YIEPBDPAK@Z ; BlFsGetFileSize, BlPxeGetFileSize

; 646  :     BlFsReadFile = BlPxeReadFile;

  00209	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA, OFFSET ?BlPxeReadFile@@YIEPBDPAXK@Z ; BlFsReadFile, BlPxeReadFile

; 647  : 
; 648  :     return;
; 649  : }

  00213	8b e5		 mov	 esp, ebp
  00215	5d		 pop	 ebp
  00216	c3		 ret	 0
?BlPxeInitialize@@YIXXZ ENDP				; BlPxeInitialize
_TEXT	ENDS
END
