; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blsingularity.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
PUBLIC	?BlSingularityFileImageTableSize@@3KA		; BlSingularityFileImageTableSize
PUBLIC	?BlKernelBase@@3PAXA				; BlKernelBase
PUBLIC	?BlSingularityProcessorToStart@@3KA		; BlSingularityProcessorToStart
PUBLIC	?BlProcessorCount@@3KA				; BlProcessorCount
PUBLIC	?BlCommandLine@@3PA_WA				; BlCommandLine
PUBLIC	?BlKernelSize@@3KA				; BlKernelSize
PUBLIC	?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A		; BlKernelFile
PUBLIC	?BlSingularitySmap@@3PAU_BL_SMAP@@A		; BlSingularitySmap
PUBLIC	?BlProcessor@@3PAU_BL_PROCESSOR@@A		; BlProcessor
PUBLIC	?BlDistro@@3U_BL_DISTRO@@A			; BlDistro
PUBLIC	?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
PUBLIC	?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
PUBLIC	?BlSingularityOhci1394Buffer@@3PAEA		; BlSingularityOhci1394Buffer
PUBLIC	?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
_BSS	SEGMENT
?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A DD 01H DUP (?) ; BlPlatform
?BlSingularityFileImageTableSize@@3KA DD 01H DUP (?)	; BlSingularityFileImageTableSize
?BlKernelBase@@3PAXA DD 01H DUP (?)			; BlKernelBase
?BlSingularityProcessorToStart@@3KA DD 01H DUP (?)	; BlSingularityProcessorToStart
?BlProcessorCount@@3KA DD 01H DUP (?)			; BlProcessorCount
?BlCommandLine@@3PA_WA DD 01H DUP (?)			; BlCommandLine
?BlKernelSize@@3KA DD 01H DUP (?)			; BlKernelSize
?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A DD 01H DUP (?)	; BlKernelFile
?BlSingularitySmap@@3PAU_BL_SMAP@@A DD 01H DUP (?)	; BlSingularitySmap
?BlProcessor@@3PAU_BL_PROCESSOR@@A DD 01H DUP (?)	; BlProcessor
?BlDistro@@3U_BL_DISTRO@@A DB 014H DUP (?)		; BlDistro
?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA DD 01H DUP (?) ; BlKernelEntryPoint
?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A DD 01H DUP (?) ; BlCpuArray
?BlSingularityOhci1394Buffer@@3PAEA DB 03000H DUP (?)	; BlSingularityOhci1394Buffer
?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A DD 01H DUP (?) ; BlSingularityFileImageTable
_BSS	ENDS
PUBLIC	??_C@_05JDDINMFO@end?4?3?$AA@			; `string'
PUBLIC	?BlGetBeb@@YIPAU_BEB@@XZ			; BlGetBeb
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@ ; `string'
PUBLIC	??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@ ; `string'
PUBLIC	??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@ ; `string'
PUBLIC	??_C@_05COJAONLL@Path?$DN?$AA@			; `string'
PUBLIC	??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@ ; `string'
PUBLIC	??_C@_05HAHDDALE@Size?$DN?$AA@			; `string'
PUBLIC	??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@	; `string'
PUBLIC	??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@KCAGGIII@safeos?1boot?4ini?$AA@	; `string'
PUBLIC	?BlSingularityLoadDistro@@YIXXZ			; BlSingularityLoadDistro
EXTRN	?BlMmMapVirtualRange@@YIXPAX0KEEE@Z:PROC	; BlMmMapVirtualRange
EXTRN	?BlVideoPrintf@@YAEPBDZZ:PROC			; BlVideoPrintf
EXTRN	?BlKdPrintf@@YAEPBDZZ:PROC			; BlKdPrintf
EXTRN	?BlMmAllocatePhysicalRegion@@YI_KKK@Z:PROC	; BlMmAllocatePhysicalRegion
EXTRN	?BlRtlInsertTailList@@YIXPAU_LIST_ENTRY@@0@Z:PROC ; BlRtlInsertTailList
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
EXTRN	?BlRtlAssertFailed@@YIXPBDK@Z:PROC		; BlRtlAssertFailed
EXTRN	?BlRtlParsePositiveDecimal@@YIEPBDPAK1@Z:PROC	; BlRtlParsePositiveDecimal
EXTRN	?BlRtlFindSubstring@@YIPBDPBD0@Z:PROC		; BlRtlFindSubstring
EXTRN	?BlFsReadFile@@3P6IEPBDPAXK@ZA:DWORD		; BlFsReadFile
EXTRN	?BlPoolAllocateBlock@@YIPAXK@Z:PROC		; BlPoolAllocateBlock
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
EXTRN	?BlFsGetFileSize@@3P6IEPBDPAK@ZA:DWORD		; BlFsGetFileSize
EXTRN	?BlRtlInitializeListHead@@YIXPAU_LIST_ENTRY@@@Z:PROC ; BlRtlInitializeListHead
;	COMDAT ??_C@_05JDDINMFO@end?4?3?$AA@
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blsingularity.cpp
CONST	SEGMENT
??_C@_05JDDINMFO@end?4?3?$AA@ DB 'end.:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@
CONST	SEGMENT
??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@ DB 0dH
	DB	'Reading distro files ... %u / %u [%u / %u]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@ DB 0aH, 'BL: '
	DB	'Error reading %s!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@ DB 'DISTR'
	DB	'O: %s [%u bytes]', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@
CONST	SEGMENT
??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@ DB 'DISTRO'
	DB	': Reading distro (%u files , %u bytes).', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05COJAONLL@Path?$DN?$AA@
CONST	SEGMENT
??_C@_05COJAONLL@Path?$DN?$AA@ DB 'Path=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@
CONST	SEGMENT
??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@ DB 'BL: Error p'
	DB	'arsing distro INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HAHDDALE@Size?$DN?$AA@
CONST	SEGMENT
??_C@_05HAHDDALE@Size?$DN?$AA@ DB 'Size=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@ DB 'BL: U'
	DB	'nable to read INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
CONST	SEGMENT
??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@ DB 'blsingularity.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@ DB 'BL: Un'
	DB	'able to get INI file!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCAGGIII@safeos?1boot?4ini?$AA@
CONST	SEGMENT
??_C@_0BA@KCAGGIII@safeos?1boot?4ini?$AA@ DB 'safeos/boot.ini', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlSingularityLoadDistro@@YIXXZ
_TEXT	SEGMENT
_CharactersConsumed$ = -52				; size = 4
_Next$ = -48						; size = 4
_DummySize$ = -44					; size = 4
_BytesRead$ = -40					; size = 4
_DistroFile$ = -36					; size = 4
_Temp$ = -32						; size = 4
_Entry$ = -28						; size = 4
_Head$ = -24						; size = 4
_NewLine$ = -20						; size = 4
_BlIniFileData$ = -16					; size = 4
_Size$ = -12						; size = 4
_FilesRead$ = -8					; size = 4
_BlIniFileSize$ = -4					; size = 4
?BlSingularityLoadDistro@@YIXXZ PROC			; BlSingularityLoadDistro, COMDAT

; 113  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H

; 114  :     UINT32 BytesRead;
; 115  :     UINT32 CharactersConsumed;
; 116  :     PBL_DISTRO_FILE DistroFile;
; 117  :     UINT32 DummySize;
; 118  :     PLIST_ENTRY Entry;
; 119  :     UINT32 FilesRead;
; 120  :     PLIST_ENTRY Head;
; 121  :     PCHAR NewLine;
; 122  :     PCHAR Next;
; 123  :     UINT32 Size;
; 124  :     PCHAR Temp;
; 125  :     PVOID BlIniFileData;
; 126  :     UINT32 BlIniFileSize;
; 127  : 
; 128  :     BlDistro.NumberOfFiles = 0;

  00006	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A, 0

; 129  :     BlRtlInitializeListHead(&BlDistro.FileList);

  00010	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  00015	e8 00 00 00 00	 call	 ?BlRtlInitializeListHead@@YIXPAU_LIST_ENTRY@@@Z ; BlRtlInitializeListHead

; 130  : 
; 131  :     //
; 132  :     // Read the distro INI file.
; 133  :     //
; 134  : 
; 135  :     if (BlFsGetFileSize(SINGULARITY_DISTRO_INI_PATH, &BlIniFileSize) == FALSE) {

  0001a	8d 55 fc	 lea	 edx, DWORD PTR _BlIniFileSize$[ebp]
  0001d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BA@KCAGGIII@safeos?1boot?4ini?$AA@
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA ; BlFsGetFileSize
  00028	0f b6 c0	 movzx	 eax, al
  0002b	85 c0		 test	 eax, eax
  0002d	75 1c		 jne	 SHORT $LN28@BlSingular

; 136  : 
; 137  :         BlRtlPrintf("BL: Unable to get INI file!\n");

  0002f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@PAFAHLDE@BL?3?5Unable?5to?5get?5INI?5file?$CB?6?$AA@
  00034	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00039	83 c4 04	 add	 esp, 4

; 138  :         BlRtlHalt();

  0003c	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  00041	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00046	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN28@BlSingular:

; 139  :     }
; 140  : 
; 141  :     BlIniFileData = BlPoolAllocateBlock(BlIniFileSize + 1);

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _BlIniFileSize$[ebp]
  0004e	83 c1 01	 add	 ecx, 1
  00051	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00056	89 45 f0	 mov	 DWORD PTR _BlIniFileData$[ebp], eax

; 142  : 
; 143  :     if (BlFsReadFile(SINGULARITY_DISTRO_INI_PATH, BlIniFileData, BlIniFileSize) == FALSE) {

  00059	8b 4d fc	 mov	 ecx, DWORD PTR _BlIniFileSize$[ebp]
  0005c	51		 push	 ecx
  0005d	8b 55 f0	 mov	 edx, DWORD PTR _BlIniFileData$[ebp]
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BA@KCAGGIII@safeos?1boot?4ini?$AA@
  00065	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA ; BlFsReadFile
  0006b	0f b6 d0	 movzx	 edx, al
  0006e	85 d2		 test	 edx, edx
  00070	75 1c		 jne	 SHORT $LN27@BlSingular

; 144  : 
; 145  :         BlRtlPrintf("BL: Unable to read INI file!\n");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DCCFEHEG@BL?3?5Unable?5to?5read?5INI?5file?$CB?6?$AA@
  00077	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0007c	83 c4 04	 add	 esp, 4

; 146  :         BlRtlHalt();

  0007f	ba 92 00 00 00	 mov	 edx, 146		; 00000092H
  00084	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00089	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN27@BlSingular:

; 147  :     }
; 148  : 
; 149  :     //
; 150  :     // Parse INI file and build distro file list.
; 151  :     //
; 152  : 
; 153  :     NewLine = (PCHAR) BlIniFileData;

  0008e	8b 45 f0	 mov	 eax, DWORD PTR _BlIniFileData$[ebp]
  00091	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax
$LN26@BlSingular:

; 154  : 
; 155  :     for (;;) {
; 156  : 
; 157  :         Next = NewLine;

  00094	8b 4d ec	 mov	 ecx, DWORD PTR _NewLine$[ebp]
  00097	89 4d d0	 mov	 DWORD PTR _Next$[ebp], ecx

; 158  :         NewLine = Next + 1;

  0009a	8b 55 d0	 mov	 edx, DWORD PTR _Next$[ebp]
  0009d	83 c2 01	 add	 edx, 1
  000a0	89 55 ec	 mov	 DWORD PTR _NewLine$[ebp], edx
$LN24@BlSingular:

; 159  : 
; 160  :         while ((*NewLine != 0) && (*NewLine != '\r') && (*NewLine != '\n')) {

  000a3	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000a6	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000a9	85 c9		 test	 ecx, ecx
  000ab	74 21		 je	 SHORT $LN23@BlSingular
  000ad	8b 55 ec	 mov	 edx, DWORD PTR _NewLine$[ebp]
  000b0	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000b3	83 f8 0d	 cmp	 eax, 13			; 0000000dH
  000b6	74 16		 je	 SHORT $LN23@BlSingular
  000b8	8b 4d ec	 mov	 ecx, DWORD PTR _NewLine$[ebp]
  000bb	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000be	83 fa 0a	 cmp	 edx, 10			; 0000000aH
  000c1	74 0b		 je	 SHORT $LN23@BlSingular

; 161  : 
; 162  :             NewLine += 1;

  000c3	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000c6	83 c0 01	 add	 eax, 1
  000c9	89 45 ec	 mov	 DWORD PTR _NewLine$[ebp], eax

; 163  :         }

  000cc	eb d5		 jmp	 SHORT $LN24@BlSingular
$LN23@BlSingular:

; 164  : 
; 165  :         if (*NewLine == 0) {

  000ce	8b 4d ec	 mov	 ecx, DWORD PTR _NewLine$[ebp]
  000d1	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  000d4	85 d2		 test	 edx, edx
  000d6	75 05		 jne	 SHORT $LN21@BlSingular

; 166  : 
; 167  :             break;

  000d8	e9 55 01 00 00	 jmp	 $LN25@BlSingular
$LN21@BlSingular:

; 168  :         }
; 169  : 
; 170  :         while ((*NewLine == '\r') || (*NewLine == '\n')) {

  000dd	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  000e0	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  000e3	83 f9 0d	 cmp	 ecx, 13			; 0000000dH
  000e6	74 0b		 je	 SHORT $LN19@BlSingular
  000e8	8b 55 ec	 mov	 edx, DWORD PTR _NewLine$[ebp]
  000eb	0f be 02	 movsx	 eax, BYTE PTR [edx]
  000ee	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000f1	75 11		 jne	 SHORT $LN20@BlSingular
$LN19@BlSingular:

; 171  : 
; 172  :             *NewLine = 0;

  000f3	8b 4d ec	 mov	 ecx, DWORD PTR _NewLine$[ebp]
  000f6	c6 01 00	 mov	 BYTE PTR [ecx], 0

; 173  :             NewLine += 1;

  000f9	8b 55 ec	 mov	 edx, DWORD PTR _NewLine$[ebp]
  000fc	83 c2 01	 add	 edx, 1
  000ff	89 55 ec	 mov	 DWORD PTR _NewLine$[ebp], edx

; 174  :         }

  00102	eb d9		 jmp	 SHORT $LN21@BlSingular
$LN20@BlSingular:

; 175  : 
; 176  :         Next = (PCHAR)BlRtlFindSubstring(Next, "Size=");

  00104	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05HAHDDALE@Size?$DN?$AA@
  00109	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  0010c	e8 00 00 00 00	 call	 ?BlRtlFindSubstring@@YIPBDPBD0@Z ; BlRtlFindSubstring
  00111	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 177  : 
; 178  :         if (Next == NULL) {

  00114	83 7d d0 00	 cmp	 DWORD PTR _Next$[ebp], 0
  00118	75 05		 jne	 SHORT $LN18@BlSingular

; 179  : 
; 180  :             continue;

  0011a	e9 75 ff ff ff	 jmp	 $LN26@BlSingular
$LN18@BlSingular:

; 181  :         }
; 182  : 
; 183  :         Next += 5;

  0011f	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  00122	83 c0 05	 add	 eax, 5
  00125	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 184  : 
; 185  :         if (BlRtlParsePositiveDecimal(Next,
; 186  :                                       &Size,
; 187  :                                       &CharactersConsumed) == FALSE) {

  00128	8d 4d cc	 lea	 ecx, DWORD PTR _CharactersConsumed$[ebp]
  0012b	51		 push	 ecx
  0012c	8d 55 f4	 lea	 edx, DWORD PTR _Size$[ebp]
  0012f	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00132	e8 00 00 00 00	 call	 ?BlRtlParsePositiveDecimal@@YIEPBDPAK1@Z ; BlRtlParsePositiveDecimal
  00137	0f b6 d0	 movzx	 edx, al
  0013a	85 d2		 test	 edx, edx
  0013c	75 1c		 jne	 SHORT $LN17@BlSingular
$ParseFailure$3604:

; 188  : 
; 189  :           ParseFailure:
; 190  :             BlRtlPrintf("BL: Error parsing distro INI file!\n");

  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@EKFFGIL@BL?3?5Error?5parsing?5distro?5INI?5fil@
  00143	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00148	83 c4 04	 add	 esp, 4

; 191  :             BlRtlHalt();

  0014b	ba bf 00 00 00	 mov	 edx, 191		; 000000bfH
  00150	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00155	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN17@BlSingular:

; 192  :         }
; 193  : 
; 194  :         Next = (PCHAR)BlRtlFindSubstring(Next, "Path=");

  0015a	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05COJAONLL@Path?$DN?$AA@
  0015f	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  00162	e8 00 00 00 00	 call	 ?BlRtlFindSubstring@@YIPBDPBD0@Z ; BlRtlFindSubstring
  00167	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 195  : 
; 196  :         if (Next == NULL) {

  0016a	83 7d d0 00	 cmp	 DWORD PTR _Next$[ebp], 0
  0016e	75 02		 jne	 SHORT $LN16@BlSingular

; 197  : 
; 198  :             goto ParseFailure;

  00170	eb cc		 jmp	 SHORT $ParseFailure$3604
$LN16@BlSingular:

; 199  :         }
; 200  : 
; 201  :         Next += 5;

  00172	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  00175	83 c0 05	 add	 eax, 5
  00178	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 202  : 
; 203  :         if (*Next == 0) {

  0017b	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  0017e	0f be 11	 movsx	 edx, BYTE PTR [ecx]
  00181	85 d2		 test	 edx, edx
  00183	75 02		 jne	 SHORT $LN15@BlSingular

; 204  : 
; 205  :             goto ParseFailure;

  00185	eb b7		 jmp	 SHORT $ParseFailure$3604
$LN15@BlSingular:

; 206  :         }
; 207  : 
; 208  :         DistroFile = (PBL_DISTRO_FILE) BlPoolAllocateBlock(sizeof(BL_DISTRO_FILE));

  00187	b9 10 04 00 00	 mov	 ecx, 1040		; 00000410H
  0018c	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00191	89 45 dc	 mov	 DWORD PTR _DistroFile$[ebp], eax

; 209  : 
; 210  :         BLASSERT((NewLine - Next) < sizeof(DistroFile->Path));

  00194	8b 45 ec	 mov	 eax, DWORD PTR _NewLine$[ebp]
  00197	2b 45 d0	 sub	 eax, DWORD PTR _Next$[ebp]
  0019a	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0019f	72 0f		 jb	 SHORT $LN14@BlSingular
  001a1	ba d2 00 00 00	 mov	 edx, 210		; 000000d2H
  001a6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  001ab	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN14@BlSingular:

; 211  : 
; 212  :         Temp = (PCHAR)Next;

  001b0	8b 4d d0	 mov	 ecx, DWORD PTR _Next$[ebp]
  001b3	89 4d e0	 mov	 DWORD PTR _Temp$[ebp], ecx
$LN13@BlSingular:

; 213  : 
; 214  :         while (Temp != NewLine) {

  001b6	8b 55 e0	 mov	 edx, DWORD PTR _Temp$[ebp]
  001b9	3b 55 ec	 cmp	 edx, DWORD PTR _NewLine$[ebp]
  001bc	74 1c		 je	 SHORT $LN12@BlSingular

; 215  : 
; 216  :             if (*Temp == '\\') {

  001be	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001c1	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  001c4	83 f9 5c	 cmp	 ecx, 92			; 0000005cH
  001c7	75 06		 jne	 SHORT $LN11@BlSingular

; 217  : 
; 218  :                 *Temp = '/';

  001c9	8b 55 e0	 mov	 edx, DWORD PTR _Temp$[ebp]
  001cc	c6 02 2f	 mov	 BYTE PTR [edx], 47	; 0000002fH
$LN11@BlSingular:

; 219  :             }
; 220  : 
; 221  :             Temp += 1;

  001cf	8b 45 e0	 mov	 eax, DWORD PTR _Temp$[ebp]
  001d2	83 c0 01	 add	 eax, 1
  001d5	89 45 e0	 mov	 DWORD PTR _Temp$[ebp], eax

; 222  :         }

  001d8	eb dc		 jmp	 SHORT $LN13@BlSingular
$LN12@BlSingular:

; 223  : 
; 224  :         BlRtlCopyMemory(DistroFile->Path, Next, NewLine - Next);

  001da	8b 4d ec	 mov	 ecx, DWORD PTR _NewLine$[ebp]
  001dd	2b 4d d0	 sub	 ecx, DWORD PTR _Next$[ebp]
  001e0	51		 push	 ecx
  001e1	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  001e4	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001e7	8b 55 d0	 mov	 edx, DWORD PTR _Next$[ebp]
  001ea	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 225  : 
; 226  :         //
; 227  :         // By convention with DistroBuiderl, the first file with a size of zero is
; 228  :         // really the INI file, so we need to set its size.
; 229  :         //
; 230  :         if (Size == 0) {

  001ef	83 7d f4 00	 cmp	 DWORD PTR _Size$[ebp], 0
  001f3	75 06		 jne	 SHORT $LN10@BlSingular

; 231  :             Size = BlIniFileSize;

  001f5	8b 55 fc	 mov	 edx, DWORD PTR _BlIniFileSize$[ebp]
  001f8	89 55 f4	 mov	 DWORD PTR _Size$[ebp], edx
$LN10@BlSingular:

; 232  :         }
; 233  : 
; 234  :         DistroFile->Size = Size;

  001fb	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  001fe	8b 4d f4	 mov	 ecx, DWORD PTR _Size$[ebp]
  00201	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 235  : 
; 236  :         BlDistro.NumberOfFiles += 1;

  00204	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  0020a	83 c2 01	 add	 edx, 1
  0020d	89 15 00 00 00
	00		 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A, edx

; 237  :         BlDistro.TotalSize += Size;

  00213	a1 04 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00218	03 45 f4	 add	 eax, DWORD PTR _Size$[ebp]
  0021b	a3 04 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4, eax

; 238  : 
; 239  :         BlRtlInsertTailList(&BlDistro.FileList, &DistroFile->Entry);

  00220	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  00223	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  00228	e8 00 00 00 00	 call	 ?BlRtlInsertTailList@@YIXPAU_LIST_ENTRY@@0@Z ; BlRtlInsertTailList

; 240  :     }

  0022d	e9 62 fe ff ff	 jmp	 $LN26@BlSingular
$LN25@BlSingular:

; 241  : 
; 242  :     //
; 243  :     // Read distro files.
; 244  :     //
; 245  : 
; 246  :     BlDistro.Data = (PVOID) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(BlDistro.TotalSize), BL_MM_PHYSICAL_REGION_DISTRO);

  00232	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00238	81 c1 ff 0f 00
	00		 add	 ecx, 4095		; 00000fffH
  0023e	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  00244	ba 05 00 00 00	 mov	 edx, 5
  00249	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0024e	a3 10 00 00 00	 mov	 DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16, eax

; 247  : 
; 248  : #if DISTRO_VERBOSE
; 249  : 
; 250  :     BlKdPrintf("DISTRO: Reading distro (%u files , %u bytes).\n",
; 251  :                BlDistro.NumberOfFiles,
; 252  :                BlDistro.TotalSize);

  00253	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  00259	51		 push	 ecx
  0025a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  00260	52		 push	 edx
  00261	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@BKIKLPP@DISTRO?3?5Reading?5distro?5?$CI?$CFu?5files@
  00266	e8 00 00 00 00	 call	 ?BlKdPrintf@@YAEPBDZZ	; BlKdPrintf
  0026b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 253  : 
; 254  : #endif
; 255  : 
; 256  :     FilesRead = 0;

  0026e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _FilesRead$[ebp], 0

; 257  :     BytesRead = 0;

  00275	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _BytesRead$[ebp], 0

; 258  : 
; 259  :     Next = (PCHAR) BlDistro.Data;

  0027c	a1 10 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  00281	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 260  :     Head = &BlDistro.FileList;

  00284	c7 45 e8 08 00
	00 00		 mov	 DWORD PTR _Head$[ebp], OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8

; 261  : 
; 262  :     for (Entry = Head->Flink; Entry != Head; Entry = Entry->Flink) {

  0028b	8b 4d e8	 mov	 ecx, DWORD PTR _Head$[ebp]
  0028e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00290	89 55 e4	 mov	 DWORD PTR _Entry$[ebp], edx
  00293	eb 08		 jmp	 SHORT $LN9@BlSingular
$LN8@BlSingular:
  00295	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  00298	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029a	89 4d e4	 mov	 DWORD PTR _Entry$[ebp], ecx
$LN9@BlSingular:
  0029d	8b 55 e4	 mov	 edx, DWORD PTR _Entry$[ebp]
  002a0	3b 55 e8	 cmp	 edx, DWORD PTR _Head$[ebp]
  002a3	0f 84 d6 00 00
	00		 je	 $LN7@BlSingular

; 263  : 
; 264  :         DistroFile = CONTAINING_RECORD(Entry, BL_DISTRO_FILE, Entry);

  002a9	8b 45 e4	 mov	 eax, DWORD PTR _Entry$[ebp]
  002ac	89 45 dc	 mov	 DWORD PTR _DistroFile$[ebp], eax

; 265  : 
; 266  :         DistroFile->Data = Next;

  002af	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  002b2	8b 55 d0	 mov	 edx, DWORD PTR _Next$[ebp]
  002b5	89 91 0c 04 00
	00		 mov	 DWORD PTR [ecx+1036], edx

; 267  : 
; 268  :         BLASSERT(DistroFile->Path[0] == '/');

  002bb	8b 45 dc	 mov	 eax, DWORD PTR _DistroFile$[ebp]
  002be	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  002c2	83 f9 2f	 cmp	 ecx, 47			; 0000002fH
  002c5	74 0f		 je	 SHORT $LN6@BlSingular
  002c7	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  002cc	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  002d1	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlSingular:

; 269  : 
; 270  : #if DISTRO_VERBOSE
; 271  : 
; 272  :         BlKdPrintf("DISTRO: %s [%u bytes]\n",
; 273  :                    DistroFile->Path,
; 274  :                    DistroFile->Size);

  002d6	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  002d9	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002dc	50		 push	 eax
  002dd	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  002e0	83 c1 0c	 add	 ecx, 12			; 0000000cH
  002e3	51		 push	 ecx
  002e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@LCBGKGKK@DISTRO?3?5?$CFs?5?$FL?$CFu?5bytes?$FN?6?$AA@
  002e9	e8 00 00 00 00	 call	 ?BlKdPrintf@@YAEPBDZZ	; BlKdPrintf
  002ee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 275  : 
; 276  : #endif
; 277  : 
; 278  :         if (BlFsReadFile(&DistroFile->Path[1], DistroFile->Data, DistroFile->Size) == FALSE) {

  002f1	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  002f4	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  002f7	50		 push	 eax
  002f8	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  002fb	83 c1 0d	 add	 ecx, 13			; 0000000dH
  002fe	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  00301	8b 92 0c 04 00
	00		 mov	 edx, DWORD PTR [edx+1036]
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA ; BlFsReadFile
  0030d	0f b6 c0	 movzx	 eax, al
  00310	85 c0		 test	 eax, eax
  00312	75 23		 jne	 SHORT $LN5@BlSingular

; 279  : 
; 280  :             BlRtlPrintf("\n"
; 281  :                         "BL: Error reading %s!\n",
; 282  :                         DistroFile->Path);

  00314	8b 4d dc	 mov	 ecx, DWORD PTR _DistroFile$[ebp]
  00317	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0031a	51		 push	 ecx
  0031b	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@KAGFGJKE@?6BL?3?5Error?5reading?5?$CFs?$CB?6?$AA@
  00320	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00325	83 c4 08	 add	 esp, 8

; 283  : 
; 284  :             BlRtlHalt();

  00328	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  0032d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00332	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlSingular:

; 285  :         }
; 286  : 
; 287  :         Next += DistroFile->Size;

  00337	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  0033a	8b 45 d0	 mov	 eax, DWORD PTR _Next$[ebp]
  0033d	03 42 08	 add	 eax, DWORD PTR [edx+8]
  00340	89 45 d0	 mov	 DWORD PTR _Next$[ebp], eax

; 288  : 
; 289  :         FilesRead += 1;

  00343	8b 4d f8	 mov	 ecx, DWORD PTR _FilesRead$[ebp]
  00346	83 c1 01	 add	 ecx, 1
  00349	89 4d f8	 mov	 DWORD PTR _FilesRead$[ebp], ecx

; 290  :         BytesRead += DistroFile->Size;

  0034c	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  0034f	8b 45 d8	 mov	 eax, DWORD PTR _BytesRead$[ebp]
  00352	03 42 08	 add	 eax, DWORD PTR [edx+8]
  00355	89 45 d8	 mov	 DWORD PTR _BytesRead$[ebp], eax

; 291  : 
; 292  :         BlVideoPrintf("\rReading distro files ... %u / %u [%u / %u]",
; 293  :                       FilesRead,
; 294  :                       BlDistro.NumberOfFiles,
; 295  :                       BytesRead,
; 296  :                       BlDistro.TotalSize);

  00358	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  0035e	51		 push	 ecx
  0035f	8b 55 d8	 mov	 edx, DWORD PTR _BytesRead$[ebp]
  00362	52		 push	 edx
  00363	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  00368	50		 push	 eax
  00369	8b 4d f8	 mov	 ecx, DWORD PTR _FilesRead$[ebp]
  0036c	51		 push	 ecx
  0036d	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@LMNFPKBE@?$ANReading?5distro?5files?5?4?4?4?5?$CFu?5?1?5?$CF@
  00372	e8 00 00 00 00	 call	 ?BlVideoPrintf@@YAEPBDZZ ; BlVideoPrintf
  00377	83 c4 14	 add	 esp, 20			; 00000014H

; 297  : 
; 298  :     }

  0037a	e9 16 ff ff ff	 jmp	 $LN8@BlSingular
$LN7@BlSingular:

; 299  : 
; 300  :     BlVideoPrintf("\n");

  0037f	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6?$AA@
  00384	e8 00 00 00 00	 call	 ?BlVideoPrintf@@YAEPBDZZ ; BlVideoPrintf
  00389	83 c4 04	 add	 esp, 4

; 301  : 
; 302  :     //
; 303  :     // If this is a network boot, then signal the PXE server to exit.
; 304  :     // This is the only mechanism to notify the server that the boot succeeded.
; 305  :     //
; 306  : 
; 307  :     if (BlGetBeb()->BootType == BL_PXE_BOOT) {

  0038c	e8 00 00 00 00	 call	 ?BlGetBeb@@YIPAU_BEB@@XZ ; BlGetBeb
  00391	83 38 04	 cmp	 DWORD PTR [eax], 4
  00394	75 0e		 jne	 SHORT $LN4@BlSingular

; 308  : 
; 309  :         BlFsGetFileSize("end.:", &DummySize);

  00396	8d 55 d4	 lea	 edx, DWORD PTR _DummySize$[ebp]
  00399	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_05JDDINMFO@end?4?3?$AA@
  0039e	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA ; BlFsGetFileSize
$LN4@BlSingular:

; 310  :     }
; 311  : 
; 312  :     //
; 313  :     // Switch distro range to read-only.
; 314  :     //
; 315  : 
; 316  :     BlMmMapVirtualRange(BlDistro.Data,
; 317  :                         BlDistro.Data,
; 318  :                         BlDistro.TotalSize,
; 319  :                         FALSE,
; 320  :                         TRUE,
; 321  :                         FALSE);

  003a4	6a 00		 push	 0
  003a6	6a 01		 push	 1
  003a8	6a 00		 push	 0
  003aa	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+4
  003b0	52		 push	 edx
  003b1	8b 15 10 00 00
	00		 mov	 edx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  003b7	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+16
  003bd	e8 00 00 00 00	 call	 ?BlMmMapVirtualRange@@YIXPAX0KEEE@Z ; BlMmMapVirtualRange

; 322  : 
; 323  :     //
; 324  :     // Build file image table.
; 325  :     //
; 326  : 
; 327  :     BlSingularityFileImageTable = (Struct_Microsoft_Singularity_Io_FileImage *) BlPoolAllocateBlock(BlDistro.NumberOfFiles * sizeof(Struct_Microsoft_Singularity_Io_FileImage));

  003c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A
  003c8	c1 e1 03	 shl	 ecx, 3
  003cb	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  003d0	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A, eax ; BlSingularityFileImageTable

; 328  : 
; 329  :     for (Entry = Head->Flink; Entry != Head; Entry = Entry->Flink) {

  003d5	8b 45 e8	 mov	 eax, DWORD PTR _Head$[ebp]
  003d8	8b 08		 mov	 ecx, DWORD PTR [eax]
  003da	89 4d e4	 mov	 DWORD PTR _Entry$[ebp], ecx
  003dd	eb 08		 jmp	 SHORT $LN3@BlSingular
$LN2@BlSingular:
  003df	8b 55 e4	 mov	 edx, DWORD PTR _Entry$[ebp]
  003e2	8b 02		 mov	 eax, DWORD PTR [edx]
  003e4	89 45 e4	 mov	 DWORD PTR _Entry$[ebp], eax
$LN3@BlSingular:
  003e7	8b 4d e4	 mov	 ecx, DWORD PTR _Entry$[ebp]
  003ea	3b 4d e8	 cmp	 ecx, DWORD PTR _Head$[ebp]
  003ed	74 41		 je	 SHORT $LN29@BlSingular

; 330  : 
; 331  :         DistroFile = CONTAINING_RECORD(Entry, BL_DISTRO_FILE, Entry);

  003ef	8b 55 e4	 mov	 edx, DWORD PTR _Entry$[ebp]
  003f2	89 55 dc	 mov	 DWORD PTR _DistroFile$[ebp], edx

; 332  : 
; 333  :         BlSingularityFileImageTable[BlSingularityFileImageTableSize].Address = (ULONG_PTR) DistroFile->Data;

  003f5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  003fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  00400	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  00403	8b 92 0c 04 00
	00		 mov	 edx, DWORD PTR [edx+1036]
  00409	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx

; 334  :         BlSingularityFileImageTable[BlSingularityFileImageTableSize].Size = DistroFile->Size;

  0040c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  00411	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  00417	8b 55 dc	 mov	 edx, DWORD PTR _DistroFile$[ebp]
  0041a	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0041d	89 54 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], edx

; 335  :         BlSingularityFileImageTableSize += 1;

  00421	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  00426	83 c0 01	 add	 eax, 1
  00429	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularityFileImageTableSize@@3KA, eax ; BlSingularityFileImageTableSize

; 336  :     }

  0042e	eb af		 jmp	 SHORT $LN2@BlSingular
$LN29@BlSingular:

; 337  : 
; 338  :     return;
; 339  : }

  00430	8b e5		 mov	 esp, ebp
  00432	5d		 pop	 ebp
  00433	c3		 ret	 0
?BlSingularityLoadDistro@@YIXXZ ENDP			; BlSingularityLoadDistro
; Function compile flags: /Odtp
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\bl.h
_TEXT	ENDS
;	COMDAT ?BlGetBeb@@YIPAU_BEB@@XZ
_TEXT	SEGMENT
?BlGetBeb@@YIPAU_BEB@@XZ PROC				; BlGetBeb, COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     return ((PBEB) BEB_BASE);

  00003	b8 00 f0 02 00	 mov	 eax, 192512		; 0002f000H

; 357  : }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?BlGetBeb@@YIPAU_BEB@@XZ ENDP				; BlGetBeb
_TEXT	ENDS
PUBLIC	?BlSingularityLoadKernelImage@@YIXXZ		; BlSingularityLoadKernelImage
EXTRN	?BlPeLoadImage@@YIXPAX0PAPAX@Z:PROC		; BlPeLoadImage
EXTRN	?BlMmDumpPhysicalRegionList@@YIXXZ:PROC		; BlMmDumpPhysicalRegionList
EXTRN	?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z:PROC ; BlMmAllocateSpecificPhysicalRegion
EXTRN	?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z:PROC	; BlPeGetVirtualRange
EXTRN	?BlRtlIsListEmpty@@YIEPAU_LIST_ENTRY@@@Z:PROC	; BlRtlIsListEmpty
EXTRN	__aullrem:PROC
; Function compile flags: /Odtp
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blsingularity.cpp
;	COMDAT ?BlSingularityLoadKernelImage@@YIXXZ
_TEXT	SEGMENT
tv149 = -8						; size = 8
?BlSingularityLoadKernelImage@@YIXXZ PROC		; BlSingularityLoadKernelImage, COMDAT

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 355  :     BLASSERT(BlRtlIsListEmpty(&BlDistro.FileList) == FALSE);

  00006	b9 08 00 00 00	 mov	 ecx, OFFSET ?BlDistro@@3U_BL_DISTRO@@A+8
  0000b	e8 00 00 00 00	 call	 ?BlRtlIsListEmpty@@YIEPAU_LIST_ENTRY@@@Z ; BlRtlIsListEmpty
  00010	0f b6 c0	 movzx	 eax, al
  00013	85 c0		 test	 eax, eax
  00015	74 0f		 je	 SHORT $LN4@BlSingular@2
  00017	ba 63 01 00 00	 mov	 edx, 355		; 00000163H
  0001c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00021	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN4@BlSingular@2:

; 356  : 
; 357  :     //
; 358  :     // Kernel is the first entry in the distro file list.
; 359  :     //
; 360  : 
; 361  :     BlKernelFile = CONTAINING_RECORD(BlDistro.FileList.Flink,
; 362  :                                      BL_DISTRO_FILE,
; 363  :                                      Entry);

  00026	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?BlDistro@@3U_BL_DISTRO@@A+8
  0002c	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A, ecx ; BlKernelFile

; 364  : 
; 365  :     //
; 366  :     // Get the virtual range for the kernel image.
; 367  :     //
; 368  : 
; 369  :     BlPeGetVirtualRange(BlKernelFile->Data, &BlKernelBase, &BlKernelSize);

  00032	68 00 00 00 00	 push	 OFFSET ?BlKernelSize@@3KA ; BlKernelSize
  00037	ba 00 00 00 00	 mov	 edx, OFFSET ?BlKernelBase@@3PAXA ; BlKernelBase
  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  00041	8b 88 0c 04 00
	00		 mov	 ecx, DWORD PTR [eax+1036]
  00047	e8 00 00 00 00	 call	 ?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z ; BlPeGetVirtualRange

; 370  : 
; 371  :     BLASSERT(((UINT64) BlKernelBase % PAGE_SIZE) == 0);

  0004c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00051	99		 cdq
  00052	6a 00		 push	 0
  00054	68 00 10 00 00	 push	 4096			; 00001000H
  00059	52		 push	 edx
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 __aullrem
  00060	89 45 f8	 mov	 DWORD PTR tv149[ebp], eax
  00063	89 55 fc	 mov	 DWORD PTR tv149[ebp+4], edx
  00066	8b 4d f8	 mov	 ecx, DWORD PTR tv149[ebp]
  00069	0b 4d fc	 or	 ecx, DWORD PTR tv149[ebp+4]
  0006c	74 0f		 je	 SHORT $LN3@BlSingular@2
  0006e	ba 73 01 00 00	 mov	 edx, 371		; 00000173H
  00073	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00078	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN3@BlSingular@2:

; 372  : 
; 373  :     BLASSERT((BlKernelSize % PAGE_SIZE) == 0);

  0007d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  00082	33 d2		 xor	 edx, edx
  00084	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00089	f7 f1		 div	 ecx
  0008b	85 d2		 test	 edx, edx
  0008d	74 0f		 je	 SHORT $LN2@BlSingular@2
  0008f	ba 75 01 00 00	 mov	 edx, 373		; 00000175H
  00094	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00099	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN2@BlSingular@2:

; 374  : 
; 375  :     //
; 376  :     // Allocate a physical region for the kernel image, since pages are identity mapped at boot.
; 377  :     //
; 378  :     // AIFIX: This needs to be be made dynamic!
; 379  :     //
; 380  : 
; 381  :     if (BlMmAllocateSpecificPhysicalRegion((UINT64) BlKernelBase,
; 382  :                                            BlKernelSize,
; 383  :                                            BL_MM_PHYSICAL_REGION_KERNEL_IMAGE) == FALSE) {

  0009e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  000a4	33 c0		 xor	 eax, eax
  000a6	50		 push	 eax
  000a7	52		 push	 edx
  000a8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000ad	99		 cdq
  000ae	52		 push	 edx
  000af	50		 push	 eax
  000b0	b9 06 00 00 00	 mov	 ecx, 6
  000b5	e8 00 00 00 00	 call	 ?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z ; BlMmAllocateSpecificPhysicalRegion
  000ba	0f b6 c8	 movzx	 ecx, al
  000bd	85 c9		 test	 ecx, ecx
  000bf	75 14		 jne	 SHORT $LN1@BlSingular@2

; 384  : 
; 385  :         BlMmDumpPhysicalRegionList();

  000c1	e8 00 00 00 00	 call	 ?BlMmDumpPhysicalRegionList@@YIXXZ ; BlMmDumpPhysicalRegionList

; 386  : 
; 387  :         BlRtlHalt();

  000c6	ba 83 01 00 00	 mov	 edx, 387		; 00000183H
  000cb	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  000d0	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN1@BlSingular@2:

; 388  :     }
; 389  : 
; 390  : #if SINGULARITY_VERBOSE
; 391  : 
; 392  :     BlRtlPrintf("BL: Loading kernel ... [%p ... %p]\n",
; 393  :                 BlKernelBase,
; 394  :                 (ULONG_PTR) BlKernelBase + BlKernelSize - 1);
; 395  : 
; 396  : #endif
; 397  : 
; 398  :     BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  000d5	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  000da	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  000e0	8b 92 0c 04 00
	00		 mov	 edx, DWORD PTR [edx+1036]
  000e6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000ec	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 399  : 
; 400  : }

  000f1	8b e5		 mov	 esp, ebp
  000f3	5d		 pop	 ebp
  000f4	c3		 ret	 0
?BlSingularityLoadKernelImage@@YIXXZ ENDP		; BlSingularityLoadKernelImage
_TEXT	ENDS
PUBLIC	?BlSingularityInitializeProcessor@@YIXK@Z	; BlSingularityInitializeProcessor
EXTRN	?BlMmInitializeSystemSegment@@YIXPAU_SYSTEM_SEGMENT@@KKK@Z:PROC ; BlMmInitializeSystemSegment
EXTRN	?BlMmInitializeDataSegment@@YIXPAU_DATA_SEGMENT@@KK@Z:PROC ; BlMmInitializeDataSegment
EXTRN	?BlMmInitialGdtr@@3U_GDTR@@A:TBYTE		; BlMmInitialGdtr
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
; Function compile flags: /Odtp
;	COMDAT ?BlSingularityInitializeProcessor@@YIXK@Z
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_Processor$ = -4					; size = 4
?BlSingularityInitializeProcessor@@YIXK@Z PROC		; BlSingularityInitializeProcessor, COMDAT
; _Index$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _Index$[ebp], ecx

; 447  :     Class_Microsoft_Singularity_Hal_Cpu *Processor;
; 448  : 
; 449  :     //
; 450  :     // Initialize native processor structure.
; 451  :     //
; 452  : 
; 453  :     Processor = BlProcessor[Index].Cpu;

  00009	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0000c	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00015	8b 54 01 04	 mov	 edx, DWORD PTR [ecx+eax+4]
  00019	89 55 fc	 mov	 DWORD PTR _Processor$[ebp], edx

; 454  :     Processor->Size = sizeof(Class_Microsoft_Singularity_Hal_Cpu);

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  0001f	c7 00 89 00 00
	00		 mov	 DWORD PTR [eax], 137	; 00000089H

; 455  :     Processor->Id = Index;

  00025	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00028	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  0002b	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 456  : #if 0
; 457  :     Processor->ApicId  = Index;
; 458  : #endif
; 459  :     Processor->KernelStackLimit = (ULONG_PTR) BlProcessor[Index].KernelStack;

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00031	6b c0 1c	 imul	 eax, 28			; 0000001cH
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00037	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0003d	8b 44 02 08	 mov	 eax, DWORD PTR [edx+eax+8]
  00041	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 460  :     //    Processor->KernelStackBegin = Processor->KernelStackLimit + SINGULARITY_KERNEL_STACK_SIZE;
; 461  :     Processor->KernelStackBegin = Processor->KernelStackLimit + BlProcessor[Index].KernelStackSize;

  00044	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00047	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0004a	8b 55 fc	 mov	 edx, DWORD PTR _Processor$[ebp]
  0004d	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00050	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00056	03 44 0a 0c	 add	 eax, DWORD PTR [edx+ecx+12]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  0005d	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 462  :     Processor->CpuRecordPage = (ULONG_PTR) BlProcessor[Index].BasePage;

  00060	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  00063	6b d2 1c	 imul	 edx, 28			; 0000001cH
  00066	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0006f	8b 54 11 14	 mov	 edx, DWORD PTR [ecx+edx+20]
  00073	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 463  : 
; 464  :     //
; 465  :     // Initialize task structure.
; 466  :     //
; 467  : 
; 468  :     BlProcessor[Index].TaskPage->io_bitmap_offset = sizeof(BL_TASK_SEGMENT);

  00076	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  00079	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0007c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00082	8b 54 01 18	 mov	 edx, DWORD PTR [ecx+eax+24]
  00086	66 c7 42 66 68
	00		 mov	 WORD PTR [edx+102], 104	; 00000068H

; 469  : 
; 470  :     //
; 471  :     // Initialize segments.
; 472  :     //
; 473  : 
; 474  :     BlRtlZeroMemory(&Processor->segments, sizeof(Processor->segments));

  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  0008f	83 c1 18	 add	 ecx, 24			; 00000018H
  00092	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00097	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 475  : 
; 476  :     Processor->segments.gdtPtr.addr = (ULONG_PTR) &Processor->segments.gdt;

  0009c	8b 45 fc	 mov	 eax, DWORD PTR _Processor$[ebp]
  0009f	83 c0 18	 add	 eax, 24			; 00000018H
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000a5	89 81 84 00 00
	00		 mov	 DWORD PTR [ecx+132], eax

; 477  :     Processor->segments.gdtPtr.limit = sizeof(Processor->segments.gdt) - 1;

  000ab	8b 55 fc	 mov	 edx, DWORD PTR _Processor$[ebp]
  000ae	66 c7 82 82 00
	00 00 67 00	 mov	 WORD PTR [edx+130], 103	; 00000067H

; 478  : 
; 479  :     BlRtlCopyMemory(&Processor->segments.gdt.pc,
; 480  :                     (PVOID) (BlMmInitialGdtr.Base + PM_CODE_SELECTOR),
; 481  :                     sizeof(CODE_SEGMENT));

  000b7	6a 08		 push	 8
  000b9	8b 15 02 00 00
	00		 mov	 edx, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+2
  000bf	83 c2 20	 add	 edx, 32			; 00000020H
  000c2	a1 06 00 00 00	 mov	 eax, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+6
  000c7	83 d0 00	 adc	 eax, 0
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000cd	83 c1 38	 add	 ecx, 56			; 00000038H
  000d0	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 482  : 
; 483  :     BlRtlCopyMemory(&Processor->segments.gdt.pd,
; 484  :                     (PVOID) (BlMmInitialGdtr.Base + PM_DATA_SELECTOR),
; 485  :                     sizeof(CODE_SEGMENT));

  000d5	6a 08		 push	 8
  000d7	8b 15 02 00 00
	00		 mov	 edx, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+2
  000dd	83 c2 28	 add	 edx, 40			; 00000028H
  000e0	8b 0d 06 00 00
	00		 mov	 ecx, DWORD PTR ?BlMmInitialGdtr@@3U_GDTR@@A+6
  000e6	83 d1 00	 adc	 ecx, 0
  000e9	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  000ec	83 c1 40	 add	 ecx, 64			; 00000040H
  000ef	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 486  : 
; 487  : #if defined(BOOT_X64)
; 488  :     BlRtlCopyMemory(&Processor->segments.gdt.lc,
; 489  :                     (PVOID) (BlMmInitialGdtr.Base + LM_CODE_SELECTOR),
; 490  :                     sizeof(CODE_SEGMENT));
; 491  : 
; 492  :     BlRtlCopyMemory(&Processor->segments.gdt.ld,
; 493  :                     (PVOID) (BlMmInitialGdtr.Base + LM_DATA_SELECTOR),
; 494  :                     sizeof(CODE_SEGMENT));
; 495  : #endif
; 496  : 
; 497  :     BlMmInitializeDataSegment((PDATA_SEGMENT) &Processor->segments.gdt.pp,
; 498  :                               (UINT32) (ULONG_PTR) BlProcessor[Index].ContextPage,
; 499  :                               PAGE_SIZE - 1);

  000f4	68 ff 0f 00 00	 push	 4095			; 00000fffH
  000f9	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  000fc	6b d2 1c	 imul	 edx, 28			; 0000001cH
  000ff	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00102	83 c1 68	 add	 ecx, 104		; 00000068H
  00105	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0010a	8b 54 10 10	 mov	 edx, DWORD PTR [eax+edx+16]
  0010e	e8 00 00 00 00	 call	 ?BlMmInitializeDataSegment@@YIXPAU_DATA_SEGMENT@@KK@Z ; BlMmInitializeDataSegment

; 500  : 
; 501  :     BlMmInitializeSystemSegment((PSYSTEM_SEGMENT) &Processor->segments.gdt.tss,
; 502  :                                 SSDT_AVAILABLE_TSS,
; 503  :                                 (ULONG_PTR) BlProcessor[Index].TaskPage,
; 504  :                                 sizeof(BL_TASK_SEGMENT) - 1);

  00113	6a 67		 push	 103			; 00000067H
  00115	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00118	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  0011b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00121	8b 44 0a 18	 mov	 eax, DWORD PTR [edx+ecx+24]
  00125	50		 push	 eax
  00126	8b 4d fc	 mov	 ecx, DWORD PTR _Processor$[ebp]
  00129	83 c1 78	 add	 ecx, 120		; 00000078H
  0012c	ba 09 00 00 00	 mov	 edx, 9
  00131	e8 00 00 00 00	 call	 ?BlMmInitializeSystemSegment@@YIXPAU_SYSTEM_SEGMENT@@KKK@Z ; BlMmInitializeSystemSegment

; 505  : 
; 506  :     return;
; 507  : }

  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?BlSingularityInitializeProcessor@@YIXK@Z ENDP		; BlSingularityInitializeProcessor
_TEXT	ENDS
PUBLIC	??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@ ; `string'
PUBLIC	?BlSingularityCallKernel@@YIKK@Z		; BlSingularityCallKernel
EXTRN	?BlVideoInitialize@@YIXXZ:PROC			; BlVideoInitialize
EXTRN	?BlMmSetCr3@@YIXK@Z:PROC			; BlMmSetCr3
EXTRN	?BlMmBootCr3@@3KA:DWORD				; BlMmBootCr3
EXTRN	?BlMmSetFs@@YIXG@Z:PROC				; BlMmSetFs
EXTRN	?BlMmSetGdtr@@YIXPAU_GDTR@@@Z:PROC		; BlMmSetGdtr
;	COMDAT ??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@ DB 'BL:   entry= %p', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@
CONST	SEGMENT
??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@ DB 'B'
	DB	'L:  kernel=[%p ... %p]', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlSingularityCallKernel@@YIKK@Z
_TEXT	SEGMENT
_Index$ = -8						; size = 4
_ExitCode$ = -4						; size = 4
?BlSingularityCallKernel@@YIKK@Z PROC			; BlSingularityCallKernel, COMDAT
; _Index$ = ecx

; 532  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _Index$[ebp], ecx

; 533  :     UINT32 ExitCode;
; 534  : 
; 535  : #if SINGULARITY_VERBOSE
; 536  : 
; 537  : 
; 538  :     BlRtlPrintf("\fBL: Processor[%d]: Starting Singularity ...\n",
; 539  :                 Index
; 540  :                 );
; 541  : 
; 542  :     BlRtlPrintf("BL:   Cpu  = %p\n",
; 543  :                 BlProcessor[Index].Cpu
; 544  :                 );
; 545  : 
; 546  : 
; 547  :     BlRtlPrintf("BL:   GDT  =[%p...%p]\n",
; 548  :                 BlProcessor[Index].Cpu->segments.gdtPtr.addr,
; 549  :                 BlProcessor[Index].Cpu->segments.gdtPtr.addr + BlProcessor[Index].Cpu->segments.gdtPtr.limit
; 550  :                 );
; 551  : 
; 552  : 
; 553  :     BlRtlPrintf("BL:   stack=[%p...%p]\n",
; 554  :                 BlProcessor[Index].Cpu->KernelStackLimit,
; 555  :                 BlProcessor[Index].Cpu->KernelStackBegin
; 556  :                 );
; 557  : 
; 558  : #endif
; 559  : 
; 560  :     BlMmSetGdtr((PGDTR) &BlProcessor[Index].Cpu->segments.gdtPtr.limit);

  00009	8b 45 f8	 mov	 eax, DWORD PTR _Index$[ebp]
  0000c	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00015	8b 4c 01 04	 mov	 ecx, DWORD PTR [ecx+eax+4]
  00019	81 c1 82 00 00
	00		 add	 ecx, 130		; 00000082H
  0001f	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 561  : 
; 562  : #if defined(BOOT_X86)
; 563  : 
; 564  :     BlMmSetFs(PROCESSOR_SELECTOR);

  00024	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00029	e8 00 00 00 00	 call	 ?BlMmSetFs@@YIXG@Z	; BlMmSetFs

; 565  : 
; 566  : #elif defined(BOOT_X64)
; 567  : 
; 568  :     BlMmSetGs(PROCESSOR_SELECTOR);
; 569  : 
; 570  : #endif
; 571  : 
; 572  :     BlMmSetCr3(BlMmBootCr3);

  0002e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlMmBootCr3@@3KA ; BlMmBootCr3
  00034	e8 00 00 00 00	 call	 ?BlMmSetCr3@@YIXK@Z	; BlMmSetCr3

; 573  : 
; 574  :     BlRtlPrintf("BL:  kernel=[%p ... %p]\n",
; 575  :                 BlKernelBase, (ULONG_PTR) BlKernelBase + BlKernelSize - 1);

  00039	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00044	8d 4c 10 ff	 lea	 ecx, DWORD PTR [eax+edx-1]
  00048	51		 push	 ecx
  00049	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0004f	52		 push	 edx
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KCGLFDHD@BL?3?5?5kernel?$DN?$FL?$CFp?5?4?4?4?5?$CFp?$FN?6?$AA@
  00055	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 576  :     BlRtlPrintf("BL:   entry= %p\n", BlKernelEntryPoint);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  00062	50		 push	 eax
  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GPAFJBIF@BL?3?5?5?5entry?$DN?5?$CFp?6?$AA@
  00068	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0006d	83 c4 08	 add	 esp, 8

; 577  : 
; 578  : 
; 579  :     ExitCode = BlKernelEntryPoint(BlPlatform, BlProcessor[Index].Cpu);

  00070	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00073	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00076	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0007c	8b 54 0a 04	 mov	 edx, DWORD PTR [edx+ecx+4]
  00080	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  0008c	89 45 fc	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 580  : 
; 581  :     BlMmSetGdtr(&BlMmInitialGdtr);

  0008f	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlMmInitialGdtr@@3U_GDTR@@A ; BlMmInitialGdtr
  00094	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 582  : 
; 583  :     BlVideoInitialize();

  00099	e8 00 00 00 00	 call	 ?BlVideoInitialize@@YIXXZ ; BlVideoInitialize

; 584  : 
; 585  :     return ExitCode;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _ExitCode$[ebp]

; 586  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
?BlSingularityCallKernel@@YIKK@Z ENDP			; BlSingularityCallKernel
_TEXT	ENDS
PUBLIC	??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@ ; `string'
PUBLIC	?BlSingularityEnterKernel@@YIXXZ		; BlSingularityEnterKernel
;	COMDAT ??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@
CONST	SEGMENT
??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@ DB 'BL: AP ret'
	DB	'urned from kernel call!', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlSingularityEnterKernel@@YIXXZ
_TEXT	SEGMENT
_LocalVariable$ = -12					; size = 4
_ExitCode$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlSingularityEnterKernel@@YIXXZ PROC			; BlSingularityEnterKernel, COMDAT

; 601  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 602  :     UINT32 ExitCode;
; 603  :     PVOID LocalVariable;
; 604  :     UINT32 Index;
; 605  : 
; 606  :     Index = BlSingularityProcessorToStart;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityProcessorToStart@@3KA ; BlSingularityProcessorToStart
  0000b	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax

; 607  : 
; 608  :     BLASSERT(((ULONG_PTR) &LocalVariable) >= BlProcessor[Index].Cpu->KernelStackLimit);

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  00011	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00014	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0001a	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0001e	8d 4d f4	 lea	 ecx, DWORD PTR _LocalVariable$[ebp]
  00021	3b 48 0c	 cmp	 ecx, DWORD PTR [eax+12]
  00024	73 0f		 jae	 SHORT $LN6@BlSingular@3
  00026	ba 60 02 00 00	 mov	 edx, 608		; 00000260H
  0002b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00030	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlSingular@3:

; 609  : 
; 610  :     BLASSERT(((ULONG_PTR) &LocalVariable) < BlProcessor[Index].Cpu->KernelStackBegin);

  00035	8b 55 fc	 mov	 edx, DWORD PTR _Index$[ebp]
  00038	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0003b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00040	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00044	8d 55 f4	 lea	 edx, DWORD PTR _LocalVariable$[ebp]
  00047	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0004a	72 0f		 jb	 SHORT $LN5@BlSingular@3
  0004c	ba 62 02 00 00	 mov	 edx, 610		; 00000262H
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00056	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN5@BlSingular@3:

; 611  : 
; 612  :     //
; 613  :     // The bootstrap processor runs in a loop calling kernel entry point and performing warm boot
; 614  :     // when the kernel returns. The application processors do not return from the kernel call and are
; 615  :     // reinitialized with SIPIs by the kernel after a warm boot.
; 616  :     //
; 617  : 
; 618  :     if (Index == 0) {

  0005b	83 7d fc 00	 cmp	 DWORD PTR _Index$[ebp], 0
  0005f	75 54		 jne	 SHORT $LN4@BlSingular@3
$LN3@BlSingular@3:

; 619  : 
; 620  :         for (;;) {
; 621  :             BlMmDumpPhysicalRegionList();

  00061	e8 00 00 00 00	 call	 ?BlMmDumpPhysicalRegionList@@YIXXZ ; BlMmDumpPhysicalRegionList

; 622  :             ExitCode = BlSingularityCallKernel(Index);

  00066	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  00069	e8 00 00 00 00	 call	 ?BlSingularityCallKernel@@YIKK@Z ; BlSingularityCallKernel
  0006e	89 45 f8	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 623  : 
; 624  : #if SINGULARITY_VERBOSE
; 625  : 
; 626  :             BlRtlPrintf("BL: Processor[%02x]: Kernel exited with 0x%08x.\n",
; 627  :                         Index,
; 628  :                         ExitCode);
; 629  : 
; 630  : #endif
; 631  : 
; 632  :             BlPlatform->BootCount += 1;

  00071	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00076	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00079	83 c1 01	 add	 ecx, 1
  0007c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00082	89 4a 24	 mov	 DWORD PTR [edx+36], ecx

; 633  : 
; 634  :             BlRtlZeroMemory(BlKernelBase, BlKernelSize);

  00085	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0008b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  00091	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 635  : 
; 636  :             BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  00096	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  0009b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  000a0	8b 90 0c 04 00
	00		 mov	 edx, DWORD PTR [eax+1036]
  000a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000ac	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 637  :         }

  000b1	eb ae		 jmp	 SHORT $LN3@BlSingular@3

; 638  : 
; 639  :     }
; 640  :     else {

  000b3	eb 27		 jmp	 SHORT $LN7@BlSingular@3
$LN4@BlSingular@3:

; 641  : 
; 642  :         ExitCode = BlSingularityCallKernel(Index);

  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  000b8	e8 00 00 00 00	 call	 ?BlSingularityCallKernel@@YIKK@Z ; BlSingularityCallKernel
  000bd	89 45 f8	 mov	 DWORD PTR _ExitCode$[ebp], eax

; 643  : 
; 644  :         BlRtlPrintf("BL: AP returned from kernel call!\n");

  000c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@DEMCBMIL@BL?3?5AP?5returned?5from?5kernel?5call@
  000c5	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000ca	83 c4 04	 add	 esp, 4

; 645  : 
; 646  :         BlRtlHalt();

  000cd	ba 86 02 00 00	 mov	 edx, 646		; 00000286H
  000d2	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  000d7	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN7@BlSingular@3:

; 647  :     }
; 648  : 
; 649  :     return;
; 650  : }

  000dc	8b e5		 mov	 esp, ebp
  000de	5d		 pop	 ebp
  000df	c3		 ret	 0
?BlSingularityEnterKernel@@YIXXZ ENDP			; BlSingularityEnterKernel
_TEXT	ENDS
PUBLIC	??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@ ; `string'
PUBLIC	??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@ ; `string'
PUBLIC	??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@ ; `string'
PUBLIC	?BlSingularityExit@@YIXXZ			; BlSingularityExit
EXTRN	?BlMmSwitchStack@@YIXPAX0@Z:PROC		; BlMmSwitchStack
EXTRN	?BlRtlResetSystem@@YIXXZ:PROC			; BlRtlResetSystem
EXTRN	?BlRtlShutdownSystem@@YIXXZ:PROC		; BlRtlShutdownSystem
;	COMDAT ??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@
CONST	SEGMENT
??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@ DB 'BL: Unre'
	DB	'cognized kill action 0x%08x!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@ DB 'BL: Ker'
	DB	'nel requested warmboot.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@
CONST	SEGMENT
??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@ DB 'BL: Kernel '
	DB	'requested halt.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@
CONST	SEGMENT
??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@ DB 'BL: Kern'
	DB	'el requested restart.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@
CONST	SEGMENT
??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@ DB 'BL: Ker'
	DB	'nel requested shutdown.', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlSingularityExit@@YIXXZ
_TEXT	SEGMENT
tv66 = -4						; size = 4
?BlSingularityExit@@YIXXZ PROC				; BlSingularityExit, COMDAT

; 665  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 666  :     BlMmSetGdtr(&BlMmInitialGdtr);

  00004	b9 00 00 00 00	 mov	 ecx, OFFSET ?BlMmInitialGdtr@@3U_GDTR@@A ; BlMmInitialGdtr
  00009	e8 00 00 00 00	 call	 ?BlMmSetGdtr@@YIXPAU_GDTR@@@Z ; BlMmSetGdtr

; 667  : 
; 668  :     BlVideoInitialize();

  0000e	e8 00 00 00 00	 call	 ?BlVideoInitialize@@YIXXZ ; BlVideoInitialize

; 669  : 
; 670  :     switch (BlPlatform->KillAction) {

  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00018	8b 88 bc 00 00
	00		 mov	 ecx, DWORD PTR [eax+188]
  0001e	89 4d fc	 mov	 DWORD PTR tv66[ebp], ecx
  00021	8b 55 fc	 mov	 edx, DWORD PTR tv66[ebp]
  00024	81 ea fc 1f 00
	00		 sub	 edx, 8188		; 00001ffcH
  0002a	89 55 fc	 mov	 DWORD PTR tv66[ebp], edx
  0002d	83 7d fc 03	 cmp	 DWORD PTR tv66[ebp], 3
  00031	0f 87 c9 00 00
	00		 ja	 $LN1@BlSingular@4
  00037	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  0003a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN10@BlSingular@4[eax*4]
$LN5@BlSingular@4:

; 671  : 
; 672  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_SHUTDOWN: {
; 673  : 
; 674  :             BlRtlPrintf("BL: Kernel requested shutdown.\n");

  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BLPEJGIE@BL?3?5Kernel?5requested?5shutdown?4?6?$AA@
  00046	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0004b	83 c4 04	 add	 esp, 4

; 675  : 
; 676  :             BlRtlShutdownSystem();

  0004e	e8 00 00 00 00	 call	 ?BlRtlShutdownSystem@@YIXXZ ; BlRtlShutdownSystem

; 677  : 
; 678  :             break;

  00053	e9 d1 00 00 00	 jmp	 $LN8@BlSingular@4
$LN4@BlSingular@4:

; 679  :         }
; 680  : 
; 681  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_RESTART: {
; 682  : 
; 683  :             BlRtlPrintf("BL: Kernel requested restart.\n");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JGHOJCKN@BL?3?5Kernel?5requested?5restart?4?6?$AA@
  0005d	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00062	83 c4 04	 add	 esp, 4

; 684  : 
; 685  :             BlRtlResetSystem();

  00065	e8 00 00 00 00	 call	 ?BlRtlResetSystem@@YIXXZ ; BlRtlResetSystem

; 686  : 
; 687  :             break;

  0006a	e9 ba 00 00 00	 jmp	 $LN8@BlSingular@4
$LN3@BlSingular@4:

; 688  :         }
; 689  : 
; 690  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_HALT: {
; 691  : 
; 692  :             BlRtlPrintf("BL: Kernel requested halt.\n");

  0006f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LKIONBKI@BL?3?5Kernel?5requested?5halt?4?6?$AA@
  00074	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00079	83 c4 04	 add	 esp, 4

; 693  : 
; 694  :             BlRtlHalt();

  0007c	ba b6 02 00 00	 mov	 edx, 694		; 000002b6H
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00086	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal

; 695  : 
; 696  :             break;

  0008b	e9 99 00 00 00	 jmp	 $LN8@BlSingular@4
$LN2@BlSingular@4:

; 697  :         }
; 698  : 
; 699  :         case Class_Microsoft_Singularity_Hal_Platform_EXIT_AND_WARMBOOT: {
; 700  : 
; 701  :             BlRtlPrintf("BL: Kernel requested warmboot.\n");

  00090	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@FMEJNHIH@BL?3?5Kernel?5requested?5warmboot?4?6?$AA@
  00095	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0009a	83 c4 04	 add	 esp, 4

; 702  : 
; 703  :             BlPlatform->BootCount += 1;

  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000a3	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  000a6	83 c2 01	 add	 edx, 1
  000a9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000ae	89 50 24	 mov	 DWORD PTR [eax+36], edx

; 704  : 
; 705  :             BlRtlZeroMemory(BlKernelBase, BlKernelSize);

  000b1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000bd	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 706  : 
; 707  :             BlPeLoadImage(BlKernelBase, BlKernelFile->Data, (PVOID *) &BlKernelEntryPoint);

  000c2	68 00 00 00 00	 push	 OFFSET ?BlKernelEntryPoint@@3P6IKPAUClass_Microsoft_Singularity_Hal_Platform@@PAUClass_Microsoft_Singularity_Hal_Cpu@@@ZA ; BlKernelEntryPoint
  000c7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelFile@@3PAU_BL_DISTRO_FILE@@A ; BlKernelFile
  000cd	8b 91 0c 04 00
	00		 mov	 edx, DWORD PTR [ecx+1036]
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  000d9	e8 00 00 00 00	 call	 ?BlPeLoadImage@@YIXPAX0PAPAX@Z ; BlPeLoadImage

; 708  : 
; 709  :             BlSingularityProcessorToStart = 0;

  000de	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, 0 ; BlSingularityProcessorToStart

; 710  : 
; 711  :             BlMmSwitchStack((PVOID) BlProcessor[0].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  000e8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  000ee	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f1	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  000f6	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000f9	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 712  : 
; 713  :             break;

  000fe	eb 29		 jmp	 SHORT $LN8@BlSingular@4
$LN1@BlSingular@4:

; 714  :         }
; 715  : 
; 716  :         default: {
; 717  : 
; 718  :             BlRtlPrintf("BL: Unrecognized kill action 0x%08x!\n", BlPlatform->KillAction);

  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00106	8b 91 bc 00 00
	00		 mov	 edx, DWORD PTR [ecx+188]
  0010c	52		 push	 edx
  0010d	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@NEIOGAMI@BL?3?5Unrecognized?5kill?5action?50x?$CF@
  00112	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00117	83 c4 08	 add	 esp, 8

; 719  : 
; 720  :             BlRtlHalt();

  0011a	ba d0 02 00 00	 mov	 edx, 720		; 000002d0H
  0011f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00124	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN8@BlSingular@4:

; 721  :         }
; 722  :     }
; 723  : }

  00129	8b e5		 mov	 esp, ebp
  0012b	5d		 pop	 ebp
  0012c	c3		 ret	 0
  0012d	8d 49 00	 npad	 3
$LN10@BlSingular@4:
  00130	00 00 00 00	 DD	 $LN3@BlSingular@4
  00134	00 00 00 00	 DD	 $LN2@BlSingular@4
  00138	00 00 00 00	 DD	 $LN5@BlSingular@4
  0013c	00 00 00 00	 DD	 $LN4@BlSingular@4
?BlSingularityExit@@YIXXZ ENDP				; BlSingularityExit
_TEXT	ENDS
PUBLIC	?IsApicPresent@@YIIXZ				; IsApicPresent
EXTRN	?BlGetCpuidEdx@@YIKK@Z:PROC			; BlGetCpuidEdx
; Function compile flags: /Odtp
;	COMDAT ?IsApicPresent@@YIIXZ
_TEXT	SEGMENT
_reg_edx$ = -4						; size = 4
?IsApicPresent@@YIIXZ PROC				; IsApicPresent, COMDAT

; 727  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 728  :     unsigned int reg_edx = BlGetCpuidEdx(1);

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	e8 00 00 00 00	 call	 ?BlGetCpuidEdx@@YIKK@Z	; BlGetCpuidEdx
  0000e	89 45 fc	 mov	 DWORD PTR _reg_edx$[ebp], eax

; 729  : 
; 730  :     return ((reg_edx >> 9) & 0x1);

  00011	8b 45 fc	 mov	 eax, DWORD PTR _reg_edx$[ebp]
  00014	c1 e8 09	 shr	 eax, 9
  00017	83 e0 01	 and	 eax, 1

; 731  : }

  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?IsApicPresent@@YIIXZ ENDP				; IsApicPresent
_TEXT	ENDS
PUBLIC	?GetAPIC_ID@@YIEXZ				; GetAPIC_ID
EXTRN	?BlGetCpuidEbx@@YIKK@Z:PROC			; BlGetCpuidEbx
; Function compile flags: /Odtp
;	COMDAT ?GetAPIC_ID@@YIEXZ
_TEXT	SEGMENT
_reg_ebx$ = -4						; size = 4
?GetAPIC_ID@@YIEXZ PROC					; GetAPIC_ID, COMDAT

; 739  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 740  :     unsigned int reg_ebx = BlGetCpuidEbx(1);

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	e8 00 00 00 00	 call	 ?BlGetCpuidEbx@@YIKK@Z	; BlGetCpuidEbx
  0000e	89 45 fc	 mov	 DWORD PTR _reg_ebx$[ebp], eax

; 741  : 
; 742  :     return (unsigned char) ((reg_ebx & INITIAL_APIC_ID_BITS) >> 24);

  00011	8b 45 fc	 mov	 eax, DWORD PTR _reg_ebx$[ebp]
  00014	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00019	c1 e8 18	 shr	 eax, 24			; 00000018H

; 743  : }

  0001c	8b e5		 mov	 esp, ebp
  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
?GetAPIC_ID@@YIEXZ ENDP					; GetAPIC_ID
_TEXT	ENDS
PUBLIC	??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@ ; `string'
PUBLIC	??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@ ; `string'
PUBLIC	??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@		; `string'
PUBLIC	??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@ ; `string'
PUBLIC	?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z ; BlSingularityInitialize
EXTRN	?BlMmGetNextPhysicalRegion@@YIEPAPAXPA_K1PAK@Z:PROC ; BlMmGetNextPhysicalRegion
EXTRN	?BlMmFindFreePhysicalRegion@@YIEPA_K0@Z:PROC	; BlMmFindFreePhysicalRegion
EXTRN	?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z:PROC ; BlRtlConvertFarPointerToLinearPointer
EXTRN	?BlPciOhci1394BaseAddress@@3KA:DWORD		; BlPciOhci1394BaseAddress
EXTRN	?BlComBasePort@@3QBGB:TBYTE			; BlComBasePort
EXTRN	?BlKdComPort@@3EA:BYTE				; BlKdComPort
EXTRN	?BlAcpiRsdpAddress@@3PAXA:DWORD			; BlAcpiRsdpAddress
EXTRN	?BlVesaVideoBuffer@@3KA:DWORD			; BlVesaVideoBuffer
EXTRN	?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A:BYTE ; BlPciInstallationCheck
EXTRN	?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A:FWORD ; BlPnpIsaConfiguration
EXTRN	?BlPnpSystemDeviceNodeListSize@@3KA:DWORD	; BlPnpSystemDeviceNodeListSize
EXTRN	?BlPnpSystemDeviceNodeList@@3PAU_PNP_SYSTEM_DEVICE_NODE@@A:DWORD ; BlPnpSystemDeviceNodeList
EXTRN	?BlRtlStringLengthW@@YIKPB_W@Z:PROC		; BlRtlStringLengthW
EXTRN	?BlMpsFps@@3PAXA:DWORD				; BlMpsFps
EXTRN	?BlStartTime@@3U_BL_TIME@@A:BYTE		; BlStartTime
;	COMDAT ??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@ DB 'UN'
	DB	'KNOWN TYPE MEMORY??? %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@
CONST	SEGMENT
??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@ DB 'Allocated'
	DB	' kernel stack at 0x%016I64x', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@
CONST	SEGMENT
??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@ DB 'Failed to a'
	DB	'llocate kernel stack.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@
CONST	SEGMENT
??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@ DB 'Debugger OFF', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@
CONST	SEGMENT
??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@ DB 'Got 1394'
	DB	' debugger base address!', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z
_TEXT	SEGMENT
tv632 = -96						; size = 8
_ApEntry16$ = -88					; size = 4
_NumberOfProcessors$ = -84				; size = 4
_Type$ = -68						; size = 4
_Base$ = -56						; size = 8
_StackStart$ = -48					; size = 8
_Size$ = -40						; size = 8
_PhysicalRegionHandle$ = -16				; size = 4
_Index$ = -12						; size = 4
_ApStartupLock$ = 8					; size = 4
?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z PROC	; BlSingularityInitialize, COMDAT
; _NumberOfProcessors$ = ecx
; _ApEntry16$ = edx

; 770  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 60	 sub	 esp, 96			; 00000060H
  00006	89 55 a8	 mov	 DWORD PTR _ApEntry16$[ebp], edx
  00009	89 4d ac	 mov	 DWORD PTR _NumberOfProcessors$[ebp], ecx

; 771  :     UINT64 Base;
; 772  :     UINT32 Index;
; 773  :     PVOID PhysicalRegionHandle;
; 774  :     UINT64 Size;
; 775  :     UINT32 Type;
; 776  :     UINT8 id;
; 777  :     UINT64 HighAddress;
; 778  :     UINT64 TempAddress;
; 779  :     UINT64 StackStart;
; 780  :     UINT64 PlayStart;
; 781  :     int i;
; 782  :     char* p;
; 783  : 
; 784  :     //
; 785  :     // Allocate processor array and set processor count.
; 786  :     //
; 787  : 
; 788  :     BlProcessor = (PBL_PROCESSOR) BlPoolAllocateBlock(sizeof(BL_PROCESSOR) * NumberOfProcessors);

  0000c	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  0000f	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  00012	e8 00 00 00 00	 call	 ?BlPoolAllocateBlock@@YIPAXK@Z ; BlPoolAllocateBlock
  00017	a3 00 00 00 00	 mov	 DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A, eax ; BlProcessor

; 789  :     BlProcessorCount = NumberOfProcessors;

  0001c	8b 45 ac	 mov	 eax, DWORD PTR _NumberOfProcessors$[ebp]
  0001f	a3 00 00 00 00	 mov	 DWORD PTR ?BlProcessorCount@@3KA, eax ; BlProcessorCount

; 790  : 
; 791  :     //
; 792  :     // Load distro.
; 793  :     //
; 794  : 
; 795  :     BlSingularityLoadDistro();

  00024	e8 00 00 00 00	 call	 ?BlSingularityLoadDistro@@YIXXZ ; BlSingularityLoadDistro

; 796  : 
; 797  :     //
; 798  :     // Load kernel image.
; 799  :     //
; 800  : 
; 801  :     BlSingularityLoadKernelImage();

  00029	e8 00 00 00 00	 call	 ?BlSingularityLoadKernelImage@@YIXXZ ; BlSingularityLoadKernelImage

; 802  : 
; 803  :     //
; 804  :     // Allocate native platform structure.
; 805  :     //
; 806  : 
; 807  :     BlPlatform = (Class_Microsoft_Singularity_Hal_Platform *) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(sizeof(Class_Microsoft_Singularity_Hal_Platform)), BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM);

  0002e	ba 07 00 00 00	 mov	 edx, 7
  00033	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00038	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0003d	a3 00 00 00 00	 mov	 DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A, eax ; BlPlatform

; 808  : 
; 809  :     BlPlatform->Size = sizeof(Class_Microsoft_Singularity_Hal_Platform);

  00042	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00048	c7 01 c5 01 00
	00		 mov	 DWORD PTR [ecx], 453	; 000001c5H

; 810  : 
; 811  :     if (IsApicPresent()) {

  0004e	e8 00 00 00 00	 call	 ?IsApicPresent@@YIIXZ	; IsApicPresent
  00053	85 c0		 test	 eax, eax
  00055	74 0f		 je	 SHORT $LN26@BlSingular@5

; 812  :         BlPlatform->hasApic = 1;

  00057	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0005d	c7 42 5c 01 00
	00 00		 mov	 DWORD PTR [edx+92], 1

; 813  :     }
; 814  :     else {

  00064	eb 0c		 jmp	 SHORT $LN25@BlSingular@5
$LN26@BlSingular@5:

; 815  :         BlPlatform->hasApic = 0;

  00066	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0006b	c7 40 5c 00 00
	00 00		 mov	 DWORD PTR [eax+92], 0
$LN25@BlSingular@5:

; 816  :     }
; 817  : 
; 818  :     //
; 819  :     // Set offsets for per-cpu and per-thread pointers.
; 820  :     //
; 821  : 
; 822  :     BlPlatform->CpuRecordPointerOffset = 0;

  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00078	c7 41 70 00 00
	00 00		 mov	 DWORD PTR [ecx+112], 0

; 823  :     BlPlatform->ThreadRecordPointerOffset = sizeof(PTR_TYPE);

  0007f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00085	c7 42 74 04 00
	00 00		 mov	 DWORD PTR [edx+116], 4

; 824  : 
; 825  :     //
; 826  :     // Set boot time.
; 827  :     //
; 828  : 
; 829  :     if (BlStartTime.Year != 0) {

  0008c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlStartTime@@3U_BL_TIME@@A, 0
  00093	74 61		 je	 SHORT $LN24@BlSingular@5

; 830  :         BlPlatform->BootYear = 2000 + BlStartTime.Year;

  00095	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlStartTime@@3U_BL_TIME@@A
  0009a	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  0009f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000a5	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 831  :         BlPlatform->BootMonth = BlStartTime.Month;

  000a8	0f b6 15 04 00
	00 00		 movzx	 edx, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+4
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000b4	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 832  :         BlPlatform->BootDay = BlStartTime.Day;

  000b7	0f b6 0d 05 00
	00 00		 movzx	 ecx, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+5
  000be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000c4	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 833  :         BlPlatform->BootHour = BlStartTime.Hour;

  000c7	0f b6 05 06 00
	00 00		 movzx	 eax, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+6
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000d4	89 41 10	 mov	 DWORD PTR [ecx+16], eax

; 834  :         BlPlatform->BootMinute = BlStartTime.Minute;

  000d7	0f b6 15 07 00
	00 00		 movzx	 edx, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+7
  000de	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000e3	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 835  :         BlPlatform->BootSecond = BlStartTime.Second;

  000e6	0f b6 0d 08 00
	00 00		 movzx	 ecx, BYTE PTR ?BlStartTime@@3U_BL_TIME@@A+8
  000ed	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000f3	89 4a 18	 mov	 DWORD PTR [edx+24], ecx
$LN24@BlSingular@5:

; 836  :     }
; 837  : 
; 838  :     //
; 839  :     // Set processor count.
; 840  :     //
; 841  : 
; 842  :     BlPlatform->CpuRealCount = NumberOfProcessors;

  000f6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  000fb	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  000fe	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 843  :     BlPlatform->CpuMaxCount = NumberOfProcessors;

  00101	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00107	8b 45 ac	 mov	 eax, DWORD PTR _NumberOfProcessors$[ebp]
  0010a	89 42 1c	 mov	 DWORD PTR [edx+28], eax

; 844  : 
; 845  :     //
; 846  :     // Set MPS floating pointer structure address.
; 847  :     //
; 848  : 
; 849  :     BlPlatform->MpFloat32 = (UINT32) (ULONG_PTR) BlMpsFps;

  0010d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00113	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlMpsFps@@3PAXA ; BlMpsFps
  00119	89 91 79 01 00
	00		 mov	 DWORD PTR [ecx+377], edx

; 850  : 
; 851  :     //
; 852  :     // Set kernel range.
; 853  :     //
; 854  : 
; 855  :     BlPlatform->KernelDllBase = (ULONG_PTR) BlKernelBase;

  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0012a	89 88 88 00 00
	00		 mov	 DWORD PTR [eax+136], ecx

; 856  :     BlPlatform->KernelDllFirstPage = (ULONG_PTR) BlKernelBase;

  00130	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlKernelBase@@3PAXA ; BlKernelBase
  0013b	89 82 90 00 00
	00		 mov	 DWORD PTR [edx+144], eax

; 857  :     BlPlatform->KernelDllSize = BlKernelSize;

  00141	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00147	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlKernelSize@@3KA ; BlKernelSize
  0014d	89 91 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], edx

; 858  : 
; 859  :     //
; 860  :     // Set command line.
; 861  :     //
; 862  : 
; 863  :     BlPlatform->CommandLine32 = (ULONG_PTR) BlCommandLine;

  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00158	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  0015e	89 48 68	 mov	 DWORD PTR [eax+104], ecx

; 864  :     BlPlatform->CommandLineCount = BlRtlStringLengthW(BlCommandLine);

  00161	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlCommandLine@@3PA_WA ; BlCommandLine
  00167	e8 00 00 00 00	 call	 ?BlRtlStringLengthW@@YIKPB_W@Z ; BlRtlStringLengthW
  0016c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00172	89 42 6c	 mov	 DWORD PTR [edx+108], eax

; 865  : 
; 866  :     //
; 867  :     // Set PNP node list address.
; 868  :     //
; 869  : 
; 870  :     BlPlatform->PnpNodesAddr32 = (ULONG_PTR) BlPnpSystemDeviceNodeList;

  00175	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPnpSystemDeviceNodeList@@3PAU_PNP_SYSTEM_DEVICE_NODE@@A ; BlPnpSystemDeviceNodeList
  0017a	33 c9		 xor	 ecx, ecx
  0017c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00182	89 82 53 01 00
	00		 mov	 DWORD PTR [edx+339], eax
  00188	89 8a 57 01 00
	00		 mov	 DWORD PTR [edx+343], ecx

; 871  :     BlPlatform->PnpNodesSize32 = BlPnpSystemDeviceNodeListSize;

  0018e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00193	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPnpSystemDeviceNodeListSize@@3KA ; BlPnpSystemDeviceNodeListSize
  00199	89 88 5b 01 00
	00		 mov	 DWORD PTR [eax+347], ecx

; 872  : 
; 873  :     //
; 874  :     // Set ISA information.
; 875  :     //
; 876  : 
; 877  :     BlPlatform->IsaCsns = BlPnpIsaConfiguration.NumberOfCardSelectNumbers;

  0019f	0f b6 15 01 00
	00 00		 movzx	 edx, BYTE PTR ?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A+1
  001a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001ab	89 90 6f 01 00
	00		 mov	 DWORD PTR [eax+367], edx

; 878  :     BlPlatform->IsaReadPort = BlPnpIsaConfiguration.DataReadPort;

  001b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001b7	66 8b 15 02 00
	00 00		 mov	 dx, WORD PTR ?BlPnpIsaConfiguration@@3U_PNP_ISA_CONFIGURATION@@A+2
  001be	66 89 91 73 01
	00 00		 mov	 WORD PTR [ecx+371], dx

; 879  : 
; 880  :     //
; 881  :     // Set PCI BIOS information.
; 882  :     //
; 883  : 
; 884  :     BlPlatform->PciBiosAX = BlPciInstallationCheck.Eax;

  001c5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A
  001d0	89 88 3b 01 00
	00		 mov	 DWORD PTR [eax+315], ecx

; 885  :     BlPlatform->PciBiosBX = BlPciInstallationCheck.Ebx;

  001d6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001dc	a1 04 00 00 00	 mov	 eax, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+4
  001e1	89 82 3f 01 00
	00		 mov	 DWORD PTR [edx+319], eax

; 886  :     BlPlatform->PciBiosCX = BlPciInstallationCheck.Ecx;

  001e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001ed	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+8
  001f3	89 91 43 01 00
	00		 mov	 DWORD PTR [ecx+323], edx

; 887  :     BlPlatform->PciBiosEDX = BlPciInstallationCheck.Edx;

  001f9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  001fe	8b 0d 0c 00 00
	00		 mov	 ecx, DWORD PTR ?BlPciInstallationCheck@@3U_PCI_INSTALLATION_CHECK@@A+12
  00204	89 88 47 01 00
	00		 mov	 DWORD PTR [eax+327], ecx

; 888  : 
; 889  :     //
; 890  :     // Set VESA information.
; 891  :     //
; 892  : 
; 893  :     BlPlatform->VesaBuffer = BlVesaVideoBuffer;

  0020a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlVesaVideoBuffer@@3KA ; BlVesaVideoBuffer
  00210	33 c0		 xor	 eax, eax
  00212	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00218	89 91 91 01 00
	00		 mov	 DWORD PTR [ecx+401], edx
  0021e	89 81 95 01 00
	00		 mov	 DWORD PTR [ecx+405], eax

; 894  : 
; 895  :     //
; 896  :     // Set ACPI information.
; 897  :     //
; 898  : 
; 899  :     BlPlatform->AcpiRoot32 = (ULONG_PTR) BlAcpiRsdpAddress;

  00224	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlAcpiRsdpAddress@@3PAXA ; BlAcpiRsdpAddress
  0022a	33 c0		 xor	 eax, eax
  0022c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00232	89 91 4b 01 00
	00		 mov	 DWORD PTR [ecx+331], edx
  00238	89 81 4f 01 00
	00		 mov	 DWORD PTR [ecx+335], eax

; 900  : 
; 901  :     //
; 902  :     // Set file image table.
; 903  :     //
; 904  : 
; 905  :     BlPlatform->FileImageTableBase32 = (ULONG_PTR) BlSingularityFileImageTable;

  0023e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularityFileImageTable@@3PAUStruct_Microsoft_Singularity_Io_FileImage@@A ; BlSingularityFileImageTable
  00244	33 c0		 xor	 eax, eax
  00246	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0024c	89 91 c8 00 00
	00		 mov	 DWORD PTR [ecx+200], edx
  00252	89 81 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], eax

; 906  :     BlPlatform->FileImageTableEntries = BlSingularityFileImageTableSize;

  00258	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0025e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularityFileImageTableSize@@3KA ; BlSingularityFileImageTableSize
  00263	89 82 d0 00 00
	00		 mov	 DWORD PTR [edx+208], eax

; 907  : 
; 908  :     //
; 909  :     // Allocate log record and text buffers.
; 910  :     //
; 911  : 
; 912  :     BlPlatform->LogRecordBuffer = (ULONG_PTR) BlMmAllocatePhysicalRegion(SINGULARITY_LOG_RECORD_SIZE, BL_MM_PHYSICAL_REGION_LOG_RECORD);

  00269	ba 09 00 00 00	 mov	 edx, 9
  0026e	b9 00 00 02 00	 mov	 ecx, 131072		; 00020000H
  00273	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  00278	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0027e	89 41 78	 mov	 DWORD PTR [ecx+120], eax

; 913  :     BlPlatform->LogRecordSize = SINGULARITY_LOG_RECORD_SIZE;

  00281	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00287	c7 42 7c 00 00
	02 00		 mov	 DWORD PTR [edx+124], 131072 ; 00020000H

; 914  : 
; 915  :     BlPlatform->LogTextBuffer = (ULONG_PTR) BlMmAllocatePhysicalRegion(SINGULARITY_LOG_TEXT_SIZE, BL_MM_PHYSICAL_REGION_LOG_TEXT);

  0028e	ba 0a 00 00 00	 mov	 edx, 10			; 0000000aH
  00293	b9 00 00 02 00	 mov	 ecx, 131072		; 00020000H
  00298	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  0029d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002a3	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 916  :     BlPlatform->LogTextSize = SINGULARITY_LOG_TEXT_SIZE;

  002a9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002af	c7 82 84 00 00
	00 00 00 02 00	 mov	 DWORD PTR [edx+132], 131072 ; 00020000H

; 917  : 
; 918  :     //
; 919  :     // Set debugger settings.
; 920  :     //
; 921  : 
; 922  :     if (BlKdComPort != 0) {

  002b9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?BlKdComPort@@3EA ; BlKdComPort
  002c0	85 c0		 test	 eax, eax
  002c2	74 30		 je	 SHORT $LN23@BlSingular@5

; 923  : 
; 924  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_SERIAL;

  002c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002ca	c7 81 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+156], 1

; 925  :         BlPlatform->DebugBasePort = BlComBasePort[BlKdComPort];

  002d4	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?BlKdComPort@@3EA ; BlKdComPort
  002db	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  002e0	66 8b 0c 55 00
	00 00 00	 mov	 cx, WORD PTR ?BlComBasePort@@3QBGB[edx*2]
  002e8	66 89 88 a4 00
	00 00		 mov	 WORD PTR [eax+164], cx
  002ef	e9 86 00 00 00	 jmp	 $LN22@BlSingular@5
$LN23@BlSingular@5:

; 926  : 
; 927  :     }
; 928  :     else if (BlPciOhci1394BaseAddress != 0) {

  002f4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPciOhci1394BaseAddress@@3KA, 0 ; BlPciOhci1394BaseAddress
  002fb	74 60		 je	 SHORT $LN21@BlSingular@5

; 929  : 
; 930  :         BlRtlPrintf("Got 1394 debugger base address!\n");

  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@DIKHLCCP@Got?51394?5debugger?5base?5address?$CB?6@
  00302	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00307	83 c4 04	 add	 esp, 4

; 931  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_1394;

  0030a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00310	c7 82 9c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [edx+156], 2

; 932  :         BlPlatform->Ohci1394Base = BlPciOhci1394BaseAddress;

  0031a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPciOhci1394BaseAddress@@3KA ; BlPciOhci1394BaseAddress
  0031f	33 c9		 xor	 ecx, ecx
  00321	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00327	89 82 7d 01 00
	00		 mov	 DWORD PTR [edx+381], eax
  0032d	89 8a 81 01 00
	00		 mov	 DWORD PTR [edx+385], ecx

; 933  :         BlPlatform->Ohci1394BufferAddr32 = (ULONG_PTR) BlSingularityOhci1394Buffer;

  00333	b8 00 00 00 00	 mov	 eax, OFFSET ?BlSingularityOhci1394Buffer@@3PAEA ; BlSingularityOhci1394Buffer
  00338	33 c9		 xor	 ecx, ecx
  0033a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00340	89 82 85 01 00
	00		 mov	 DWORD PTR [edx+389], eax
  00346	89 8a 89 01 00
	00		 mov	 DWORD PTR [edx+393], ecx

; 934  :         BlPlatform->Ohci1394BufferSize32 = sizeof(BlSingularityOhci1394Buffer);

  0034c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00351	c7 80 8d 01 00
	00 00 30 00 00	 mov	 DWORD PTR [eax+397], 12288 ; 00003000H

; 935  : 
; 936  :     }
; 937  :     else {

  0035b	eb 1d		 jmp	 SHORT $LN22@BlSingular@5
$LN21@BlSingular@5:

; 938  : 
; 939  :         BlRtlPrintf("Debugger OFF\n");

  0035d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CLNMNDLH@Debugger?5OFF?6?$AA@
  00362	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00367	83 c4 04	 add	 esp, 4

; 940  :         BlPlatform->DebuggerType = Class_Microsoft_Singularity_Hal_Platform_DEBUGGER_NONE;

  0036a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00370	c7 81 9c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+156], 0
$LN22@BlSingular@5:

; 941  : 
; 942  :     }
; 943  : 
; 944  :     BlPlatform->TwiddleSpinBase = 0xb8000;

  0037a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00380	c7 82 a8 00 00
	00 00 80 0b 00	 mov	 DWORD PTR [edx+168], 753664 ; 000b8000H

; 945  : 
; 946  :     //
; 947  :     // Set exit routine.
; 948  :     //
; 949  : 
; 950  :     BlPlatform->Kill32 = (ULONG_PTR) BlSingularityExit;

  0038a	b8 00 00 00 00	 mov	 eax, OFFSET ?BlSingularityExit@@YIXXZ ; BlSingularityExit
  0038f	33 c9		 xor	 ecx, ecx
  00391	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00397	89 82 b4 00 00
	00		 mov	 DWORD PTR [edx+180], eax
  0039d	89 8a b8 00 00
	00		 mov	 DWORD PTR [edx+184], ecx

; 951  : 
; 952  :     //
; 953  :     // Set entry routine and startup lock address for application processors.
; 954  :     //
; 955  : 
; 956  :     BlPlatform->MpEnter32 = (ULONG_PTR) BlRtlConvertFarPointerToLinearPointer(ApEntry16);

  003a3	8b 4d a8	 mov	 ecx, DWORD PTR _ApEntry16$[ebp]
  003a6	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  003ab	33 c9		 xor	 ecx, ecx
  003ad	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  003b3	89 82 99 01 00
	00		 mov	 DWORD PTR [edx+409], eax
  003b9	89 8a 9d 01 00
	00		 mov	 DWORD PTR [edx+413], ecx

; 957  :     BlPlatform->MpStartupLock32 = (ULONG_PTR) BlRtlConvertFarPointerToLinearPointer(ApStartupLock);

  003bf	8b 4d 08	 mov	 ecx, DWORD PTR _ApStartupLock$[ebp]
  003c2	e8 00 00 00 00	 call	 ?BlRtlConvertFarPointerToLinearPointer@@YIPAXPAU_FAR_POINTER@@@Z ; BlRtlConvertFarPointerToLinearPointer
  003c7	33 c9		 xor	 ecx, ecx
  003c9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  003cf	89 82 a9 01 00
	00		 mov	 DWORD PTR [edx+425], eax
  003d5	89 8a ad 01 00
	00		 mov	 DWORD PTR [edx+429], ecx

; 958  : 
; 959  :     //
; 960  :     // Allocate native processor structures.
; 961  :     //
; 962  : 
; 963  :     BlCpuArray =
; 964  :         (Class_Microsoft_Singularity_Hal_Cpu *) BlMmAllocatePhysicalRegion(ROUND_UP_TO_PAGES(sizeof(Class_Microsoft_Singularity_Hal_Cpu) * NumberOfProcessors), BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR);

  003db	8b 4d ac	 mov	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  003de	69 c9 89 00 00
	00		 imul	 ecx, 137		; 00000089H
  003e4	81 c1 ff 0f 00
	00		 add	 ecx, 4095		; 00000fffH
  003ea	81 e1 00 f0 ff
	ff		 and	 ecx, -4096		; fffff000H
  003f0	ba 08 00 00 00	 mov	 edx, 8
  003f5	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  003fa	a3 00 00 00 00	 mov	 DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A, eax ; BlCpuArray

; 965  : 
; 966  :     BlPlatform->Cpus = (ULONG_PTR) BlCpuArray;

  003ff	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
  00404	33 c9		 xor	 ecx, ecx
  00406	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0040c	89 82 f0 00 00
	00		 mov	 DWORD PTR [edx+240], eax
  00412	89 8a f4 00 00
	00		 mov	 DWORD PTR [edx+244], ecx

; 967  : 
; 968  :     //
; 969  :     // Allocate per-processor resources upfront.
; 970  :     //
; 971  : 
; 972  :     for (Index = 0; Index < NumberOfProcessors; Index += 1) {

  00418	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  0041f	eb 09		 jmp	 SHORT $LN19@BlSingular@5
$LN18@BlSingular@5:
  00421	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00424	83 c0 01	 add	 eax, 1
  00427	89 45 f4	 mov	 DWORD PTR _Index$[ebp], eax
$LN19@BlSingular@5:
  0042a	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  0042d	3b 4d ac	 cmp	 ecx, DWORD PTR _NumberOfProcessors$[ebp]
  00430	0f 83 97 00 00
	00		 jae	 $LN17@BlSingular@5

; 973  : 
; 974  :         BlProcessor[Index].Index = Index;

  00436	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00439	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0043c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00441	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00444	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx

; 975  :         BlProcessor[Index].Cpu = &BlCpuArray[Index];

  00447	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  0044a	69 d2 89 00 00
	00		 imul	 edx, 137		; 00000089H
  00450	03 15 00 00 00
	00		 add	 edx, DWORD PTR ?BlCpuArray@@3PAUClass_Microsoft_Singularity_Hal_Cpu@@A ; BlCpuArray
  00456	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00459	6b c0 1c	 imul	 eax, 28			; 0000001cH
  0045c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00462	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 976  :         BlProcessor[Index].ContextPage = (PVOID) BlMmAllocatePhysicalRegion(2 * PAGE_SIZE, BL_MM_PHYSICAL_REGION_CONTEXT);

  00466	ba 0c 00 00 00	 mov	 edx, 12			; 0000000cH
  0046b	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  00470	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  00475	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00478	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0047b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00481	89 44 11 10	 mov	 DWORD PTR [ecx+edx+16], eax

; 977  :         BlProcessor[Index].BasePage = (PVOID) ((ULONG_PTR) BlProcessor[Index].ContextPage + PAGE_SIZE);

  00485	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00488	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0048b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00490	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  00494	81 c1 00 10 00
	00		 add	 ecx, 4096		; 00001000H
  0049a	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  0049d	6b d2 1c	 imul	 edx, 28			; 0000001cH
  004a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  004a5	89 4c 10 14	 mov	 DWORD PTR [eax+edx+20], ecx

; 978  :         BlProcessor[Index].TaskPage = (BL_TASK_SEGMENT *) BlMmAllocatePhysicalRegion(PAGE_SIZE, BL_MM_PHYSICAL_REGION_TASK);

  004a9	ba 0d 00 00 00	 mov	 edx, 13			; 0000000dH
  004ae	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  004b3	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  004b8	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  004bb	6b c9 1c	 imul	 ecx, 28			; 0000001cH
  004be	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  004c4	89 44 0a 18	 mov	 DWORD PTR [edx+ecx+24], eax

; 979  :     }

  004c8	e9 54 ff ff ff	 jmp	 $LN18@BlSingular@5
$LN17@BlSingular@5:

; 980  : 
; 981  :     //
; 982  :     // Allocate kernel stack for the bootstrap processor.
; 983  :     //
; 984  : 
; 985  :     StackStart = BlMmAllocatePhysicalRegion(SINGULARITY_KERNEL_STACK_SIZE,
; 986  :                         BL_MM_PHYSICAL_REGION_KERNEL_STACK);

  004cd	ba 0b 00 00 00	 mov	 edx, 11			; 0000000bH
  004d2	b9 00 00 0c 00	 mov	 ecx, 786432		; 000c0000H
  004d7	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  004dc	89 45 d0	 mov	 DWORD PTR _StackStart$[ebp], eax
  004df	89 55 d4	 mov	 DWORD PTR _StackStart$[ebp+4], edx

; 987  :     if (0 == StackStart) {

  004e2	83 7d d0 00	 cmp	 DWORD PTR _StackStart$[ebp], 0
  004e6	75 2a		 jne	 SHORT $LN16@BlSingular@5
  004e8	83 7d d4 00	 cmp	 DWORD PTR _StackStart$[ebp+4], 0
  004ec	75 24		 jne	 SHORT $LN16@BlSingular@5

; 988  :     BlRtlPrintf("Failed to allocate kernel stack.\n", StackStart);

  004ee	8b 45 d4	 mov	 eax, DWORD PTR _StackStart$[ebp+4]
  004f1	50		 push	 eax
  004f2	8b 4d d0	 mov	 ecx, DWORD PTR _StackStart$[ebp]
  004f5	51		 push	 ecx
  004f6	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JLPBNPHN@Failed?5to?5allocate?5kernel?5stack?4@
  004fb	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00500	83 c4 0c	 add	 esp, 12			; 0000000cH

; 989  :     BlRtlHalt();

  00503	ba dd 03 00 00	 mov	 edx, 989		; 000003ddH
  00508	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  0050d	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN16@BlSingular@5:

; 990  :     }
; 991  : 
; 992  :     BlRtlPrintf("Allocated kernel stack at 0x%016I64x\n", StackStart);

  00512	8b 55 d4	 mov	 edx, DWORD PTR _StackStart$[ebp+4]
  00515	52		 push	 edx
  00516	8b 45 d0	 mov	 eax, DWORD PTR _StackStart$[ebp]
  00519	50		 push	 eax
  0051a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@JMHGECHE@Allocated?5kernel?5stack?5at?50x?$CF016@
  0051f	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00524	83 c4 0c	 add	 esp, 12			; 0000000cH

; 993  : 
; 994  :     BlProcessor[0].KernelStack = (PVOID) (StackStart);

  00527	8b 4d d0	 mov	 ecx, DWORD PTR _StackStart$[ebp]
  0052a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00530	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 995  :     BlProcessor[0].Cpu->DomainBsp = TRUE;

  00533	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00538	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0053b	c7 41 14 01 00
	00 00		 mov	 DWORD PTR [ecx+20], 1

; 996  : 
; 997  :     BlPlatform->OutgoingMessage   = 0;

  00542	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00548	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0

; 998  :     BlPlatform->OutgoingCount     = 0;

  0054f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00554	c7 40 38 00 00
	00 00		 mov	 DWORD PTR [eax+56], 0

; 999  :     BlPlatform->IncomingFree      = 0;

  0055b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00561	c7 41 3c 00 00
	00 00		 mov	 DWORD PTR [ecx+60], 0

; 1000 :     BlPlatform->IncomingFreeCount = 0;

  00568	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0056e	c7 42 40 00 00
	00 00		 mov	 DWORD PTR [edx+64], 0

; 1001 :     BlPlatform->IncomingMessage   = 0;

  00575	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0057a	c7 40 44 00 00
	00 00		 mov	 DWORD PTR [eax+68], 0

; 1002 :     BlPlatform->IncomingCount     = 0;

  00581	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00587	c7 41 48 00 00
	00 00		 mov	 DWORD PTR [ecx+72], 0

; 1003 :     BlPlatform->OutgoingFree      = 0;

  0058e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00594	c7 42 4c 00 00
	00 00		 mov	 DWORD PTR [edx+76], 0

; 1004 :     BlPlatform->OutgoingFreeCount = 0;

  0059b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  005a0	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [eax+80], 0

; 1005 :     BlPlatform->MaxBufferLength   = 0;

  005a7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  005ad	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], 0

; 1006 : 
; 1007 :     BlProcessor[0].KernelStackSize = SINGULARITY_KERNEL_STACK_SIZE;

  005b4	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  005ba	c7 42 0c 00 00
	0c 00		 mov	 DWORD PTR [edx+12], 786432 ; 000c0000H

; 1008 : 
; 1009 :     //
; 1010 :     // Initialize the first processor structure.
; 1011 :     //
; 1012 : 
; 1013 :     BlSingularityInitializeProcessor(0);

  005c1	33 c9		 xor	 ecx, ecx
  005c3	e8 00 00 00 00	 call	 ?BlSingularityInitializeProcessor@@YIXK@Z ; BlSingularityInitializeProcessor

; 1014 : 
; 1015 :     //
; 1016 :     // Allocate memory map for Singularity.
; 1017 :     //
; 1018 : 
; 1019 :     BlSingularitySmap = (PBL_SMAP) BlMmAllocatePhysicalRegion(sizeof(BL_SMAP), BL_MM_PHYSICAL_REGION_SINGULARITY_SMAP);

  005c8	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  005cd	b9 08 0c 00 00	 mov	 ecx, 3080		; 00000c08H
  005d2	e8 00 00 00 00	 call	 ?BlMmAllocatePhysicalRegion@@YI_KKK@Z ; BlMmAllocatePhysicalRegion
  005d7	a3 00 00 00 00	 mov	 DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A, eax ; BlSingularitySmap
$LN15@BlSingular@5:

; 1020 : 
; 1021 :     //
; 1022 :     // Claim all remaining physical memory for Singularity.
; 1023 :     //
; 1024 : 
; 1025 :     while (BlMmFindFreePhysicalRegion(&Base, &Size) != FALSE) {

  005dc	8d 55 d8	 lea	 edx, DWORD PTR _Size$[ebp]
  005df	8d 4d c8	 lea	 ecx, DWORD PTR _Base$[ebp]
  005e2	e8 00 00 00 00	 call	 ?BlMmFindFreePhysicalRegion@@YIEPA_K0@Z ; BlMmFindFreePhysicalRegion
  005e7	0f b6 c0	 movzx	 eax, al
  005ea	85 c0		 test	 eax, eax
  005ec	74 1c		 je	 SHORT $LN14@BlSingular@5

; 1026 : 
; 1027 :         BlMmAllocateSpecificPhysicalRegion(Base, Size, BL_MM_PHYSICAL_REGION_SINGULARITY);

  005ee	8b 4d dc	 mov	 ecx, DWORD PTR _Size$[ebp+4]
  005f1	51		 push	 ecx
  005f2	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  005f5	52		 push	 edx
  005f6	8b 45 cc	 mov	 eax, DWORD PTR _Base$[ebp+4]
  005f9	50		 push	 eax
  005fa	8b 4d c8	 mov	 ecx, DWORD PTR _Base$[ebp]
  005fd	51		 push	 ecx
  005fe	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00603	e8 00 00 00 00	 call	 ?BlMmAllocateSpecificPhysicalRegion@@YIE_K0K@Z ; BlMmAllocateSpecificPhysicalRegion

; 1028 :     }

  00608	eb d2		 jmp	 SHORT $LN15@BlSingular@5
$LN14@BlSingular@5:

; 1029 : 
; 1030 :     //
; 1031 :     // Generate memory map for Singularity.
; 1032 :     //
; 1033 : 
; 1034 :     BlRtlZeroMemory(BlSingularitySmap, sizeof(BL_SMAP));

  0060a	ba 08 0c 00 00	 mov	 edx, 3080		; 00000c08H
  0060f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00615	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 1035 : 
; 1036 :     BlPlatform->PhysicalBase = (ULONG_PTR) -1;

  0061a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00620	c7 42 30 ff ff
	ff ff		 mov	 DWORD PTR [edx+48], -1

; 1037 : 
; 1038 :     PhysicalRegionHandle = NULL;

  00627	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _PhysicalRegionHandle$[ebp], 0
$LN13@BlSingular@5:

; 1039 : 
; 1040 :     while (BlMmGetNextPhysicalRegion(&PhysicalRegionHandle,
; 1041 :                                      &Base,
; 1042 :                                      &Size,
; 1043 :                                      &Type) != FALSE) {

  0062e	8d 45 bc	 lea	 eax, DWORD PTR _Type$[ebp]
  00631	50		 push	 eax
  00632	8d 4d d8	 lea	 ecx, DWORD PTR _Size$[ebp]
  00635	51		 push	 ecx
  00636	8d 55 c8	 lea	 edx, DWORD PTR _Base$[ebp]
  00639	8d 4d f0	 lea	 ecx, DWORD PTR _PhysicalRegionHandle$[ebp]
  0063c	e8 00 00 00 00	 call	 ?BlMmGetNextPhysicalRegion@@YIEPAPAXPA_K1PAK@Z ; BlMmGetNextPhysicalRegion
  00641	0f b6 d0	 movzx	 edx, al
  00644	85 d2		 test	 edx, edx
  00646	0f 84 45 02 00
	00		 je	 $LN12@BlSingular@5

; 1044 : 
; 1045 :         if ((Type == BL_MM_PHYSICAL_REGION_SINGULARITY) ||
; 1046 :             (Type == BL_MM_PHYSICAL_REGION_KERNEL_IMAGE) ||
; 1047 :             (Type == BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM) ||
; 1048 :             (Type == BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR) ||
; 1049 :             (Type == BL_MM_PHYSICAL_REGION_KERNEL_STACK)
; 1050 :             ) {

  0064c	83 7d bc 0e	 cmp	 DWORD PTR _Type$[ebp], 14 ; 0000000eH
  00650	74 1c		 je	 SHORT $LN10@BlSingular@5
  00652	83 7d bc 06	 cmp	 DWORD PTR _Type$[ebp], 6
  00656	74 16		 je	 SHORT $LN10@BlSingular@5
  00658	83 7d bc 07	 cmp	 DWORD PTR _Type$[ebp], 7
  0065c	74 10		 je	 SHORT $LN10@BlSingular@5
  0065e	83 7d bc 08	 cmp	 DWORD PTR _Type$[ebp], 8
  00662	74 0a		 je	 SHORT $LN10@BlSingular@5
  00664	83 7d bc 0b	 cmp	 DWORD PTR _Type$[ebp], 11 ; 0000000bH
  00668	0f 85 a4 01 00
	00		 jne	 $LN11@BlSingular@5
$LN10@BlSingular@5:

; 1051 : 
; 1052 :             if (Type == BL_MM_PHYSICAL_REGION_SINGULARITY) {

  0066e	83 7d bc 0e	 cmp	 DWORD PTR _Type$[ebp], 14 ; 0000000eH
  00672	75 65		 jne	 SHORT $LN9@BlSingular@5

; 1053 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  00674	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00679	8b 88 00 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3072]
  0067f	6b c9 18	 imul	 ecx, 24			; 00000018H
  00682	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00688	8b 45 c8	 mov	 eax, DWORD PTR _Base$[ebp]
  0068b	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax
  0068e	8b 45 cc	 mov	 eax, DWORD PTR _Base$[ebp+4]
  00691	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 1054 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  00695	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0069b	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  006a1	6b d2 18	 imul	 edx, 24			; 00000018H
  006a4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006a9	8b 4d d8	 mov	 ecx, DWORD PTR _Size$[ebp]
  006ac	89 4c 10 08	 mov	 DWORD PTR [eax+edx+8], ecx
  006b0	8b 4d dc	 mov	 ecx, DWORD PTR _Size$[ebp+4]
  006b3	89 4c 10 0c	 mov	 DWORD PTR [eax+edx+12], ecx

; 1055 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_AVAILABLE;

  006b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006bd	8b 82 00 0c 00
	00		 mov	 eax, DWORD PTR [edx+3072]
  006c3	6b c0 18	 imul	 eax, 24			; 00000018H
  006c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006cc	c7 44 01 10 01
	00 00 00	 mov	 DWORD PTR [ecx+eax+16], 1

; 1056 :             }
; 1057 :             else if (Type == BL_MM_PHYSICAL_REGION_KERNEL_IMAGE ||

  006d4	e9 ed 00 00 00	 jmp	 $LN8@BlSingular@5
$LN9@BlSingular@5:

; 1058 :                       (Type == BL_MM_PHYSICAL_REGION_NATIVE_PLATFORM) ||
; 1059 :                       (Type == BL_MM_PHYSICAL_REGION_NATIVE_PROCESSOR)) {

  006d9	83 7d bc 06	 cmp	 DWORD PTR _Type$[ebp], 6
  006dd	74 0c		 je	 SHORT $LN6@BlSingular@5
  006df	83 7d bc 07	 cmp	 DWORD PTR _Type$[ebp], 7
  006e3	74 06		 je	 SHORT $LN6@BlSingular@5
  006e5	83 7d bc 08	 cmp	 DWORD PTR _Type$[ebp], 8
  006e9	75 62		 jne	 SHORT $LN7@BlSingular@5
$LN6@BlSingular@5:

; 1060 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  006eb	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  006f1	8b 82 00 0c 00
	00		 mov	 eax, DWORD PTR [edx+3072]
  006f7	6b c0 18	 imul	 eax, 24			; 00000018H
  006fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00700	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  00703	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  00706	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  00709	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1061 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  0070d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00712	8b 88 00 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3072]
  00718	6b c9 18	 imul	 ecx, 24			; 00000018H
  0071b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00721	8b 45 d8	 mov	 eax, DWORD PTR _Size$[ebp]
  00724	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
  00728	8b 45 dc	 mov	 eax, DWORD PTR _Size$[ebp+4]
  0072b	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 1062 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_NONGC;

  0072f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00735	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  0073b	6b d2 18	 imul	 edx, 24			; 00000018H
  0073e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00743	c7 44 10 10 06
	00 00 00	 mov	 DWORD PTR [eax+edx+16], 6
  0074b	eb 79		 jmp	 SHORT $LN8@BlSingular@5
$LN7@BlSingular@5:

; 1063 :             }
; 1064 :             else if (Type == BL_MM_PHYSICAL_REGION_KERNEL_STACK) {

  0074d	83 7d bc 0b	 cmp	 DWORD PTR _Type$[ebp], 11 ; 0000000bH
  00751	75 62		 jne	 SHORT $LN4@BlSingular@5

; 1065 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  00753	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00759	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  0075f	6b d2 18	 imul	 edx, 24			; 00000018H
  00762	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00767	8b 4d c8	 mov	 ecx, DWORD PTR _Base$[ebp]
  0076a	89 0c 10	 mov	 DWORD PTR [eax+edx], ecx
  0076d	8b 4d cc	 mov	 ecx, DWORD PTR _Base$[ebp+4]
  00770	89 4c 10 04	 mov	 DWORD PTR [eax+edx+4], ecx

; 1066 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  00774	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0077a	8b 82 00 0c 00
	00		 mov	 eax, DWORD PTR [edx+3072]
  00780	6b c0 18	 imul	 eax, 24			; 00000018H
  00783	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00789	8b 55 d8	 mov	 edx, DWORD PTR _Size$[ebp]
  0078c	89 54 01 08	 mov	 DWORD PTR [ecx+eax+8], edx
  00790	8b 55 dc	 mov	 edx, DWORD PTR _Size$[ebp+4]
  00793	89 54 01 0c	 mov	 DWORD PTR [ecx+eax+12], edx

; 1067 :                 BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_STACK;

  00797	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0079c	8b 88 00 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3072]
  007a2	6b c9 18	 imul	 ecx, 24			; 00000018H
  007a5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007ab	c7 44 0a 10 07
	00 00 00	 mov	 DWORD PTR [edx+ecx+16], 7

; 1068 :             }
; 1069 :             else {

  007b3	eb 11		 jmp	 SHORT $LN8@BlSingular@5
$LN4@BlSingular@5:

; 1070 :                 BlRtlPrintf("UNKNOWN TYPE MEMORY??? %d\n", Type);

  007b5	8b 45 bc	 mov	 eax, DWORD PTR _Type$[ebp]
  007b8	50		 push	 eax
  007b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@JBGMGGOL@UNKNOWN?5TYPE?5MEMORY?$DP?$DP?$DP?5?$CFd?6?$AA@
  007be	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  007c3	83 c4 08	 add	 esp, 8
$LN8@BlSingular@5:

; 1071 :             }
; 1072 :             if (Base < BlPlatform->PhysicalBase) {

  007c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  007cc	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  007cf	33 c0		 xor	 eax, eax
  007d1	89 55 a0	 mov	 DWORD PTR tv632[ebp], edx
  007d4	89 45 a4	 mov	 DWORD PTR tv632[ebp+4], eax
  007d7	8b 4d cc	 mov	 ecx, DWORD PTR _Base$[ebp+4]
  007da	3b 4d a4	 cmp	 ecx, DWORD PTR tv632[ebp+4]
  007dd	77 16		 ja	 SHORT $LN2@BlSingular@5
  007df	72 08		 jb	 SHORT $LN29@BlSingular@5
  007e1	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  007e4	3b 55 a0	 cmp	 edx, DWORD PTR tv632[ebp]
  007e7	73 0c		 jae	 SHORT $LN2@BlSingular@5
$LN29@BlSingular@5:

; 1073 :                 BlPlatform->PhysicalBase = (ULONG_PTR) Base;

  007e9	8b 45 c8	 mov	 eax, DWORD PTR _Base$[ebp]
  007ec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  007f2	89 41 30	 mov	 DWORD PTR [ecx+48], eax
$LN2@BlSingular@5:

; 1074 :             }
; 1075 :             BlSingularitySmap->EntryCount += 1;

  007f5	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  007fb	8b 82 00 0c 00
	00		 mov	 eax, DWORD PTR [edx+3072]
  00801	83 c0 01	 add	 eax, 1
  00804	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0080a	89 81 00 0c 00
	00		 mov	 DWORD PTR [ecx+3072], eax

; 1076 :         }
; 1077 :         else {

  00810	eb 7a		 jmp	 SHORT $LN1@BlSingular@5
$LN11@BlSingular@5:

; 1078 : #if MM_VERBOSE
; 1079 :             BlRtlPrintf("Building SMAP marking type %s nongc\n", BlMmPhysicalRegionTypeString(Type));
; 1080 : #endif
; 1081 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Base = Base;

  00812	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00818	8b 82 00 0c 00
	00		 mov	 eax, DWORD PTR [edx+3072]
  0081e	6b c0 18	 imul	 eax, 24			; 00000018H
  00821	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00827	8b 55 c8	 mov	 edx, DWORD PTR _Base$[ebp]
  0082a	89 14 01	 mov	 DWORD PTR [ecx+eax], edx
  0082d	8b 55 cc	 mov	 edx, DWORD PTR _Base$[ebp+4]
  00830	89 54 01 04	 mov	 DWORD PTR [ecx+eax+4], edx

; 1082 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Size = Size;

  00834	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00839	8b 88 00 0c 00
	00		 mov	 ecx, DWORD PTR [eax+3072]
  0083f	6b c9 18	 imul	 ecx, 24			; 00000018H
  00842	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00848	8b 45 d8	 mov	 eax, DWORD PTR _Size$[ebp]
  0084b	89 44 0a 08	 mov	 DWORD PTR [edx+ecx+8], eax
  0084f	8b 45 dc	 mov	 eax, DWORD PTR _Size$[ebp+4]
  00852	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax

; 1083 :             BlSingularitySmap->Entry[BlSingularitySmap->EntryCount].Type = BL_SMAP_KERNEL_NONGC;

  00856	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0085c	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  00862	6b d2 18	 imul	 edx, 24			; 00000018H
  00865	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0086a	c7 44 10 10 06
	00 00 00	 mov	 DWORD PTR [eax+edx+16], 6

; 1084 :             BlSingularitySmap->EntryCount += 1;

  00872	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00878	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  0087e	83 c2 01	 add	 edx, 1
  00881	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  00886	89 90 00 0c 00
	00		 mov	 DWORD PTR [eax+3072], edx
$LN1@BlSingular@5:

; 1085 :         }
; 1086 :     }

  0088c	e9 9d fd ff ff	 jmp	 $LN13@BlSingular@5
$LN12@BlSingular@5:

; 1087 : 
; 1088 :     BlPlatform->Smap32 = (ULONG_PTR) (PVOID) BlSingularitySmap->Entry;

  00891	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00897	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  0089d	89 51 28	 mov	 DWORD PTR [ecx+40], edx

; 1089 :     BlPlatform->SmapCount = BlSingularitySmap->EntryCount;

  008a0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  008a5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlSingularitySmap@@3PAU_BL_SMAP@@A ; BlSingularitySmap
  008ab	8b 91 00 0c 00
	00		 mov	 edx, DWORD PTR [ecx+3072]
  008b1	89 50 2c	 mov	 DWORD PTR [eax+44], edx

; 1090 : 
; 1091 : #if MM_VERBOSE
; 1092 : 
; 1093 :     BlMmDumpPhysicalRegionList();
; 1094 : 
; 1095 : #endif
; 1096 : 
; 1097 :     //
; 1098 :     // Start processor 0.
; 1099 :     //
; 1100 : 
; 1101 :     BlSingularityProcessorToStart = 0;

  008b4	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, 0 ; BlSingularityProcessorToStart

; 1102 : 
; 1103 :     BlMmSwitchStack((PVOID) BlProcessor[0].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  008be	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  008c3	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008c6	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  008cb	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  008ce	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 1104 : 
; 1105 :     return;
; 1106 : }

  008d3	8b e5		 mov	 esp, ebp
  008d5	5d		 pop	 ebp
  008d6	c2 04 00	 ret	 4
?BlSingularityInitialize@@YIXKPAU_FAR_POINTER@@0@Z ENDP	; BlSingularityInitialize
_TEXT	ENDS
PUBLIC	?BlSingularityApEntry@@YIXXZ			; BlSingularityApEntry
; Function compile flags: /Odtp
;	COMDAT ?BlSingularityApEntry@@YIXXZ
_TEXT	SEGMENT
_Index$ = -8						; size = 4
?BlSingularityApEntry@@YIXXZ PROC			; BlSingularityApEntry, COMDAT

; 1121 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 1122 :     UINT32 Index;
; 1123 : 
; 1124 :     UINT8 MyIdChar;
; 1125 :     UINT32 MyId;
; 1126 :     UINT32 MyStack;
; 1127 :     Class_Microsoft_Singularity_Hal_Cpu *Processor;
; 1128 :     //    BlRtlPrintf("In Ap Entry\n");
; 1129 : 
; 1130 :     //    BlRtlPrintf("Non AP processor booting\n");
; 1131 :     Index = BlPlatform->MpBootInfo.TargetCpu;

  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0000b	8b 88 c1 01 00
	00		 mov	 ecx, DWORD PTR [eax+449]
  00011	89 4d f8	 mov	 DWORD PTR _Index$[ebp], ecx

; 1132 : 
; 1133 :     if (Index == 0) {

  00014	83 7d f8 00	 cmp	 DWORD PTR _Index$[ebp], 0
  00018	75 0f		 jne	 SHORT $LN1@BlSingular@6

; 1134 : 
; 1135 :         // BlRtlPrintf("BL: BSP entered AP code!\n");
; 1136 :         BlRtlHalt();

  0001a	ba 70 04 00 00	 mov	 edx, 1136		; 00000470H
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BC@LLHHECHP@blsingularity?4cpp?$AA@
  00024	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN1@BlSingular@6:

; 1137 :     }
; 1138 : 
; 1139 : #if SINGULARITY_VERBOSE
; 1140 : 
; 1141 :     BlRtlPrintf("BL: Initializing processor %u of %u. [Max=%u]\n",
; 1142 :                 Index + 1,
; 1143 :                 BlPlatform->CpuRealCount,
; 1144 :                 BlPlatform->CpuMaxCount);
; 1145 : 
; 1146 : #endif
; 1147 : 
; 1148 :     BlProcessor[Index].KernelStack = (PVOID) BlPlatform->MpBootInfo.KernelStackLimit;

  00029	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  0002c	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  0003a	8b 89 bd 01 00
	00		 mov	 ecx, DWORD PTR [ecx+445]
  00040	89 4c 10 08	 mov	 DWORD PTR [eax+edx+8], ecx

; 1149 :     BlProcessor[Index].Cpu->DomainBsp = FALSE;

  00044	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  00047	6b d2 1c	 imul	 edx, 28			; 0000001cH
  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0004f	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00053	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1150 :     BlProcessor[Index].KernelStackSize = BlPlatform->MpBootInfo.KernelStackBegin - BlPlatform->MpBootInfo.KernelStackLimit;

  0005a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00060	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlPlatform@@3PAUClass_Microsoft_Singularity_Hal_Platform@@A ; BlPlatform
  00065	8b 8a b5 01 00
	00		 mov	 ecx, DWORD PTR [edx+437]
  0006b	2b 88 bd 01 00
	00		 sub	 ecx, DWORD PTR [eax+445]
  00071	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  00074	6b d2 1c	 imul	 edx, 28			; 0000001cH
  00077	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0007c	89 4c 10 0c	 mov	 DWORD PTR [eax+edx+12], ecx

; 1151 : 
; 1152 :     BlSingularityInitializeProcessor(Index);

  00080	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  00083	e8 00 00 00 00	 call	 ?BlSingularityInitializeProcessor@@YIXK@Z ; BlSingularityInitializeProcessor

; 1153 : 
; 1154 :     BlSingularityProcessorToStart = Index;

  00088	8b 4d f8	 mov	 ecx, DWORD PTR _Index$[ebp]
  0008b	89 0d 00 00 00
	00		 mov	 DWORD PTR ?BlSingularityProcessorToStart@@3KA, ecx ; BlSingularityProcessorToStart

; 1155 : 
; 1156 :     BlMmSwitchStack((PVOID) BlProcessor[Index].Cpu->KernelStackBegin, BlSingularityEnterKernel);

  00091	8b 55 f8	 mov	 edx, DWORD PTR _Index$[ebp]
  00094	6b d2 1c	 imul	 edx, 28			; 0000001cH
  00097	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BlProcessor@@3PAU_BL_PROCESSOR@@A ; BlProcessor
  0009c	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  000a0	ba 00 00 00 00	 mov	 edx, OFFSET ?BlSingularityEnterKernel@@YIXXZ ; BlSingularityEnterKernel
  000a5	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000a8	e8 00 00 00 00	 call	 ?BlMmSwitchStack@@YIXPAX0@Z ; BlMmSwitchStack

; 1157 : 
; 1158 :     return;
; 1159 : }

  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?BlSingularityApEntry@@YIXXZ ENDP			; BlSingularityApEntry
_TEXT	ENDS
END
