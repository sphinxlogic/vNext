; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blflash.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
_BlFlashBase DD	01H DUP (?)
_BlFlashImages DD 01H DUP (?)
_BSS	ENDS
PUBLIC	?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z	; BlFlashRecordIsValid
; Function compile flags: /Odtp
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blflash.cpp
;	COMDAT ?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z
_TEXT	SEGMENT
_Current$ = -4						; size = 4
?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z PROC	; BlFlashRecordIsValid, COMDAT
; _Current$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _Current$[ebp], ecx

; 56   :     for (;; Current++) {

  00007	eb 09		 jmp	 SHORT $LN8@BlFlashRec
$LN7@BlFlashRec:
  00009	8b 45 fc	 mov	 eax, DWORD PTR _Current$[ebp]
  0000c	83 c0 0c	 add	 eax, 12			; 0000000cH
  0000f	89 45 fc	 mov	 DWORD PTR _Current$[ebp], eax
$LN8@BlFlashRec:

; 57   :         if ((Current->DataOffset == 0xffffffff && Current->Size == 0xffffffff) ||
; 58   :             (Current->DataOffset == 0 && Current->Size == 0)) {

  00012	8b 4d fc	 mov	 ecx, DWORD PTR _Current$[ebp]
  00015	83 79 04 ff	 cmp	 DWORD PTR [ecx+4], -1
  00019	75 09		 jne	 SHORT $LN3@BlFlashRec
  0001b	8b 55 fc	 mov	 edx, DWORD PTR _Current$[ebp]
  0001e	83 7a 08 ff	 cmp	 DWORD PTR [edx+8], -1
  00022	74 12		 je	 SHORT $LN4@BlFlashRec
$LN3@BlFlashRec:
  00024	8b 45 fc	 mov	 eax, DWORD PTR _Current$[ebp]
  00027	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  0002b	75 0d		 jne	 SHORT $LN5@BlFlashRec
  0002d	8b 4d fc	 mov	 ecx, DWORD PTR _Current$[ebp]
  00030	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00034	75 04		 jne	 SHORT $LN5@BlFlashRec
$LN4@BlFlashRec:

; 59   :             continue;

  00036	eb d1		 jmp	 SHORT $LN7@BlFlashRec
  00038	eb 16		 jmp	 SHORT $LN2@BlFlashRec
$LN5@BlFlashRec:

; 60   :         }
; 61   :         else if (Current->DataOffset == 0xffffffff && Current->Size == 0) {

  0003a	8b 55 fc	 mov	 edx, DWORD PTR _Current$[ebp]
  0003d	83 7a 04 ff	 cmp	 DWORD PTR [edx+4], -1
  00041	75 0d		 jne	 SHORT $LN2@BlFlashRec
  00043	8b 45 fc	 mov	 eax, DWORD PTR _Current$[ebp]
  00046	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0004a	75 04		 jne	 SHORT $LN2@BlFlashRec

; 62   :             return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 07		 jmp	 SHORT $LN9@BlFlashRec
$LN2@BlFlashRec:

; 63   :         }
; 64   :         return Current;

  00050	8b 45 fc	 mov	 eax, DWORD PTR _Current$[ebp]
  00053	eb 02		 jmp	 SHORT $LN9@BlFlashRec

; 65   :     }

  00055	eb b2		 jmp	 SHORT $LN7@BlFlashRec
$LN9@BlFlashRec:

; 66   : }

  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z ENDP	; BlFlashRecordIsValid
_TEXT	ENDS
PUBLIC	?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z	; BlFlashFindFile
EXTRN	?BlRtlEqualStringI@@YIEPBD0@Z:PROC		; BlRtlEqualStringI
; Function compile flags: /Odtp
;	COMDAT ?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z
_TEXT	SEGMENT
_Path$ = -8						; size = 4
_File$3311 = -4						; size = 4
?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z PROC		; BlFlashFindFile, COMDAT
; _Path$ = ecx

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d f8	 mov	 DWORD PTR _Path$[ebp], ecx

; 91   :     for (FLASH_FILE *File = BlFlashImages; File != NULL; File = BlFlashRecordIsValid(File + 1)) {

  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR _BlFlashImages
  0000e	89 45 fc	 mov	 DWORD PTR _File$3311[ebp], eax
  00011	eb 0e		 jmp	 SHORT $LN4@BlFlashFin
$LN3@BlFlashFin:
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _File$3311[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e8 00 00 00 00	 call	 ?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z ; BlFlashRecordIsValid
  0001e	89 45 fc	 mov	 DWORD PTR _File$3311[ebp], eax
$LN4@BlFlashFin:
  00021	83 7d fc 00	 cmp	 DWORD PTR _File$3311[ebp], 0
  00025	74 21		 je	 SHORT $LN2@BlFlashFin

; 92   :         if (BlRtlEqualStringI(Path, (PCSTR)(BlFlashBase + File->PathOffset))) {

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _File$3311[ebp]
  0002a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _BlFlashBase
  00030	03 11		 add	 edx, DWORD PTR [ecx]
  00032	8b 4d f8	 mov	 ecx, DWORD PTR _Path$[ebp]
  00035	e8 00 00 00 00	 call	 ?BlRtlEqualStringI@@YIEPBD0@Z ; BlRtlEqualStringI
  0003a	0f b6 d0	 movzx	 edx, al
  0003d	85 d2		 test	 edx, edx
  0003f	74 05		 je	 SHORT $LN1@BlFlashFin

; 93   :             return File;

  00041	8b 45 fc	 mov	 eax, DWORD PTR _File$3311[ebp]
  00044	eb 04		 jmp	 SHORT $LN5@BlFlashFin
$LN1@BlFlashFin:

; 94   :         }
; 95   :     }

  00046	eb cb		 jmp	 SHORT $LN3@BlFlashFin
$LN2@BlFlashFin:

; 96   :     return NULL;

  00048	33 c0		 xor	 eax, eax
$LN5@BlFlashFin:

; 97   : }

  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z ENDP		; BlFlashFindFile
_TEXT	ENDS
PUBLIC	?BlFlashGetFileSize@@YIEPBDPAK@Z		; BlFlashGetFileSize
; Function compile flags: /Odtp
;	COMDAT ?BlFlashGetFileSize@@YIEPBDPAK@Z
_TEXT	SEGMENT
_FileSize$ = -12					; size = 4
_Path$ = -8						; size = 4
_File$ = -4						; size = 4
?BlFlashGetFileSize@@YIEPBDPAK@Z PROC			; BlFlashGetFileSize, COMDAT
; _Path$ = ecx
; _FileSize$ = edx

; 125  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 55 f4	 mov	 DWORD PTR _FileSize$[ebp], edx
  00009	89 4d f8	 mov	 DWORD PTR _Path$[ebp], ecx

; 126  :     FLASH_FILE * File = BlFlashFindFile(Path);

  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _Path$[ebp]
  0000f	e8 00 00 00 00	 call	 ?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z ; BlFlashFindFile
  00014	89 45 fc	 mov	 DWORD PTR _File$[ebp], eax

; 127  : 
; 128  :     if (File != NULL) {

  00017	83 7d fc 00	 cmp	 DWORD PTR _File$[ebp], 0
  0001b	74 0f		 je	 SHORT $LN1@BlFlashGet

; 129  : 
; 130  :         *FileSize = File->Size;

  0001d	8b 45 f4	 mov	 eax, DWORD PTR _FileSize$[ebp]
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _File$[ebp]
  00023	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00026	89 10		 mov	 DWORD PTR [eax], edx

; 131  : 
; 132  :         return TRUE;

  00028	b0 01		 mov	 al, 1
  0002a	eb 02		 jmp	 SHORT $LN2@BlFlashGet
$LN1@BlFlashGet:

; 133  : 
; 134  :     }
; 135  : 
; 136  :     return FALSE;

  0002c	32 c0		 xor	 al, al
$LN2@BlFlashGet:

; 137  : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?BlFlashGetFileSize@@YIEPBDPAK@Z ENDP			; BlFlashGetFileSize
_TEXT	ENDS
PUBLIC	?BlFlashReadFile@@YIEPBDPAXK@Z			; BlFlashReadFile
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
; Function compile flags: /Odtp
;	COMDAT ?BlFlashReadFile@@YIEPBDPAXK@Z
_TEXT	SEGMENT
_Buffer$ = -12						; size = 4
_Path$ = -8						; size = 4
_File$ = -4						; size = 4
_NumberOfBytes$ = 8					; size = 4
?BlFlashReadFile@@YIEPBDPAXK@Z PROC			; BlFlashReadFile, COMDAT
; _Path$ = ecx
; _Buffer$ = edx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 55 f4	 mov	 DWORD PTR _Buffer$[ebp], edx
  00009	89 4d f8	 mov	 DWORD PTR _Path$[ebp], ecx

; 167  :     (void)Path;
; 168  :     (void)NumberOfBytes;
; 169  :     (void)Buffer;
; 170  : 
; 171  :     FLASH_FILE * File = BlFlashFindFile(Path);

  0000c	8b 4d f8	 mov	 ecx, DWORD PTR _Path$[ebp]
  0000f	e8 00 00 00 00	 call	 ?BlFlashFindFile@@YIPAUFLASH_FILE@@PBD@Z ; BlFlashFindFile
  00014	89 45 fc	 mov	 DWORD PTR _File$[ebp], eax

; 172  : 
; 173  :     if (File != NULL) {

  00017	83 7d fc 00	 cmp	 DWORD PTR _File$[ebp], 0
  0001b	74 1c		 je	 SHORT $LN1@BlFlashRea

; 174  : 
; 175  :         BlRtlCopyMemory(Buffer, BlFlashBase + File->DataOffset, NumberOfBytes);

  0001d	8b 45 08	 mov	 eax, DWORD PTR _NumberOfBytes$[ebp]
  00020	50		 push	 eax
  00021	8b 4d fc	 mov	 ecx, DWORD PTR _File$[ebp]
  00024	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _BlFlashBase
  0002a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00030	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 176  : 
; 177  :         return TRUE;

  00035	b0 01		 mov	 al, 1
  00037	eb 02		 jmp	 SHORT $LN2@BlFlashRea
$LN1@BlFlashRea:

; 178  :     }
; 179  : 
; 180  :     return FALSE;

  00039	32 c0		 xor	 al, al
$LN2@BlFlashRea:

; 181  : }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?BlFlashReadFile@@YIEPBDPAXK@Z ENDP			; BlFlashReadFile
_TEXT	ENDS
PUBLIC	??_C@_0CA@KKIDKAPN@?9?9?9?5Version?5?$CFx?4?$CFx?5didn?8t?5match?6?$AA@ ; `string'
PUBLIC	??_C@_0BC@KHBDDADI@SingularityFlash?$CB?$AA@	; `string'
PUBLIC	?BlFlashInitialize@@YIXPAX0@Z			; BlFlashInitialize
EXTRN	?BlFsReadFile@@3P6IEPBDPAXK@ZA:DWORD		; BlFsReadFile
EXTRN	?BlFsGetFileSize@@3P6IEPBDPAK@ZA:DWORD		; BlFsGetFileSize
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
;	COMDAT ??_C@_0CA@KKIDKAPN@?9?9?9?5Version?5?$CFx?4?$CFx?5didn?8t?5match?6?$AA@
CONST	SEGMENT
??_C@_0CA@KKIDKAPN@?9?9?9?5Version?5?$CFx?4?$CFx?5didn?8t?5match?6?$AA@ DB '-'
	DB	'-- Version %x.%x didn''t match', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KHBDDADI@SingularityFlash?$CB?$AA@
CONST	SEGMENT
??_C@_0BC@KHBDDADI@SingularityFlash?$CB?$AA@ DB 'SingularityFlash!', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlFlashInitialize@@YIXPAX0@Z
_TEXT	SEGMENT
_SearchLimit$ = -12					; size = 4
_SearchBegin$ = -8					; size = 4
_Search$3337 = -4					; size = 4
?BlFlashInitialize@@YIXPAX0@Z PROC			; BlFlashInitialize, COMDAT
; _SearchBegin$ = ecx
; _SearchLimit$ = edx

; 188  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 55 f4	 mov	 DWORD PTR _SearchLimit$[ebp], edx
  00009	89 4d f8	 mov	 DWORD PTR _SearchBegin$[ebp], ecx

; 189  :     // walk through at 64KB boundaries looking for flash image.
; 190  :     for (FLASH_HEADER * Search = (FLASH_HEADER *)SearchBegin;

  0000c	8b 45 f8	 mov	 eax, DWORD PTR _SearchBegin$[ebp]
  0000f	89 45 fc	 mov	 DWORD PTR _Search$3337[ebp], eax

; 191  :          Search <= (FLASH_HEADER *)SearchLimit;

  00012	eb 0c		 jmp	 SHORT $LN9@BlFlashIni
$LN8@BlFlashIni:

; 192  :          Search = (FLASH_HEADER *)(((PUINT8)Search) + 0x10000)) {

  00014	8b 4d fc	 mov	 ecx, DWORD PTR _Search$3337[ebp]
  00017	81 c1 00 00 01
	00		 add	 ecx, 65536		; 00010000H
  0001d	89 4d fc	 mov	 DWORD PTR _Search$3337[ebp], ecx
$LN9@BlFlashIni:
  00020	8b 55 fc	 mov	 edx, DWORD PTR _Search$3337[ebp]
  00023	3b 55 f4	 cmp	 edx, DWORD PTR _SearchLimit$[ebp]
  00026	0f 87 91 00 00
	00		 ja	 $LN7@BlFlashIni

; 193  : 
; 194  :         if (!BlRtlEqualStringI((PCSTR)Search->Label, "SingularityFlash!")) {

  0002c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BC@KHBDDADI@SingularityFlash?$CB?$AA@
  00031	8b 4d fc	 mov	 ecx, DWORD PTR _Search$3337[ebp]
  00034	e8 00 00 00 00	 call	 ?BlRtlEqualStringI@@YIEPBD0@Z ; BlRtlEqualStringI
  00039	0f b6 c0	 movzx	 eax, al
  0003c	85 c0		 test	 eax, eax
  0003e	75 02		 jne	 SHORT $LN6@BlFlashIni

; 195  :             continue;

  00040	eb d2		 jmp	 SHORT $LN8@BlFlashIni
$LN6@BlFlashIni:

; 196  :         }
; 197  :         if (Search->HeadSize != sizeof(FLASH_HEADER)) {

  00042	8b 4d fc	 mov	 ecx, DWORD PTR _Search$3337[ebp]
  00045	0f b6 51 12	 movzx	 edx, BYTE PTR [ecx+18]
  00049	83 fa 20	 cmp	 edx, 32			; 00000020H
  0004c	74 02		 je	 SHORT $LN5@BlFlashIni

; 198  :             continue;

  0004e	eb c4		 jmp	 SHORT $LN8@BlFlashIni
$LN5@BlFlashIni:

; 199  :         }
; 200  :         if (Search->SpecSize != sizeof(FLASH_FILE)) {

  00050	8b 45 fc	 mov	 eax, DWORD PTR _Search$3337[ebp]
  00053	0f b6 48 13	 movzx	 ecx, BYTE PTR [eax+19]
  00057	83 f9 0c	 cmp	 ecx, 12			; 0000000cH
  0005a	74 02		 je	 SHORT $LN4@BlFlashIni

; 201  :             continue;

  0005c	eb b6		 jmp	 SHORT $LN8@BlFlashIni
$LN4@BlFlashIni:

; 202  :         }
; 203  :         if (Search->MajorVersion != ~0u || Search->MinorVersion != ~0u) {

  0005e	8b 55 fc	 mov	 edx, DWORD PTR _Search$3337[ebp]
  00061	83 7a 18 ff	 cmp	 DWORD PTR [edx+24], -1
  00065	75 09		 jne	 SHORT $LN2@BlFlashIni
  00067	8b 45 fc	 mov	 eax, DWORD PTR _Search$3337[ebp]
  0006a	83 78 1c ff	 cmp	 DWORD PTR [eax+28], -1
  0006e	74 1d		 je	 SHORT $LN3@BlFlashIni
$LN2@BlFlashIni:

; 204  :             BlRtlPrintf("--- Version %x.%x didn't match\n",
; 205  :                         Search->MajorVersion, Search->MinorVersion);

  00070	8b 4d fc	 mov	 ecx, DWORD PTR _Search$3337[ebp]
  00073	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00076	52		 push	 edx
  00077	8b 45 fc	 mov	 eax, DWORD PTR _Search$3337[ebp]
  0007a	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0007d	51		 push	 ecx
  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KKIDKAPN@?9?9?9?5Version?5?$CFx?4?$CFx?5didn?8t?5match?6?$AA@
  00083	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH

; 206  :             continue;

  0008b	eb 87		 jmp	 SHORT $LN8@BlFlashIni
$LN3@BlFlashIni:

; 207  :         }
; 208  :         if (Search->PageSize != 0x1000) {

  0008d	8b 55 fc	 mov	 edx, DWORD PTR _Search$3337[ebp]
  00090	81 7a 14 00 10
	00 00		 cmp	 DWORD PTR [edx+20], 4096 ; 00001000H
  00097	74 05		 je	 SHORT $LN1@BlFlashIni

; 209  :             continue;

  00099	e9 76 ff ff ff	 jmp	 $LN8@BlFlashIni
$LN1@BlFlashIni:

; 210  :         }
; 211  : 
; 212  :         BlFlashBase = (PUINT8)Search;

  0009e	8b 45 fc	 mov	 eax, DWORD PTR _Search$3337[ebp]
  000a1	a3 00 00 00 00	 mov	 DWORD PTR _BlFlashBase, eax

; 213  :         BlFlashImages = BlFlashRecordIsValid((FLASH_FILE *)(Search + 1));

  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _Search$3337[ebp]
  000a9	83 c1 20	 add	 ecx, 32			; 00000020H
  000ac	e8 00 00 00 00	 call	 ?BlFlashRecordIsValid@@YIPAUFLASH_FILE@@PAU1@@Z ; BlFlashRecordIsValid
  000b1	a3 00 00 00 00	 mov	 DWORD PTR _BlFlashImages, eax

; 214  :         break;

  000b6	eb 05		 jmp	 SHORT $LN7@BlFlashIni

; 215  :     }

  000b8	e9 57 ff ff ff	 jmp	 $LN8@BlFlashIni
$LN7@BlFlashIni:

; 216  : 
; 217  :     BlFsGetFileSize = BlFlashGetFileSize;

  000bd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsGetFileSize@@3P6IEPBDPAK@ZA, OFFSET ?BlFlashGetFileSize@@YIEPBDPAK@Z ; BlFsGetFileSize, BlFlashGetFileSize

; 218  :     BlFsReadFile = BlFlashReadFile;

  000c7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BlFsReadFile@@3P6IEPBDPAXK@ZA, OFFSET ?BlFlashReadFile@@YIEPBDPAXK@Z ; BlFsReadFile, BlFlashReadFile

; 219  : }

  000d1	8b e5		 mov	 esp, ebp
  000d3	5d		 pop	 ebp
  000d4	c3		 ret	 0
?BlFlashInitialize@@YIXPAX0@Z ENDP			; BlFlashInitialize
_TEXT	ENDS
END
