; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blcom.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlComBasePort@@3QBGB				; BlComBasePort
CONST	SEGMENT
?BlComBasePort@@3QBGB DW 00H				; BlComBasePort
	DW	03f8H
	DW	02f8H
	DW	03e8H
	DW	02e8H
CONST	ENDS
PUBLIC	??_C@_09MIGMGOIK@blcom?4cpp?$AA@		; `string'
PUBLIC	?BlComInitialize@@YIEEK@Z			; BlComInitialize
EXTRN	?BlRtlReadPort8@@YIEG@Z:PROC			; BlRtlReadPort8
EXTRN	?BlRtlWritePort8@@YIXGE@Z:PROC			; BlRtlWritePort8
EXTRN	?BlRtlAssertFailed@@YIXPBDK@Z:PROC		; BlRtlAssertFailed
;	COMDAT ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blcom.cpp
CONST	SEGMENT
??_C@_09MIGMGOIK@blcom?4cpp?$AA@ DB 'blcom.cpp', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlComInitialize@@YIEEK@Z
_TEXT	SEGMENT
_BaudRate$ = -24					; size = 4
_PortNumber$ = -20					; size = 1
_Base$ = -16						; size = 2
_Status$ = -9						; size = 1
_Divisor$ = -8						; size = 2
_Index$ = -1						; size = 1
?BlComInitialize@@YIEEK@Z PROC				; BlComInitialize, COMDAT
; _PortNumber$ = cl
; _BaudRate$ = edx

; 82   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 55 e8	 mov	 DWORD PTR _BaudRate$[ebp], edx
  00009	88 4d ec	 mov	 BYTE PTR _PortNumber$[ebp], cl

; 83   :     UINT16 Base;
; 84   :     UINT16 Divisor;
; 85   :     UINT8 Index;
; 86   :     UINT8 Status;
; 87   : 
; 88   :     BLASSERT((PortNumber >= 1) && (PortNumber <= COM_MAX_PORT));

  0000c	0f b6 45 ec	 movzx	 eax, BYTE PTR _PortNumber$[ebp]
  00010	83 f8 01	 cmp	 eax, 1
  00013	7c 09		 jl	 SHORT $LN10@BlComIniti
  00015	0f b6 4d ec	 movzx	 ecx, BYTE PTR _PortNumber$[ebp]
  00019	83 f9 04	 cmp	 ecx, 4
  0001c	7e 0f		 jle	 SHORT $LN11@BlComIniti
$LN10@BlComIniti:
  0001e	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00028	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN11@BlComIniti:

; 89   : 
; 90   :     BLASSERT(BaudRate != 0);

  0002d	83 7d e8 00	 cmp	 DWORD PTR _BaudRate$[ebp], 0
  00031	75 0f		 jne	 SHORT $LN9@BlComIniti
  00033	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  0003d	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN9@BlComIniti:

; 91   : 
; 92   :     BLASSERT(BaudRate <= COM_CLOCK_RATE);

  00042	81 7d e8 00 c2
	01 00		 cmp	 DWORD PTR _BaudRate$[ebp], 115200 ; 0001c200H
  00049	76 0f		 jbe	 SHORT $LN8@BlComIniti
  0004b	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  00050	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00055	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN8@BlComIniti:

; 93   : 
; 94   :     BLASSERT((COM_CLOCK_RATE % BaudRate) == 0);

  0005a	b8 00 c2 01 00	 mov	 eax, 115200		; 0001c200H
  0005f	33 d2		 xor	 edx, edx
  00061	f7 75 e8	 div	 DWORD PTR _BaudRate$[ebp]
  00064	85 d2		 test	 edx, edx
  00066	74 0f		 je	 SHORT $LN7@BlComIniti
  00068	ba 5e 00 00 00	 mov	 edx, 94			; 0000005eH
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00072	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN7@BlComIniti:

; 95   : 
; 96   :     BLASSERT((COM_CLOCK_RATE / BaudRate) <= 0x10000);

  00077	b8 00 c2 01 00	 mov	 eax, 115200		; 0001c200H
  0007c	33 d2		 xor	 edx, edx
  0007e	f7 75 e8	 div	 DWORD PTR _BaudRate$[ebp]
  00081	3d 00 00 01 00	 cmp	 eax, 65536		; 00010000H
  00086	76 0f		 jbe	 SHORT $LN6@BlComIniti
  00088	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0008d	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00092	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN6@BlComIniti:

; 97   : 
; 98   :     Base = BlComBasePort[PortNumber];

  00097	0f b6 55 ec	 movzx	 edx, BYTE PTR _PortNumber$[ebp]
  0009b	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR ?BlComBasePort@@3QBGB[edx*2]
  000a3	66 89 45 f0	 mov	 WORD PTR _Base$[ebp], ax

; 99   : 
; 100  :     BlRtlWritePort8(Base + COM_LINE_CONTROL_REGISTER, 0);

  000a7	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  000ab	83 c1 03	 add	 ecx, 3
  000ae	32 d2		 xor	 dl, dl
  000b0	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 101  :     BlRtlWritePort8(Base + COM_INTERRUPT_ENABLE_REGISTER, 0);

  000b5	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  000b9	83 c1 01	 add	 ecx, 1
  000bc	32 d2		 xor	 dl, dl
  000be	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 102  :     BlRtlWritePort8(Base + COM_MODEM_CONTROL_REGISTER, COM_MODEM_CONTROL_DATA_TERMINAL_READY | COM_MODEM_CONTROL_REQUEST_TO_SEND);

  000c3	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  000c7	83 c1 04	 add	 ecx, 4
  000ca	b2 03		 mov	 dl, 3
  000cc	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 103  : 
; 104  :     Divisor = (UINT16) (COM_CLOCK_RATE / BaudRate);

  000d1	b8 00 c2 01 00	 mov	 eax, 115200		; 0001c200H
  000d6	33 d2		 xor	 edx, edx
  000d8	f7 75 e8	 div	 DWORD PTR _BaudRate$[ebp]
  000db	66 89 45 f8	 mov	 WORD PTR _Divisor$[ebp], ax

; 105  : 
; 106  :     BlRtlWritePort8(Base + COM_LINE_CONTROL_REGISTER, COM_LINE_CONTROL_DIVISOR_ACCESS);

  000df	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  000e3	83 c1 03	 add	 ecx, 3
  000e6	b2 80		 mov	 dl, 128			; 00000080H
  000e8	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 107  :     BlRtlWritePort8(Base + COM_DIVISOR_LATCH_REGISTER_LOW, (UINT8) (Divisor & 0xFF));

  000ed	0f b7 55 f8	 movzx	 edx, WORD PTR _Divisor$[ebp]
  000f1	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000f7	8b 4d f0	 mov	 ecx, DWORD PTR _Base$[ebp]
  000fa	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 108  :     BlRtlWritePort8(Base + COM_DIVISOR_LATCH_REGISTER_HIGH, (UINT8) (Divisor >> 8));

  000ff	0f b7 55 f8	 movzx	 edx, WORD PTR _Divisor$[ebp]
  00103	c1 fa 08	 sar	 edx, 8
  00106	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  0010a	83 c1 01	 add	 ecx, 1
  0010d	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 109  : 
; 110  :     BlRtlWritePort8(Base + COM_LINE_CONTROL_REGISTER, COM_LINE_CONTROL_8BITS_1STOP);

  00112	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  00116	83 c1 03	 add	 ecx, 3
  00119	b2 03		 mov	 dl, 3
  0011b	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 111  : 
; 112  :     Index = 0;

  00120	c6 45 ff 00	 mov	 BYTE PTR _Index$[ebp], 0
$LN5@BlComIniti:

; 113  : 
; 114  :     do {
; 115  : 
; 116  :         BlRtlWritePort8(Base + COM_SCRATCH_REGISTER, Index);

  00124	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  00128	83 c1 07	 add	 ecx, 7
  0012b	8a 55 ff	 mov	 dl, BYTE PTR _Index$[ebp]
  0012e	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 117  : 
; 118  :         if (BlRtlReadPort8(Base + COM_SCRATCH_REGISTER) != Index) {

  00133	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  00137	83 c1 07	 add	 ecx, 7
  0013a	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  0013f	0f b6 c8	 movzx	 ecx, al
  00142	0f b6 55 ff	 movzx	 edx, BYTE PTR _Index$[ebp]
  00146	3b ca		 cmp	 ecx, edx
  00148	74 04		 je	 SHORT $LN2@BlComIniti

; 119  : 
; 120  :             return FALSE;

  0014a	32 c0		 xor	 al, al
  0014c	eb 33		 jmp	 SHORT $LN12@BlComIniti
$LN2@BlComIniti:

; 121  :         }
; 122  : 
; 123  :         Index += 1;

  0014e	0f b6 45 ff	 movzx	 eax, BYTE PTR _Index$[ebp]
  00152	83 c0 01	 add	 eax, 1
  00155	88 45 ff	 mov	 BYTE PTR _Index$[ebp], al

; 124  : 
; 125  :     } while (Index != 0);

  00158	0f b6 4d ff	 movzx	 ecx, BYTE PTR _Index$[ebp]
  0015c	85 c9		 test	 ecx, ecx
  0015e	75 c4		 jne	 SHORT $LN5@BlComIniti

; 126  : 
; 127  :     Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  00160	0f b7 4d f0	 movzx	 ecx, WORD PTR _Base$[ebp]
  00164	83 c1 05	 add	 ecx, 5
  00167	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  0016c	88 45 f7	 mov	 BYTE PTR _Status$[ebp], al

; 128  : 
; 129  :     if (Status == 0xFF) {

  0016f	0f b6 55 f7	 movzx	 edx, BYTE PTR _Status$[ebp]
  00173	81 fa ff 00 00
	00		 cmp	 edx, 255		; 000000ffH
  00179	75 04		 jne	 SHORT $LN1@BlComIniti

; 130  : 
; 131  :         return FALSE;

  0017b	32 c0		 xor	 al, al
  0017d	eb 02		 jmp	 SHORT $LN12@BlComIniti
$LN1@BlComIniti:

; 132  :     }
; 133  : 
; 134  : #if COM_VERBOSE
; 135  : 
; 136  :     if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 137  : 
; 138  :         BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 139  :     }
; 140  : 
; 141  :     if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 142  : 
; 143  :         BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 144  :     }
; 145  : 
; 146  :     if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 147  : 
; 148  :         BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 149  :     }
; 150  : 
; 151  : #endif
; 152  : 
; 153  :     return TRUE;

  0017f	b0 01		 mov	 al, 1
$LN12@BlComIniti:

; 154  : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
?BlComInitialize@@YIEEK@Z ENDP				; BlComInitialize
_TEXT	ENDS
PUBLIC	?BlComSendByte@@YIEEE@Z				; BlComSendByte
; Function compile flags: /Odtp
;	COMDAT ?BlComSendByte@@YIEEE@Z
_TEXT	SEGMENT
_Byte$ = -16						; size = 1
_PortNumber$ = -12					; size = 1
_Base$ = -8						; size = 2
_Status$ = -1						; size = 1
?BlComSendByte@@YIEEE@Z PROC				; BlComSendByte, COMDAT
; _PortNumber$ = cl
; _Byte$ = dl

; 181  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	88 55 f0	 mov	 BYTE PTR _Byte$[ebp], dl
  00009	88 4d f4	 mov	 BYTE PTR _PortNumber$[ebp], cl

; 182  :     UINT16 Base;
; 183  :     UINT8 Status;
; 184  : 
; 185  :     BLASSERT((PortNumber >= 1) && (PortNumber <= COM_MAX_PORT));

  0000c	0f b6 45 f4	 movzx	 eax, BYTE PTR _PortNumber$[ebp]
  00010	83 f8 01	 cmp	 eax, 1
  00013	7c 09		 jl	 SHORT $LN4@BlComSendB
  00015	0f b6 4d f4	 movzx	 ecx, BYTE PTR _PortNumber$[ebp]
  00019	83 f9 04	 cmp	 ecx, 4
  0001c	7e 0f		 jle	 SHORT $LN5@BlComSendB
$LN4@BlComSendB:
  0001e	ba b9 00 00 00	 mov	 edx, 185		; 000000b9H
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00028	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN5@BlComSendB:

; 186  : 
; 187  :     Base = BlComBasePort[PortNumber];

  0002d	0f b6 55 f4	 movzx	 edx, BYTE PTR _PortNumber$[ebp]
  00031	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR ?BlComBasePort@@3QBGB[edx*2]
  00039	66 89 45 f8	 mov	 WORD PTR _Base$[ebp], ax
$LN3@BlComSendB:

; 188  : 
; 189  :     do {
; 190  : 
; 191  :         Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  0003d	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  00041	83 c1 05	 add	 ecx, 5
  00044	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  00049	88 45 ff	 mov	 BYTE PTR _Status$[ebp], al

; 192  : 
; 193  : #if COM_VERBOSE
; 194  : 
; 195  :         if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 196  : 
; 197  :             BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 198  :         }
; 199  : 
; 200  :         if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 201  : 
; 202  :             BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 203  :         }
; 204  : 
; 205  :         if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 206  : 
; 207  :             BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 208  :         }
; 209  : 
; 210  : #endif
; 211  : 
; 212  :     } while ((Status & COM_LINE_STATUS_SEND_BUFFER_EMPTY) == 0);

  0004c	0f b6 4d ff	 movzx	 ecx, BYTE PTR _Status$[ebp]
  00050	83 e1 20	 and	 ecx, 32			; 00000020H
  00053	74 e8		 je	 SHORT $LN3@BlComSendB

; 213  : 
; 214  :     BlRtlWritePort8(Base + COM_DATA_REGISTER, Byte);

  00055	8a 55 f0	 mov	 dl, BYTE PTR _Byte$[ebp]
  00058	8b 4d f8	 mov	 ecx, DWORD PTR _Base$[ebp]
  0005b	e8 00 00 00 00	 call	 ?BlRtlWritePort8@@YIXGE@Z ; BlRtlWritePort8

; 215  : 
; 216  :     Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  00060	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  00064	83 c1 05	 add	 ecx, 5
  00067	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  0006c	88 45 ff	 mov	 BYTE PTR _Status$[ebp], al

; 217  : 
; 218  : #if COM_VERBOSE
; 219  : 
; 220  :     if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 221  : 
; 222  :         BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 223  :     }
; 224  : 
; 225  :     if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 226  : 
; 227  :         BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 228  :     }
; 229  : 
; 230  :     if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 231  : 
; 232  :         BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 233  :     }
; 234  : 
; 235  : #endif
; 236  : 
; 237  :     return TRUE;

  0006f	b0 01		 mov	 al, 1

; 238  : }

  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
?BlComSendByte@@YIEEE@Z ENDP				; BlComSendByte
_TEXT	ENDS
PUBLIC	?BlComDataAvailable@@YIEE@Z			; BlComDataAvailable
; Function compile flags: /Odtp
;	COMDAT ?BlComDataAvailable@@YIEE@Z
_TEXT	SEGMENT
_PortNumber$ = -12					; size = 1
_Base$ = -8						; size = 2
_Status$ = -1						; size = 1
?BlComDataAvailable@@YIEE@Z PROC			; BlComDataAvailable, COMDAT
; _PortNumber$ = cl

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	88 4d f4	 mov	 BYTE PTR _PortNumber$[ebp], cl

; 263  :     UINT16 Base;
; 264  :     UINT8 Status;
; 265  : 
; 266  :     BLASSERT((PortNumber >= 1) && (PortNumber <= COM_MAX_PORT));

  00009	0f b6 45 f4	 movzx	 eax, BYTE PTR _PortNumber$[ebp]
  0000d	83 f8 01	 cmp	 eax, 1
  00010	7c 09		 jl	 SHORT $LN1@BlComDataA
  00012	0f b6 4d f4	 movzx	 ecx, BYTE PTR _PortNumber$[ebp]
  00016	83 f9 04	 cmp	 ecx, 4
  00019	7e 0f		 jle	 SHORT $LN2@BlComDataA
$LN1@BlComDataA:
  0001b	ba 0a 01 00 00	 mov	 edx, 266		; 0000010aH
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00025	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN2@BlComDataA:

; 267  : 
; 268  :     Base = BlComBasePort[PortNumber];

  0002a	0f b6 55 f4	 movzx	 edx, BYTE PTR _PortNumber$[ebp]
  0002e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR ?BlComBasePort@@3QBGB[edx*2]
  00036	66 89 45 f8	 mov	 WORD PTR _Base$[ebp], ax

; 269  : 
; 270  :     Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  0003a	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  0003e	83 c1 05	 add	 ecx, 5
  00041	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  00046	88 45 ff	 mov	 BYTE PTR _Status$[ebp], al

; 271  : 
; 272  : #if COM_VERBOSE
; 273  : 
; 274  :     if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 275  : 
; 276  :         BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 277  :     }
; 278  : 
; 279  :     if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 280  : 
; 281  :         BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 282  :     }
; 283  : 
; 284  :     if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 285  : 
; 286  :         BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 287  :     }
; 288  : 
; 289  : #endif
; 290  : 
; 291  :     return ((Status & COM_LINE_STATUS_DATA_READY) != 0);

  00049	0f b6 4d ff	 movzx	 ecx, BYTE PTR _Status$[ebp]
  0004d	83 e1 01	 and	 ecx, 1
  00050	0f 95 c0	 setne	 al

; 292  : }

  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?BlComDataAvailable@@YIEE@Z ENDP			; BlComDataAvailable
_TEXT	ENDS
PUBLIC	?BlComReceiveByte@@YIEE@Z			; BlComReceiveByte
; Function compile flags: /Odtp
;	COMDAT ?BlComReceiveByte@@YIEE@Z
_TEXT	SEGMENT
_PortNumber$ = -12					; size = 1
_Base$ = -8						; size = 2
_Status$ = -2						; size = 1
_Byte$ = -1						; size = 1
?BlComReceiveByte@@YIEE@Z PROC				; BlComReceiveByte, COMDAT
; _PortNumber$ = cl

; 315  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	88 4d f4	 mov	 BYTE PTR _PortNumber$[ebp], cl

; 316  :     UINT16 Base;
; 317  :     UINT8 Byte;
; 318  :     UINT8 Status;
; 319  : 
; 320  :     BLASSERT((PortNumber >= 1) && (PortNumber <= COM_MAX_PORT));

  00009	0f b6 45 f4	 movzx	 eax, BYTE PTR _PortNumber$[ebp]
  0000d	83 f8 01	 cmp	 eax, 1
  00010	7c 09		 jl	 SHORT $LN4@BlComRecei
  00012	0f b6 4d f4	 movzx	 ecx, BYTE PTR _PortNumber$[ebp]
  00016	83 f9 04	 cmp	 ecx, 4
  00019	7e 0f		 jle	 SHORT $LN5@BlComRecei
$LN4@BlComRecei:
  0001b	ba 40 01 00 00	 mov	 edx, 320		; 00000140H
  00020	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_09MIGMGOIK@blcom?4cpp?$AA@
  00025	e8 00 00 00 00	 call	 ?BlRtlAssertFailed@@YIXPBDK@Z ; BlRtlAssertFailed
$LN5@BlComRecei:

; 321  : 
; 322  :     Base = BlComBasePort[PortNumber];

  0002a	0f b6 55 f4	 movzx	 edx, BYTE PTR _PortNumber$[ebp]
  0002e	66 8b 04 55 00
	00 00 00	 mov	 ax, WORD PTR ?BlComBasePort@@3QBGB[edx*2]
  00036	66 89 45 f8	 mov	 WORD PTR _Base$[ebp], ax

; 323  : 
; 324  :     BlRtlReadPort8(Base + COM_MODEM_STATUS_REGISTER);

  0003a	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  0003e	83 c1 06	 add	 ecx, 6
  00041	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
$LN3@BlComRecei:

; 325  : 
; 326  :     do {
; 327  : 
; 328  :         Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  00046	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  0004a	83 c1 05	 add	 ecx, 5
  0004d	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  00052	88 45 fe	 mov	 BYTE PTR _Status$[ebp], al

; 329  : 
; 330  : #if COM_VERBOSE
; 331  : 
; 332  :         if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 333  : 
; 334  :             BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 335  :         }
; 336  : 
; 337  :         if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 338  : 
; 339  :             BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 340  :         }
; 341  : 
; 342  :         if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 343  : 
; 344  :             BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 345  :         }
; 346  : 
; 347  : #endif
; 348  : 
; 349  :     } while ((Status & COM_LINE_STATUS_DATA_READY) == 0);

  00055	0f b6 4d fe	 movzx	 ecx, BYTE PTR _Status$[ebp]
  00059	83 e1 01	 and	 ecx, 1
  0005c	74 e8		 je	 SHORT $LN3@BlComRecei

; 350  : 
; 351  :     Byte = BlRtlReadPort8(Base + COM_DATA_REGISTER);

  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _Base$[ebp]
  00061	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  00066	88 45 ff	 mov	 BYTE PTR _Byte$[ebp], al

; 352  : 
; 353  :     Status = BlRtlReadPort8(Base + COM_LINE_STATUS_REGISTER);

  00069	0f b7 4d f8	 movzx	 ecx, WORD PTR _Base$[ebp]
  0006d	83 c1 05	 add	 ecx, 5
  00070	e8 00 00 00 00	 call	 ?BlRtlReadPort8@@YIEG@Z	; BlRtlReadPort8
  00075	88 45 fe	 mov	 BYTE PTR _Status$[ebp], al

; 354  : 
; 355  : #if COM_VERBOSE
; 356  : 
; 357  :     if ((Status & COM_LINE_STATUS_OVERRUN_ERROR) != 0) {
; 358  : 
; 359  :         BlVideoPrintf("COM%u: Overrun error!\n", PortNumber);
; 360  :     }
; 361  : 
; 362  :     if ((Status & COM_LINE_STATUS_PARITY_ERROR) != 0) {
; 363  : 
; 364  :         BlVideoPrintf("COM%u: Parity error!\n", PortNumber);
; 365  :     }
; 366  : 
; 367  :     if ((Status & COM_LINE_STATUS_FRAMING_ERROR) != 0) {
; 368  : 
; 369  :         BlVideoPrintf("COM%u: Framing error!\n", PortNumber);
; 370  :     }
; 371  : 
; 372  : #endif
; 373  : 
; 374  :     return Byte;

  00078	8a 45 ff	 mov	 al, BYTE PTR _Byte$[ebp]

; 375  : }

  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
?BlComReceiveByte@@YIEE@Z ENDP				; BlComReceiveByte
_TEXT	ENDS
END
