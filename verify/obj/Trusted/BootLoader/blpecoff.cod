; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blpecoff.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@		; `string'
PUBLIC	??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@ ; `string'
PUBLIC	?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z		; BlPeGetVirtualRange
EXTRN	?BlRtlHaltInternal@@YIXPBDK@Z:PROC		; BlRtlHaltInternal
EXTRN	?BlRtlPrintf@@YAEPBDZZ:PROC			; BlRtlPrintf
;	COMDAT ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blpecoff.cpp
CONST	SEGMENT
??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@ DB 'blpecoff.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@ DB 'PECOFF: Invali'
	DB	'd image!', 0aH, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z
_TEXT	SEGMENT
_VirtualBase$ = -28					; size = 4
_Image$ = -24						; size = 4
_SectionEnd$ = -20					; size = 4
_DosHeader$ = -16					; size = 4
_Index$ = -12						; size = 4
_NtHeader$ = -8						; size = 4
_Section$ = -4						; size = 4
_VirtualSize$ = 8					; size = 4
?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z PROC		; BlPeGetVirtualRange, COMDAT
; _Image$ = ecx
; _VirtualBase$ = edx

; 202  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 55 e4	 mov	 DWORD PTR _VirtualBase$[ebp], edx
  00009	89 4d e8	 mov	 DWORD PTR _Image$[ebp], ecx

; 203  :     PIMAGE_DOS_HEADER DosHeader;
; 204  :     UINT32 Index;
; 205  :     PIMAGE_NT_HEADERS NtHeader;
; 206  :     PIMAGE_SECTION_HEADER Section;
; 207  :     UINT32 SectionEnd;
; 208  : 
; 209  :     DosHeader = (PIMAGE_DOS_HEADER) Image;

  0000c	8b 45 e8	 mov	 eax, DWORD PTR _Image$[ebp]
  0000f	89 45 f0	 mov	 DWORD PTR _DosHeader$[ebp], eax

; 210  : 
; 211  :     if (DosHeader->e_magic != IMAGE_DOS_SIGNATURE) {

  00012	8b 4d f0	 mov	 ecx, DWORD PTR _DosHeader$[ebp]
  00015	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00018	81 fa 4d 5a 00
	00		 cmp	 edx, 23117		; 00005a4dH
  0001e	74 1c		 je	 SHORT $LN8@BlPeGetVir

; 212  : 
; 213  :         BlRtlPrintf("PECOFF: Invalid image!\n");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@
  00025	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0002a	83 c4 04	 add	 esp, 4

; 214  :         BlRtlHalt();

  0002d	ba d6 00 00 00	 mov	 edx, 214		; 000000d6H
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  00037	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN8@BlPeGetVir:

; 215  :     }
; 216  : 
; 217  :     NtHeader = (PIMAGE_NT_HEADERS) ((ULONG_PTR) Image + DosHeader->e_lfanew);

  0003c	8b 45 f0	 mov	 eax, DWORD PTR _DosHeader$[ebp]
  0003f	8b 4d e8	 mov	 ecx, DWORD PTR _Image$[ebp]
  00042	03 48 3c	 add	 ecx, DWORD PTR [eax+60]
  00045	89 4d f8	 mov	 DWORD PTR _NtHeader$[ebp], ecx

; 218  : 
; 219  :     if (NtHeader->Signature != IMAGE_NT_SIGNATURE) {

  00048	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  0004b	81 3a 50 45 00
	00		 cmp	 DWORD PTR [edx], 17744	; 00004550H
  00051	74 1c		 je	 SHORT $LN7@BlPeGetVir

; 220  : 
; 221  :         BlRtlPrintf("PECOFF: Invalid image!\n");

  00053	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@
  00058	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0005d	83 c4 04	 add	 esp, 4

; 222  :         BlRtlHalt();

  00060	ba de 00 00 00	 mov	 edx, 222		; 000000deH
  00065	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  0006a	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN7@BlPeGetVir:

; 223  :     }
; 224  : 
; 225  :     if (NtHeader->FileHeader.NumberOfSections == 0) {

  0006f	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  00072	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00076	85 c9		 test	 ecx, ecx
  00078	75 1c		 jne	 SHORT $LN6@BlPeGetVir

; 226  : 
; 227  :         BlRtlPrintf("PECOFF: Invalid image!\n");

  0007a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@
  0007f	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00084	83 c4 04	 add	 esp, 4

; 228  :         BlRtlHalt();

  00087	ba e4 00 00 00	 mov	 edx, 228		; 000000e4H
  0008c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  00091	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN6@BlPeGetVir:

; 229  :     }
; 230  : 
; 231  :     if ((NtHeader->OptionalHeader.ImageBase % PAGE_SIZE) != 0) {

  00096	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  00099	8b 42 34	 mov	 eax, DWORD PTR [edx+52]
  0009c	33 d2		 xor	 edx, edx
  0009e	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000a3	f7 f1		 div	 ecx
  000a5	85 d2		 test	 edx, edx
  000a7	74 1c		 je	 SHORT $LN5@BlPeGetVir

; 232  : 
; 233  :         BlRtlPrintf("PECOFF: Invalid image!\n");

  000a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DNDJLEKB@PECOFF?3?5Invalid?5image?$CB?6?$AA@
  000ae	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000b3	83 c4 04	 add	 esp, 4

; 234  :         BlRtlHalt();

  000b6	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  000bb	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  000c0	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlPeGetVir:

; 235  :     }
; 236  : 
; 237  :     *VirtualBase = (PVOID) NtHeader->OptionalHeader.ImageBase;

  000c5	8b 55 e4	 mov	 edx, DWORD PTR _VirtualBase$[ebp]
  000c8	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  000cb	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  000ce	89 0a		 mov	 DWORD PTR [edx], ecx

; 238  :     *VirtualSize = 0;

  000d0	8b 55 08	 mov	 edx, DWORD PTR _VirtualSize$[ebp]
  000d3	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 239  : 
; 240  :     Section = (PIMAGE_SECTION_HEADER) (((ULONG_PTR) &NtHeader->OptionalHeader) + NtHeader->FileHeader.SizeOfOptionalHeader);

  000d9	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  000dc	0f b7 48 14	 movzx	 ecx, WORD PTR [eax+20]
  000e0	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  000e3	8d 44 0a 18	 lea	 eax, DWORD PTR [edx+ecx+24]
  000e7	89 45 fc	 mov	 DWORD PTR _Section$[ebp], eax

; 241  : 
; 242  :     for (Index = 0; Index < NtHeader->FileHeader.NumberOfSections; Index += 1) {

  000ea	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  000f1	eb 09		 jmp	 SHORT $LN4@BlPeGetVir
$LN3@BlPeGetVir:
  000f3	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  000f6	83 c1 01	 add	 ecx, 1
  000f9	89 4d f4	 mov	 DWORD PTR _Index$[ebp], ecx
$LN4@BlPeGetVir:
  000fc	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  000ff	0f b7 42 06	 movzx	 eax, WORD PTR [edx+6]
  00103	39 45 f4	 cmp	 DWORD PTR _Index$[ebp], eax
  00106	73 31		 jae	 SHORT $LN2@BlPeGetVir

; 243  : 
; 244  :         SectionEnd = Section[Index].VirtualAddress + Section[Index].Misc.VirtualSize;

  00108	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  0010b	6b c9 28	 imul	 ecx, 40			; 00000028H
  0010e	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00111	6b d2 28	 imul	 edx, 40			; 00000028H
  00114	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  00117	8b 4c 08 0c	 mov	 ecx, DWORD PTR [eax+ecx+12]
  0011b	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  0011e	03 4c 10 08	 add	 ecx, DWORD PTR [eax+edx+8]
  00122	89 4d ec	 mov	 DWORD PTR _SectionEnd$[ebp], ecx

; 245  : 
; 246  :         if (SectionEnd > *VirtualSize) {

  00125	8b 4d 08	 mov	 ecx, DWORD PTR _VirtualSize$[ebp]
  00128	8b 55 ec	 mov	 edx, DWORD PTR _SectionEnd$[ebp]
  0012b	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0012d	76 08		 jbe	 SHORT $LN1@BlPeGetVir

; 247  : 
; 248  :             *VirtualSize = SectionEnd;

  0012f	8b 45 08	 mov	 eax, DWORD PTR _VirtualSize$[ebp]
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _SectionEnd$[ebp]
  00135	89 08		 mov	 DWORD PTR [eax], ecx
$LN1@BlPeGetVir:

; 249  :         }
; 250  :     }

  00137	eb ba		 jmp	 SHORT $LN3@BlPeGetVir
$LN2@BlPeGetVir:

; 251  : 
; 252  :     *VirtualSize = ROUND_UP_TO_PAGES(*VirtualSize);

  00139	8b 55 08	 mov	 edx, DWORD PTR _VirtualSize$[ebp]
  0013c	8b 02		 mov	 eax, DWORD PTR [edx]
  0013e	05 ff 0f 00 00	 add	 eax, 4095		; 00000fffH
  00143	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00148	8b 4d 08	 mov	 ecx, DWORD PTR _VirtualSize$[ebp]
  0014b	89 01		 mov	 DWORD PTR [ecx], eax

; 253  : 
; 254  :     return;
; 255  : }

  0014d	8b e5		 mov	 esp, ebp
  0014f	5d		 pop	 ebp
  00150	c2 04 00	 ret	 4
?BlPeGetVirtualRange@@YIXPAXPAPAXPAK@Z ENDP		; BlPeGetVirtualRange
_TEXT	ENDS
PUBLIC	??_C@_0BN@HECJPAFH@PECOFF?3?5Illegal?5relocation?4?6?$AA@ ; `string'
PUBLIC	?BlPeApplyFixupBlock@@YIXPAU_IMAGE_BASE_RELOCATION@@KK@Z ; BlPeApplyFixupBlock
;	COMDAT ??_C@_0BN@HECJPAFH@PECOFF?3?5Illegal?5relocation?4?6?$AA@
CONST	SEGMENT
??_C@_0BN@HECJPAFH@PECOFF?3?5Illegal?5relocation?4?6?$AA@ DB 'PECOFF: Ill'
	DB	'egal relocation.', 0aH, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlPeApplyFixupBlock@@YIXPAU_IMAGE_BASE_RELOCATION@@KK@Z
_TEXT	SEGMENT
tv75 = -28						; size = 4
_VirtualBase$ = -24					; size = 4
_Block$ = -20						; size = 4
_BlockBase$ = -16					; size = 4
_Reloc$ = -12						; size = 4
_Target$ = -8						; size = 4
_BlockEnd$ = -4						; size = 4
_RelocDiff$ = 8						; size = 4
?BlPeApplyFixupBlock@@YIXPAU_IMAGE_BASE_RELOCATION@@KK@Z PROC ; BlPeApplyFixupBlock, COMDAT
; _Block$ = ecx
; _VirtualBase$ = edx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	89 55 e8	 mov	 DWORD PTR _VirtualBase$[ebp], edx
  00009	89 4d ec	 mov	 DWORD PTR _Block$[ebp], ecx

; 281  :     PUINT16 Reloc;
; 282  :     PUINT16 BlockEnd;
; 283  :     ULONG_PTR BlockBase;
; 284  :     ULONG_PTR Target;
; 285  : 
; 286  :     Reloc = Block->TypeOffset;

  0000c	8b 45 ec	 mov	 eax, DWORD PTR _Block$[ebp]
  0000f	83 c0 08	 add	 eax, 8
  00012	89 45 f4	 mov	 DWORD PTR _Reloc$[ebp], eax

; 287  :     BlockEnd = (PUINT16) ( ((PUINT8) Block) + Block->SizeOfBlock);

  00015	8b 4d ec	 mov	 ecx, DWORD PTR _Block$[ebp]
  00018	8b 55 ec	 mov	 edx, DWORD PTR _Block$[ebp]
  0001b	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0001e	89 55 fc	 mov	 DWORD PTR _BlockEnd$[ebp], edx

; 288  :     BlockBase = VirtualBase + Block->VirtualAddress;

  00021	8b 45 ec	 mov	 eax, DWORD PTR _Block$[ebp]
  00024	8b 4d e8	 mov	 ecx, DWORD PTR _VirtualBase$[ebp]
  00027	03 08		 add	 ecx, DWORD PTR [eax]
  00029	89 4d f0	 mov	 DWORD PTR _BlockBase$[ebp], ecx
  0002c	eb 09		 jmp	 SHORT $LN9@BlPeApplyF
$LN8@BlPeApplyF:

; 289  : 
; 290  : #if PECOFF_VERBOSE
; 291  : 
; 292  :     BlRtlPrintf("PECOFF: Reloc Block %p:\n", Block->VirtualAddress);
; 293  : 
; 294  : #endif
; 295  : 
; 296  :     for (; Reloc < BlockEnd; Reloc++) {

  0002e	8b 55 f4	 mov	 edx, DWORD PTR _Reloc$[ebp]
  00031	83 c2 02	 add	 edx, 2
  00034	89 55 f4	 mov	 DWORD PTR _Reloc$[ebp], edx
$LN9@BlPeApplyF:
  00037	8b 45 f4	 mov	 eax, DWORD PTR _Reloc$[ebp]
  0003a	3b 45 fc	 cmp	 eax, DWORD PTR _BlockEnd$[ebp]
  0003d	73 76		 jae	 SHORT $LN10@BlPeApplyF

; 297  : 
; 298  :         Target = BlockBase + (*Reloc & 0xfff);

  0003f	8b 4d f4	 mov	 ecx, DWORD PTR _Reloc$[ebp]
  00042	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  00045	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0004b	03 55 f0	 add	 edx, DWORD PTR _BlockBase$[ebp]
  0004e	89 55 f8	 mov	 DWORD PTR _Target$[ebp], edx

; 299  : 
; 300  : #if PECOFF_VERBOSE
; 301  : 
; 302  :         switch (*Reloc >> 12) {
; 303  : 
; 304  :             case IMAGE_REL_BASED_ABSOLUTE: {
; 305  : 
; 306  :                 BlRtlPrintf("PECOFF:  %p: abs:%x \r", (PUINT32) Target, * (PUINT32) Target);
; 307  :                 break;
; 308  :             }
; 309  : 
; 310  :             case IMAGE_REL_BASED_HIGHLOW: {
; 311  : 
; 312  :                 BlRtlPrintf("PECOFF:  %p: r32:%x->%x \r", (PUINT32) Target, * (PUINT32) Target, * (PUINT32) Target + (UINT32) RelocDiff);
; 313  :                 break;
; 314  :             }
; 315  : 
; 316  :             case IMAGE_REL_BASED_DIR64: {
; 317  : 
; 318  :                 BlRtlPrintf("PECOFF:  %p: r64:%lx->%lx \r", (PUINT64) Target, * (PUINT64) Target, * (PUINT64) Target + (UINT64) RelocDiff);
; 319  :                 break;
; 320  :             }
; 321  : 
; 322  :             default: {
; 323  : 
; 324  :                 BlRtlPrintf("PECOFF:  %p: %x ??? \r", (PUINT32) Target, Reloc[0] >> 12);
; 325  :                 break;
; 326  :             }
; 327  :         }
; 328  : 
; 329  : #endif
; 330  : 
; 331  :         switch (*Reloc >> 12) {

  00051	8b 45 f4	 mov	 eax, DWORD PTR _Reloc$[ebp]
  00054	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00057	c1 f9 0c	 sar	 ecx, 12			; 0000000cH
  0005a	89 4d e4	 mov	 DWORD PTR tv75[ebp], ecx
  0005d	74 0e		 je	 SHORT $LN4@BlPeApplyF
  0005f	83 7d e4 03	 cmp	 DWORD PTR tv75[ebp], 3
  00063	74 0a		 je	 SHORT $LN3@BlPeApplyF
  00065	83 7d e4 0a	 cmp	 DWORD PTR tv75[ebp], 10	; 0000000aH
  00069	74 13		 je	 SHORT $LN2@BlPeApplyF
  0006b	eb 27		 jmp	 SHORT $LN1@BlPeApplyF
$LN4@BlPeApplyF:

; 332  :             case IMAGE_REL_BASED_ABSOLUTE: {
; 333  : 
; 334  :                 break;

  0006d	eb 41		 jmp	 SHORT $LN5@BlPeApplyF
$LN3@BlPeApplyF:

; 335  :             }
; 336  : 
; 337  :             case IMAGE_REL_BASED_HIGHLOW: {
; 338  : 
; 339  :                 * (PUINT32) Target += (UINT32) RelocDiff;

  0006f	8b 55 f8	 mov	 edx, DWORD PTR _Target$[ebp]
  00072	8b 02		 mov	 eax, DWORD PTR [edx]
  00074	03 45 08	 add	 eax, DWORD PTR _RelocDiff$[ebp]
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _Target$[ebp]
  0007a	89 01		 mov	 DWORD PTR [ecx], eax

; 340  :                 break;

  0007c	eb 32		 jmp	 SHORT $LN5@BlPeApplyF
$LN2@BlPeApplyF:

; 341  :             }
; 342  : 
; 343  :             case IMAGE_REL_BASED_DIR64: {
; 344  : 
; 345  :                 * (PUINT64 *) Target += (UINT64) RelocDiff;

  0007e	8b 45 08	 mov	 eax, DWORD PTR _RelocDiff$[ebp]
  00081	ba 08 00 00 00	 mov	 edx, 8
  00086	f7 e2		 mul	 edx
  00088	8b 4d f8	 mov	 ecx, DWORD PTR _Target$[ebp]
  0008b	03 01		 add	 eax, DWORD PTR [ecx]
  0008d	8b 55 f8	 mov	 edx, DWORD PTR _Target$[ebp]
  00090	89 02		 mov	 DWORD PTR [edx], eax

; 346  :                 break;

  00092	eb 1c		 jmp	 SHORT $LN5@BlPeApplyF
$LN1@BlPeApplyF:

; 347  :             }
; 348  : 
; 349  :             default: {
; 350  : 
; 351  :                 BlRtlPrintf("PECOFF: Illegal relocation.\n");

  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@HECJPAFH@PECOFF?3?5Illegal?5relocation?4?6?$AA@
  00099	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0009e	83 c4 04	 add	 esp, 4

; 352  :                 BlRtlHalt();

  000a1	ba 60 01 00 00	 mov	 edx, 352		; 00000160H
  000a6	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  000ab	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN5@BlPeApplyF:

; 353  :             }
; 354  :         }
; 355  :     }

  000b0	e9 79 ff ff ff	 jmp	 $LN8@BlPeApplyF
$LN10@BlPeApplyF:

; 356  : }

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
?BlPeApplyFixupBlock@@YIXPAU_IMAGE_BASE_RELOCATION@@KK@Z ENDP ; BlPeApplyFixupBlock
_TEXT	ENDS
PUBLIC	??_C@_0BL@IMODACNC@PECOFF?3?5Not?5page?5aligned?4?6?$AA@ ; `string'
PUBLIC	??_C@_0BG@MHIILMKK@PECOFF?3?5No?5sections?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@ECDALOID@PECOFF?3?5Missing?5PE?$CB?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@NCDKKKHJ@PECOFF?3?5Missing?5MZ?$CB?6?$AA@ ; `string'
PUBLIC	?BlPeLoadImage@@YIXPAX0PAPAX@Z			; BlPeLoadImage
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
EXTRN	?BlRtlCopyMemory@@YIXPAXPBXK@Z:PROC		; BlRtlCopyMemory
;	COMDAT ??_C@_0BL@IMODACNC@PECOFF?3?5Not?5page?5aligned?4?6?$AA@
CONST	SEGMENT
??_C@_0BL@IMODACNC@PECOFF?3?5Not?5page?5aligned?4?6?$AA@ DB 'PECOFF: Not '
	DB	'page aligned.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MHIILMKK@PECOFF?3?5No?5sections?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BG@MHIILMKK@PECOFF?3?5No?5sections?$CB?6?$AA@ DB 'PECOFF: No secti'
	DB	'ons!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@ECDALOID@PECOFF?3?5Missing?5PE?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BF@ECDALOID@PECOFF?3?5Missing?5PE?$CB?6?$AA@ DB 'PECOFF: Missing P'
	DB	'E!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NCDKKKHJ@PECOFF?3?5Missing?5MZ?$CB?6?$AA@
CONST	SEGMENT
??_C@_0BF@NCDKKKHJ@PECOFF?3?5Missing?5MZ?$CB?6?$AA@ DB 'PECOFF: Missing M'
	DB	'Z!', 0aH, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlPeLoadImage@@YIXPAX0PAPAX@Z
_TEXT	SEGMENT
_Image$ = -48						; size = 4
_LoadBase$ = -44					; size = 4
_Block$3514 = -40					; size = 4
_RelocListEnd$3513 = -36				; size = 4
_RelocList$3512 = -32					; size = 4
_DosHeader$ = -28					; size = 4
_RelocDiff$ = -24					; size = 4
_BytesToCopy$ = -20					; size = 4
_VirtualBase$ = -16					; size = 4
_Index$ = -12						; size = 4
_NtHeader$ = -8						; size = 4
_Section$ = -4						; size = 4
_EntryPoint$ = 8					; size = 4
?BlPeLoadImage@@YIXPAX0PAPAX@Z PROC			; BlPeLoadImage, COMDAT
; _LoadBase$ = ecx
; _Image$ = edx

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi
  00007	89 55 d0	 mov	 DWORD PTR _Image$[ebp], edx
  0000a	89 4d d4	 mov	 DWORD PTR _LoadBase$[ebp], ecx

; 380  :     ULONG_PTR BytesToCopy;
; 381  :     PIMAGE_DOS_HEADER DosHeader;
; 382  :     UINT32 Index;
; 383  :     PIMAGE_NT_HEADERS NtHeader;
; 384  :     PIMAGE_SECTION_HEADER Section;
; 385  :     ULONG_PTR VirtualBase;
; 386  :     ULONG_PTR RelocDiff;
; 387  : 
; 388  :     VirtualBase = (ULONG_PTR) LoadBase;

  0000d	8b 45 d4	 mov	 eax, DWORD PTR _LoadBase$[ebp]
  00010	89 45 f0	 mov	 DWORD PTR _VirtualBase$[ebp], eax

; 389  :     DosHeader = (PIMAGE_DOS_HEADER) Image;

  00013	8b 4d d0	 mov	 ecx, DWORD PTR _Image$[ebp]
  00016	89 4d e4	 mov	 DWORD PTR _DosHeader$[ebp], ecx

; 390  : 
; 391  :     if (DosHeader->e_magic != IMAGE_DOS_SIGNATURE) {

  00019	8b 55 e4	 mov	 edx, DWORD PTR _DosHeader$[ebp]
  0001c	0f b7 02	 movzx	 eax, WORD PTR [edx]
  0001f	3d 4d 5a 00 00	 cmp	 eax, 23117		; 00005a4dH
  00024	74 1c		 je	 SHORT $LN12@BlPeLoadIm

; 392  : 
; 393  :         BlRtlPrintf("PECOFF: Missing MZ!\n");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@NCDKKKHJ@PECOFF?3?5Missing?5MZ?$CB?6?$AA@
  0002b	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00030	83 c4 04	 add	 esp, 4

; 394  :         BlRtlHalt();

  00033	ba 8a 01 00 00	 mov	 edx, 394		; 0000018aH
  00038	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  0003d	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN12@BlPeLoadIm:

; 395  :     }
; 396  : 
; 397  :     NtHeader = (PIMAGE_NT_HEADERS) ((ULONG_PTR) Image + DosHeader->e_lfanew);

  00042	8b 4d e4	 mov	 ecx, DWORD PTR _DosHeader$[ebp]
  00045	8b 55 d0	 mov	 edx, DWORD PTR _Image$[ebp]
  00048	03 51 3c	 add	 edx, DWORD PTR [ecx+60]
  0004b	89 55 f8	 mov	 DWORD PTR _NtHeader$[ebp], edx

; 398  : 
; 399  :     if (NtHeader->Signature != IMAGE_NT_SIGNATURE) {

  0004e	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  00051	81 38 50 45 00
	00		 cmp	 DWORD PTR [eax], 17744	; 00004550H
  00057	74 1c		 je	 SHORT $LN11@BlPeLoadIm

; 400  : 
; 401  :         BlRtlPrintf("PECOFF: Missing PE!\n");

  00059	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@ECDALOID@PECOFF?3?5Missing?5PE?$CB?6?$AA@
  0005e	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  00063	83 c4 04	 add	 esp, 4

; 402  :         BlRtlHalt();

  00066	ba 92 01 00 00	 mov	 edx, 402		; 00000192H
  0006b	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  00070	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN11@BlPeLoadIm:

; 403  :     }
; 404  : 
; 405  :     if (NtHeader->FileHeader.NumberOfSections == 0) {

  00075	8b 4d f8	 mov	 ecx, DWORD PTR _NtHeader$[ebp]
  00078	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  0007c	85 d2		 test	 edx, edx
  0007e	75 1c		 jne	 SHORT $LN10@BlPeLoadIm

; 406  : 
; 407  :         BlRtlPrintf("PECOFF: No sections!\n");

  00080	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MHIILMKK@PECOFF?3?5No?5sections?$CB?6?$AA@
  00085	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  0008a	83 c4 04	 add	 esp, 4

; 408  :         BlRtlHalt();

  0008d	ba 98 01 00 00	 mov	 edx, 408		; 00000198H
  00092	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  00097	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN10@BlPeLoadIm:

; 409  :     }
; 410  : 
; 411  :     if ((NtHeader->OptionalHeader.ImageBase % PAGE_SIZE) != 0) {

  0009c	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  0009f	8b 40 34	 mov	 eax, DWORD PTR [eax+52]
  000a2	33 d2		 xor	 edx, edx
  000a4	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000a9	f7 f1		 div	 ecx
  000ab	85 d2		 test	 edx, edx
  000ad	74 1c		 je	 SHORT $LN9@BlPeLoadIm

; 412  : 
; 413  :         BlRtlPrintf("PECOFF: Not page aligned.\n");

  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IMODACNC@PECOFF?3?5Not?5page?5aligned?4?6?$AA@
  000b4	e8 00 00 00 00	 call	 ?BlRtlPrintf@@YAEPBDZZ	; BlRtlPrintf
  000b9	83 c4 04	 add	 esp, 4

; 414  :         BlRtlHalt();

  000bc	ba 9e 01 00 00	 mov	 edx, 414		; 0000019eH
  000c1	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0N@MNCCIOG@blpecoff?4cpp?$AA@
  000c6	e8 00 00 00 00	 call	 ?BlRtlHaltInternal@@YIXPBDK@Z ; BlRtlHaltInternal
$LN9@BlPeLoadIm:

; 415  :     }
; 416  : 
; 417  :     BlRtlCopyMemory((PVOID) VirtualBase,
; 418  :                     Image,
; 419  :                     NtHeader->OptionalHeader.SizeOfHeaders);

  000cb	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  000ce	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  000d1	50		 push	 eax
  000d2	8b 55 d0	 mov	 edx, DWORD PTR _Image$[ebp]
  000d5	8b 4d f0	 mov	 ecx, DWORD PTR _VirtualBase$[ebp]
  000d8	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 420  : 
; 421  :     Section = (PIMAGE_SECTION_HEADER) (((ULONG_PTR) &NtHeader->OptionalHeader) + NtHeader->FileHeader.SizeOfOptionalHeader);

  000dd	8b 4d f8	 mov	 ecx, DWORD PTR _NtHeader$[ebp]
  000e0	0f b7 51 14	 movzx	 edx, WORD PTR [ecx+20]
  000e4	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  000e7	8d 4c 10 18	 lea	 ecx, DWORD PTR [eax+edx+24]
  000eb	89 4d fc	 mov	 DWORD PTR _Section$[ebp], ecx

; 422  : 
; 423  :     for (Index = 0; Index < NtHeader->FileHeader.NumberOfSections; Index += 1) {

  000ee	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  000f5	eb 09		 jmp	 SHORT $LN8@BlPeLoadIm
$LN7@BlPeLoadIm:
  000f7	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  000fa	83 c2 01	 add	 edx, 1
  000fd	89 55 f4	 mov	 DWORD PTR _Index$[ebp], edx
$LN8@BlPeLoadIm:
  00100	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  00103	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  00107	39 4d f4	 cmp	 DWORD PTR _Index$[ebp], ecx
  0010a	0f 83 92 00 00
	00		 jae	 $LN6@BlPeLoadIm

; 424  : 
; 425  :         BlRtlZeroMemory((PVOID) (VirtualBase + Section[Index].VirtualAddress), Section[Index].Misc.VirtualSize);

  00110	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00113	6b d2 28	 imul	 edx, 40			; 00000028H
  00116	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00119	6b c0 28	 imul	 eax, 40			; 00000028H
  0011c	8b 4d fc	 mov	 ecx, DWORD PTR _Section$[ebp]
  0011f	8b 75 f0	 mov	 esi, DWORD PTR _VirtualBase$[ebp]
  00122	03 74 01 0c	 add	 esi, DWORD PTR [ecx+eax+12]
  00126	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  00129	8b 54 10 08	 mov	 edx, DWORD PTR [eax+edx+8]
  0012d	8b ce		 mov	 ecx, esi
  0012f	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 426  : 
; 427  :         if (Section[Index].SizeOfRawData < Section[Index].Misc.VirtualSize) {

  00134	8b 4d f4	 mov	 ecx, DWORD PTR _Index$[ebp]
  00137	6b c9 28	 imul	 ecx, 40			; 00000028H
  0013a	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  0013d	6b d2 28	 imul	 edx, 40			; 00000028H
  00140	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  00143	8b 75 fc	 mov	 esi, DWORD PTR _Section$[ebp]
  00146	8b 4c 08 10	 mov	 ecx, DWORD PTR [eax+ecx+16]
  0014a	3b 4c 16 08	 cmp	 ecx, DWORD PTR [esi+edx+8]
  0014e	73 12		 jae	 SHORT $LN5@BlPeLoadIm

; 428  : 
; 429  :             BytesToCopy = Section[Index].SizeOfRawData;

  00150	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00153	6b d2 28	 imul	 edx, 40			; 00000028H
  00156	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  00159	8b 4c 10 10	 mov	 ecx, DWORD PTR [eax+edx+16]
  0015d	89 4d ec	 mov	 DWORD PTR _BytesToCopy$[ebp], ecx

; 430  : 
; 431  :         } else {

  00160	eb 10		 jmp	 SHORT $LN4@BlPeLoadIm
$LN5@BlPeLoadIm:

; 432  : 
; 433  :             BytesToCopy = Section[Index].Misc.VirtualSize;

  00162	8b 55 f4	 mov	 edx, DWORD PTR _Index$[ebp]
  00165	6b d2 28	 imul	 edx, 40			; 00000028H
  00168	8b 45 fc	 mov	 eax, DWORD PTR _Section$[ebp]
  0016b	8b 4c 10 08	 mov	 ecx, DWORD PTR [eax+edx+8]
  0016f	89 4d ec	 mov	 DWORD PTR _BytesToCopy$[ebp], ecx
$LN4@BlPeLoadIm:

; 434  :         }
; 435  : 
; 436  :         BlRtlCopyMemory((PVOID) (VirtualBase + Section[Index].VirtualAddress),
; 437  :                         (PVOID) (((ULONG_PTR) Image) + Section[Index].PointerToRawData),
; 438  :                         BytesToCopy);

  00172	8b 55 ec	 mov	 edx, DWORD PTR _BytesToCopy$[ebp]
  00175	52		 push	 edx
  00176	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00179	6b c0 28	 imul	 eax, 40			; 00000028H
  0017c	8b 4d fc	 mov	 ecx, DWORD PTR _Section$[ebp]
  0017f	8b 55 d0	 mov	 edx, DWORD PTR _Image$[ebp]
  00182	03 54 01 14	 add	 edx, DWORD PTR [ecx+eax+20]
  00186	8b 45 f4	 mov	 eax, DWORD PTR _Index$[ebp]
  00189	6b c0 28	 imul	 eax, 40			; 00000028H
  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _Section$[ebp]
  0018f	8b 75 f0	 mov	 esi, DWORD PTR _VirtualBase$[ebp]
  00192	03 74 01 0c	 add	 esi, DWORD PTR [ecx+eax+12]
  00196	8b ce		 mov	 ecx, esi
  00198	e8 00 00 00 00	 call	 ?BlRtlCopyMemory@@YIXPAXPBXK@Z ; BlRtlCopyMemory

; 439  : 
; 440  : #if PECOFF_VERBOSE
; 441  : 
; 442  :         {
; 443  :             CHAR Temp[IMAGE_SIZEOF_SHORT_NAME + 1];
; 444  : 
; 445  :             BlRtlCopyMemory(Temp,
; 446  :                             Section[Index].Name,
; 447  :                             IMAGE_SIZEOF_SHORT_NAME);
; 448  : 
; 449  :             Temp[IMAGE_SIZEOF_SHORT_NAME] = 0;
; 450  : 
; 451  :             BlRtlPrintf("PECOFF: %p ... %p (%p ... %p) %s\n",
; 452  :                         VirtualBase + Section[Index].VirtualAddress,
; 453  :                         VirtualBase + Section[Index].VirtualAddress + Section[Index].Misc.VirtualSize - 1,
; 454  :                         (((ULONG_PTR) Image) + Section[Index].PointerToRawData),
; 455  :                         (((ULONG_PTR) Image) + Section[Index].PointerToRawData) + BytesToCopy,
; 456  :                         Temp);
; 457  :         }
; 458  : 
; 459  : #endif
; 460  : 
; 461  :     }

  0019d	e9 55 ff ff ff	 jmp	 $LN7@BlPeLoadIm
$LN6@BlPeLoadIm:

; 462  : 
; 463  :     RelocDiff = VirtualBase - (ULONG_PTR)NtHeader->OptionalHeader.ImageBase;

  001a2	8b 55 f8	 mov	 edx, DWORD PTR _NtHeader$[ebp]
  001a5	8b 45 f0	 mov	 eax, DWORD PTR _VirtualBase$[ebp]
  001a8	2b 42 34	 sub	 eax, DWORD PTR [edx+52]
  001ab	89 45 e8	 mov	 DWORD PTR _RelocDiff$[ebp], eax

; 464  : 
; 465  :     if (RelocDiff != 0) {

  001ae	74 49		 je	 SHORT $LN3@BlPeLoadIm

; 466  : 
; 467  :         PUINT8 RelocList;
; 468  :         PUINT8 RelocListEnd;
; 469  :         PIMAGE_BASE_RELOCATION Block;
; 470  : 
; 471  :         RelocList = (PUINT8) (VirtualBase + NtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].VirtualAddress);

  001b0	8b 4d f8	 mov	 ecx, DWORD PTR _NtHeader$[ebp]
  001b3	8b 55 f0	 mov	 edx, DWORD PTR _VirtualBase$[ebp]
  001b6	03 91 a0 00 00
	00		 add	 edx, DWORD PTR [ecx+160]
  001bc	89 55 e0	 mov	 DWORD PTR _RelocList$3512[ebp], edx

; 472  :         RelocListEnd = RelocList + NtHeader->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC].Size;

  001bf	8b 45 f8	 mov	 eax, DWORD PTR _NtHeader$[ebp]
  001c2	8b 4d e0	 mov	 ecx, DWORD PTR _RelocList$3512[ebp]
  001c5	03 88 a4 00 00
	00		 add	 ecx, DWORD PTR [eax+164]
  001cb	89 4d dc	 mov	 DWORD PTR _RelocListEnd$3513[ebp], ecx
$LN2@BlPeLoadIm:

; 473  : 
; 474  : #if PECOFF_VERBOSE
; 475  : 
; 476  :         BlRtlPrintf("PECOFF: Relocs: %p ... %p\n", RelocList, RelocListEnd);
; 477  : 
; 478  : #endif
; 479  : 
; 480  :         while (RelocList < RelocListEnd) {

  001ce	8b 55 e0	 mov	 edx, DWORD PTR _RelocList$3512[ebp]
  001d1	3b 55 dc	 cmp	 edx, DWORD PTR _RelocListEnd$3513[ebp]
  001d4	73 23		 jae	 SHORT $LN3@BlPeLoadIm

; 481  : 
; 482  :             Block = (PIMAGE_BASE_RELOCATION) RelocList;

  001d6	8b 45 e0	 mov	 eax, DWORD PTR _RelocList$3512[ebp]
  001d9	89 45 d8	 mov	 DWORD PTR _Block$3514[ebp], eax

; 483  : 
; 484  :             BlPeApplyFixupBlock(Block, VirtualBase, RelocDiff);

  001dc	8b 4d e8	 mov	 ecx, DWORD PTR _RelocDiff$[ebp]
  001df	51		 push	 ecx
  001e0	8b 55 f0	 mov	 edx, DWORD PTR _VirtualBase$[ebp]
  001e3	8b 4d d8	 mov	 ecx, DWORD PTR _Block$3514[ebp]
  001e6	e8 00 00 00 00	 call	 ?BlPeApplyFixupBlock@@YIXPAU_IMAGE_BASE_RELOCATION@@KK@Z ; BlPeApplyFixupBlock

; 485  : 
; 486  :             RelocList += Block->SizeOfBlock;

  001eb	8b 55 d8	 mov	 edx, DWORD PTR _Block$3514[ebp]
  001ee	8b 45 e0	 mov	 eax, DWORD PTR _RelocList$3512[ebp]
  001f1	03 42 04	 add	 eax, DWORD PTR [edx+4]
  001f4	89 45 e0	 mov	 DWORD PTR _RelocList$3512[ebp], eax

; 487  :         }

  001f7	eb d5		 jmp	 SHORT $LN2@BlPeLoadIm
$LN3@BlPeLoadIm:

; 488  :     }
; 489  : 
; 490  :     *EntryPoint = (PVOID) (VirtualBase + NtHeader->OptionalHeader.AddressOfEntryPoint);

  001f9	8b 4d f8	 mov	 ecx, DWORD PTR _NtHeader$[ebp]
  001fc	8b 55 f0	 mov	 edx, DWORD PTR _VirtualBase$[ebp]
  001ff	03 51 28	 add	 edx, DWORD PTR [ecx+40]
  00202	8b 45 08	 mov	 eax, DWORD PTR _EntryPoint$[ebp]
  00205	89 10		 mov	 DWORD PTR [eax], edx

; 491  : 
; 492  :     return;
; 493  : }

  00207	5e		 pop	 esi
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 04 00	 ret	 4
?BlPeLoadImage@@YIXPAX0PAPAX@Z ENDP			; BlPeLoadImage
_TEXT	ENDS
END
