; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	D:\OSes\VERVE\verify\src\Trusted\BootLoader\SingLdrPc\blkd.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?BlKdNextPacketId@@3KA				; BlKdNextPacketId
_BSS	SEGMENT
?BlKdNextPacketId@@3KA DD 01H DUP (?)			; BlKdNextPacketId
_BSS	ENDS
PUBLIC	??_C@_04OPBEDMAI@?$CL?9?$HM?$CK?$AA@		; `string'
PUBLIC	?BlKdSpin@@YIXXZ				; BlKdSpin
;	COMDAT ?state@?1??BlKdSpin@@YIXXZ@4EA
; File d:\oses\verve\verify\src\trusted\bootloader\singldrpc\blkd.cpp
_BSS	SEGMENT
?state@?1??BlKdSpin@@YIXXZ@4EA DB 01H DUP (?)		; `BlKdSpin'::`2'::state
_BSS	ENDS
;	COMDAT ??_C@_04OPBEDMAI@?$CL?9?$HM?$CK?$AA@
CONST	SEGMENT
??_C@_04OPBEDMAI@?$CL?9?$HM?$CK?$AA@ DB '+-|*', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ?BlKdSpin@@YIXXZ
_TEXT	SEGMENT
?BlKdSpin@@YIXXZ PROC					; BlKdSpin, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 33   :     static UINT8 state = 0;
; 34   : 
; 35   :     //
; 36   :     // Write the spinner character to the top left corner of the screen.
; 37   :     //
; 38   : 
; 39   :     *((UINT16 *)(ULONG_PTR)0xb809e) = 0x2f00 + ("+-|*" [state++ & 0x3]);

  00003	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?state@?1??BlKdSpin@@YIXXZ@4EA
  0000a	83 e0 03	 and	 eax, 3
  0000d	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ??_C@_04OPBEDMAI@?$CL?9?$HM?$CK?$AA@[eax]
  00014	81 c1 00 2f 00
	00		 add	 ecx, 12032		; 00002f00H
  0001a	66 89 0d 9e 80
	0b 00		 mov	 WORD PTR ds:753822, cx
  00021	8a 15 00 00 00
	00		 mov	 dl, BYTE PTR ?state@?1??BlKdSpin@@YIXXZ@4EA
  00027	80 c2 01	 add	 dl, 1
  0002a	88 15 00 00 00
	00		 mov	 BYTE PTR ?state@?1??BlKdSpin@@YIXXZ@4EA, dl

; 40   : }

  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?BlKdSpin@@YIXXZ ENDP					; BlKdSpin
_TEXT	ENDS
PUBLIC	?BlKdComputeChecksum@@YIKPBXK@Z			; BlKdComputeChecksum
; Function compile flags: /Odtp
;	COMDAT ?BlKdComputeChecksum@@YIKPBXK@Z
_TEXT	SEGMENT
_Length$ = -16						; size = 4
_Buffer$ = -12						; size = 4
_Checksum$ = -8						; size = 4
_Index$ = -4						; size = 4
?BlKdComputeChecksum@@YIKPBXK@Z PROC			; BlKdComputeChecksum, COMDAT
; _Buffer$ = ecx
; _Length$ = edx

; 66   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 55 f0	 mov	 DWORD PTR _Length$[ebp], edx
  00009	89 4d f4	 mov	 DWORD PTR _Buffer$[ebp], ecx

; 67   :     UINT32 Checksum;
; 68   :     UINT32 Index;
; 69   : 
; 70   :     Checksum = 0;

  0000c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _Checksum$[ebp], 0

; 71   : 
; 72   :     for (Index = 0; Index < Length; Index += 1) {

  00013	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _Index$[ebp], 0
  0001a	eb 09		 jmp	 SHORT $LN3@BlKdComput
$LN2@BlKdComput:
  0001c	8b 45 fc	 mov	 eax, DWORD PTR _Index$[ebp]
  0001f	83 c0 01	 add	 eax, 1
  00022	89 45 fc	 mov	 DWORD PTR _Index$[ebp], eax
$LN3@BlKdComput:
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _Index$[ebp]
  00028	3b 4d f0	 cmp	 ecx, DWORD PTR _Length$[ebp]
  0002b	73 11		 jae	 SHORT $LN1@BlKdComput

; 73   : 
; 74   :         Checksum += ((PCHAR)Buffer)[Index];

  0002d	8b 55 f4	 mov	 edx, DWORD PTR _Buffer$[ebp]
  00030	03 55 fc	 add	 edx, DWORD PTR _Index$[ebp]
  00033	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00036	03 45 f8	 add	 eax, DWORD PTR _Checksum$[ebp]
  00039	89 45 f8	 mov	 DWORD PTR _Checksum$[ebp], eax

; 75   :     }

  0003c	eb de		 jmp	 SHORT $LN2@BlKdComput
$LN1@BlKdComput:

; 76   : 
; 77   :     return Checksum;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _Checksum$[ebp]

; 78   : }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
?BlKdComputeChecksum@@YIKPBXK@Z ENDP			; BlKdComputeChecksum
_TEXT	ENDS
PUBLIC	?BlKdPrintString@@YIEPBD@Z			; BlKdPrintString
EXTRN	?BlKd1394SendPacket@@YIEGPBXG0G@Z:PROC		; BlKd1394SendPacket
EXTRN	?BlPciOhci1394BaseAddress@@3KA:DWORD		; BlPciOhci1394BaseAddress
EXTRN	?BlKdComSendPacket@@YIEGPBXG0G@Z:PROC		; BlKdComSendPacket
EXTRN	?BlKdComPort@@3EA:BYTE				; BlKdComPort
EXTRN	?BlRtlZeroMemory@@YIXPAXK@Z:PROC		; BlRtlZeroMemory
EXTRN	?BlRtlStringLength@@YIKPBD@Z:PROC		; BlRtlStringLength
; Function compile flags: /Odtp
;	COMDAT ?BlKdPrintString@@YIEPBD@Z
_TEXT	SEGMENT
_String$ = -24						; size = 4
_Packet$ = -20						; size = 16
_StringLength$ = -4					; size = 4
?BlKdPrintString@@YIEPBD@Z PROC				; BlKdPrintString, COMDAT
; _String$ = ecx

; 102  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	89 4d e8	 mov	 DWORD PTR _String$[ebp], ecx

; 103  :     KD_DEBUG_IO Packet;
; 104  :     UINT32 StringLength;
; 105  : 
; 106  :     StringLength = BlRtlStringLength(String);

  00009	8b 4d e8	 mov	 ecx, DWORD PTR _String$[ebp]
  0000c	e8 00 00 00 00	 call	 ?BlRtlStringLength@@YIKPBD@Z ; BlRtlStringLength
  00011	89 45 fc	 mov	 DWORD PTR _StringLength$[ebp], eax

; 107  : 
; 108  :     if (StringLength >= 0xFFFF) {

  00014	81 7d fc ff ff
	00 00		 cmp	 DWORD PTR _StringLength$[ebp], 65535 ; 0000ffffH
  0001b	72 04		 jb	 SHORT $LN4@BlKdPrintS

; 109  : 
; 110  :         return FALSE;

  0001d	32 c0		 xor	 al, al
  0001f	eb 6c		 jmp	 SHORT $LN5@BlKdPrintS
$LN4@BlKdPrintS:

; 111  :     }
; 112  : 
; 113  :     BlRtlZeroMemory(&Packet, sizeof(Packet));

  00021	ba 10 00 00 00	 mov	 edx, 16			; 00000010H
  00026	8d 4d ec	 lea	 ecx, DWORD PTR _Packet$[ebp]
  00029	e8 00 00 00 00	 call	 ?BlRtlZeroMemory@@YIXPAXK@Z ; BlRtlZeroMemory

; 114  : 
; 115  :     Packet.ApiNumber = KD_API_PRINT_STRING;

  0002e	c7 45 ec 30 32
	00 00		 mov	 DWORD PTR _Packet$[ebp], 12848 ; 00003230H

; 116  :     Packet.u1.PrintString.LengthOfString = StringLength;

  00035	8b 45 fc	 mov	 eax, DWORD PTR _StringLength$[ebp]
  00038	89 45 f4	 mov	 DWORD PTR _Packet$[ebp+8], eax

; 117  : 
; 118  :     if (BlKdComPort != 0) {

  0003b	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?BlKdComPort@@3EA ; BlKdComPort
  00042	85 c9		 test	 ecx, ecx
  00044	74 1f		 je	 SHORT $LN3@BlKdPrintS

; 119  : 
; 120  :         return BlKdComSendPacket(KD_PACKET_TYPE_KD_DEBUG_IO,
; 121  :                                  &Packet,
; 122  :                                  sizeof(Packet),
; 123  :                                  String,
; 124  :                                  (UINT16) StringLength + 1);

  00046	0f b7 55 fc	 movzx	 edx, WORD PTR _StringLength$[ebp]
  0004a	83 c2 01	 add	 edx, 1
  0004d	52		 push	 edx
  0004e	8b 45 e8	 mov	 eax, DWORD PTR _String$[ebp]
  00051	50		 push	 eax
  00052	6a 10		 push	 16			; 00000010H
  00054	8d 55 ec	 lea	 edx, DWORD PTR _Packet$[ebp]
  00057	b9 03 00 00 00	 mov	 ecx, 3
  0005c	e8 00 00 00 00	 call	 ?BlKdComSendPacket@@YIEGPBXG0G@Z ; BlKdComSendPacket
  00061	eb 2a		 jmp	 SHORT $LN5@BlKdPrintS
  00063	eb 26		 jmp	 SHORT $LN2@BlKdPrintS
$LN3@BlKdPrintS:

; 125  : 
; 126  :     }
; 127  :     else if (BlPciOhci1394BaseAddress != 0) {

  00065	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BlPciOhci1394BaseAddress@@3KA, 0 ; BlPciOhci1394BaseAddress
  0006c	74 1d		 je	 SHORT $LN2@BlKdPrintS

; 128  : 
; 129  :         return BlKd1394SendPacket(KD_PACKET_TYPE_KD_DEBUG_IO,
; 130  :                                   &Packet,
; 131  :                                   sizeof(Packet),
; 132  :                                   String,
; 133  :                                   (UINT16) StringLength + 1);

  0006e	0f b7 4d fc	 movzx	 ecx, WORD PTR _StringLength$[ebp]
  00072	83 c1 01	 add	 ecx, 1
  00075	51		 push	 ecx
  00076	8b 55 e8	 mov	 edx, DWORD PTR _String$[ebp]
  00079	52		 push	 edx
  0007a	6a 10		 push	 16			; 00000010H
  0007c	8d 55 ec	 lea	 edx, DWORD PTR _Packet$[ebp]
  0007f	b9 03 00 00 00	 mov	 ecx, 3
  00084	e8 00 00 00 00	 call	 ?BlKd1394SendPacket@@YIEGPBXG0G@Z ; BlKd1394SendPacket
  00089	eb 02		 jmp	 SHORT $LN5@BlKdPrintS
$LN2@BlKdPrintS:

; 134  : 
; 135  :     }
; 136  : 
; 137  :     return FALSE;

  0008b	32 c0		 xor	 al, al
$LN5@BlKdPrintS:

; 138  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?BlKdPrintString@@YIEPBD@Z ENDP				; BlKdPrintString
_TEXT	ENDS
PUBLIC	?BlKdPrintf@@YAEPBDZZ				; BlKdPrintf
EXTRN	?BlRtlFormatString@@YIEPADKPBD0@Z:PROC		; BlRtlFormatString
; Function compile flags: /Odtp
;	COMDAT ?BlKdPrintf@@YAEPBDZZ
_TEXT	SEGMENT
_Buffer$ = -4104					; size = 4096
_ArgumentList$ = -4					; size = 4
_Format$ = 8						; size = 4
?BlKdPrintf@@YAEPBDZZ PROC				; BlKdPrintf, COMDAT

; 165  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 10 00
	00		 sub	 esp, 4104		; 00001008H

; 166  :     va_list ArgumentList;
; 167  :     CHAR Buffer[4096];
; 168  : 
; 169  :     va_start(ArgumentList, Format);

  00009	8d 45 0c	 lea	 eax, DWORD PTR _Format$[ebp+4]
  0000c	89 45 fc	 mov	 DWORD PTR _ArgumentList$[ebp], eax

; 170  : 
; 171  :     if (BlRtlFormatString(Buffer,
; 172  :                           sizeof(Buffer),
; 173  :                           Format,
; 174  :                           ArgumentList) == FALSE) {

  0000f	8b 4d fc	 mov	 ecx, DWORD PTR _ArgumentList$[ebp]
  00012	51		 push	 ecx
  00013	8b 55 08	 mov	 edx, DWORD PTR _Format$[ebp]
  00016	52		 push	 edx
  00017	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  0001c	8d 8d f8 ef ff
	ff		 lea	 ecx, DWORD PTR _Buffer$[ebp]
  00022	e8 00 00 00 00	 call	 ?BlRtlFormatString@@YIEPADKPBD0@Z ; BlRtlFormatString
  00027	0f b6 c0	 movzx	 eax, al
  0002a	85 c0		 test	 eax, eax
  0002c	75 04		 jne	 SHORT $LN1@BlKdPrintf

; 175  : 
; 176  :         return FALSE;

  0002e	32 c0		 xor	 al, al
  00030	eb 0d		 jmp	 SHORT $LN2@BlKdPrintf
$LN1@BlKdPrintf:

; 177  :     }
; 178  : 
; 179  :     BlKdPrintString(Buffer);

  00032	8d 8d f8 ef ff
	ff		 lea	 ecx, DWORD PTR _Buffer$[ebp]
  00038	e8 00 00 00 00	 call	 ?BlKdPrintString@@YIEPBD@Z ; BlKdPrintString

; 180  : 
; 181  :     return TRUE;

  0003d	b0 01		 mov	 al, 1
$LN2@BlKdPrintf:

; 182  : }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
?BlKdPrintf@@YAEPBDZZ ENDP				; BlKdPrintf
_TEXT	ENDS
PUBLIC	?BlKdInitialize@@YIXXZ				; BlKdInitialize
EXTRN	?BlKd1394Connect@@YIEXZ:PROC			; BlKd1394Connect
EXTRN	?BlKdComConnect@@YIEXZ:PROC			; BlKdComConnect
; Function compile flags: /Odtp
;	COMDAT ?BlKdInitialize@@YIXXZ
_TEXT	SEGMENT
?BlKdInitialize@@YIXXZ PROC				; BlKdInitialize, COMDAT

; 197  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 198  :     //
; 199  :     // Try serial first.
; 200  :     //
; 201  : 
; 202  :     if (BlKdComConnect() != FALSE) {

  00003	e8 00 00 00 00	 call	 ?BlKdComConnect@@YIEXZ	; BlKdComConnect
  00008	0f b6 c0	 movzx	 eax, al
  0000b	85 c0		 test	 eax, eax
  0000d	74 02		 je	 SHORT $LN2@BlKdInitia

; 203  : 
; 204  : #if KD_VERBOSE
; 205  : 
; 206  :         BlVideoPrintf("KD: Connected to COM%u\n", BlKdComPort);
; 207  : 
; 208  : #endif
; 209  : 
; 210  :         return;

  0000f	eb 05		 jmp	 SHORT $LN3@BlKdInitia
$LN2@BlKdInitia:

; 211  :     }
; 212  : 
; 213  :     //
; 214  :     // Try the 1394 transport next.
; 215  :     //
; 216  : 
; 217  :     if (BlKd1394Connect() != FALSE) {

  00011	e8 00 00 00 00	 call	 ?BlKd1394Connect@@YIEXZ	; BlKd1394Connect
$LN3@BlKdInitia:

; 218  : 
; 219  : #if KD_VERBOSE
; 220  : 
; 221  :         BlVideoPrintf("KD: Connected to 1394:%u\n", 0);
; 222  : 
; 223  : #endif
; 224  : 
; 225  :         return;
; 226  :     }
; 227  : 
; 228  :     return;
; 229  : }

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
?BlKdInitialize@@YIXXZ ENDP				; BlKdInitialize
_TEXT	ENDS
END
