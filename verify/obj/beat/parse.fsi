// Signature file for parser generated by fsyacc
#light
type token = 
  | EOF
  | EAX
  | EBX
  | ECX
  | EDX
  | ESI
  | EDI
  | EBP
  | ESP
  | FORALL
  | EXISTS
  | OLD
  | COLONCOLON
  | EQEQGT
  | LTEQEQGT
  | REQUIRES of (loc)
  | ENSURES of (loc)
  | MODIFIES of (loc)
  | INVARIANT of (loc)
  | ASSUME of (loc)
  | ASSERT of (loc)
  | GOTO of (loc)
  | CALL of (loc)
  | CONST of (loc)
  | FUNCTION of (loc)
  | RETURNS of (loc)
  | TYPE of (loc)
  | AXIOM of (loc)
  | PROCEDURE of (loc)
  | IMPLEMENTATION of (loc)
  | AMP
  | NULL
  | INT
  | BOOL
  | DOT
  | UNDERSCORE
  | FUN
  | COLONEQ of (loc)
  | REQARROW
  | RLOL
  | SLASH
  | BACKSLASH
  | AT
  | DOLLAR
  | PERCENT
  | SQUOTE
  | BQUOTE
  | BARBAR
  | PLUSPLUS
  | HASH
  | CARET
  | AMPAMP of (loc)
  | PLUS
  | MINUS
  | STAR
  | LT
  | GT
  | BAR
  | EQ
  | BANG
  | QUESTION
  | COMMA
  | RARROW
  | LARROW
  | LE
  | GE
  | EQEQ
  | NE
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COLON of (loc)
  | LITBOOL of (bool)
  | LITINT of (bigint)
  | IF of (loc)
  | ELSE of (loc)
  | WHILE of (loc)
  | RETURN of (loc)
  | VAR of (loc)
  | LBRACE of (loc)
  | RBRACE of (loc)
  | SEMI of (loc)
  | QLID of (string)
  | QUID of (string)
  | DLID of (string)
  | DUID of (string)
  | LID of (string)
  | UID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_EAX
    | TOKEN_EBX
    | TOKEN_ECX
    | TOKEN_EDX
    | TOKEN_ESI
    | TOKEN_EDI
    | TOKEN_EBP
    | TOKEN_ESP
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_OLD
    | TOKEN_COLONCOLON
    | TOKEN_EQEQGT
    | TOKEN_LTEQEQGT
    | TOKEN_REQUIRES
    | TOKEN_ENSURES
    | TOKEN_MODIFIES
    | TOKEN_INVARIANT
    | TOKEN_ASSUME
    | TOKEN_ASSERT
    | TOKEN_GOTO
    | TOKEN_CALL
    | TOKEN_CONST
    | TOKEN_FUNCTION
    | TOKEN_RETURNS
    | TOKEN_TYPE
    | TOKEN_AXIOM
    | TOKEN_PROCEDURE
    | TOKEN_IMPLEMENTATION
    | TOKEN_AMP
    | TOKEN_NULL
    | TOKEN_INT
    | TOKEN_BOOL
    | TOKEN_DOT
    | TOKEN_UNDERSCORE
    | TOKEN_FUN
    | TOKEN_COLONEQ
    | TOKEN_REQARROW
    | TOKEN_RLOL
    | TOKEN_SLASH
    | TOKEN_BACKSLASH
    | TOKEN_AT
    | TOKEN_DOLLAR
    | TOKEN_PERCENT
    | TOKEN_SQUOTE
    | TOKEN_BQUOTE
    | TOKEN_BARBAR
    | TOKEN_PLUSPLUS
    | TOKEN_HASH
    | TOKEN_CARET
    | TOKEN_AMPAMP
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_BAR
    | TOKEN_EQ
    | TOKEN_BANG
    | TOKEN_QUESTION
    | TOKEN_COMMA
    | TOKEN_RARROW
    | TOKEN_LARROW
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_EQEQ
    | TOKEN_NE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_COLON
    | TOKEN_LITBOOL
    | TOKEN_LITINT
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_WHILE
    | TOKEN_RETURN
    | TOKEN_VAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_SEMI
    | TOKEN_QLID
    | TOKEN_QUID
    | TOKEN_DLID
    | TOKEN_DUID
    | TOKEN_LID
    | TOKEN_UID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ID
    | NONTERM_Type
    | NONTERM_Types
    | NONTERM_Triggers
    | NONTERM_Exp
    | NONTERM_Exps
    | NONTERM_AnyId
    | NONTERM_AnyIds
    | NONTERM_LoopInvs
    | NONTERM_BFormalTyp
    | NONTERM_Stmt
    | NONTERM_Stmts
    | NONTERM_Block
    | NONTERM_FormalVar
    | NONTERM_FormalVars
    | NONTERM_Formal
    | NONTERM_Formals
    | NONTERM_FormalFun
    | NONTERM_FormalFuns
    | NONTERM_Spec
    | NONTERM_Specs
    | NONTERM_Attr
    | NONTERM_ProcOrImpl
    | NONTERM_Decl
    | NONTERM_Decls
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ((loc * Ast.bdecl) list) 
