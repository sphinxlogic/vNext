

<html>

<head>

<!-- Page Title -->
<title>Max Virtual - Computer Science Applications : .Net Specialist</title>
<link rel="stylesheet" type="text/css" href="mv.css">

</head>
<!-- Outer Border -->
<body>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#2d3851" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#bfc4cb" width="100%"><tr><td>
<table cellspacing="0" cellpadding="2" border="0" bgcolor="#ffffff" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#2d3851" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#7c8aa4" width="100%"><tr><td>
<table cellspacing="1" cellpadding="0" border="0" width="100%">
<tr>
	<td>
		<table cellspacing="0" cellpadding="3" width="100%">
		<tr>
		  <td  width="50%" bgcolor="#354463" style="padding: 3px" class="update" style="font-weight:bold" align="left">Max Virtual : Computer Science Applications</td>
		  <td  width="50%" bgcolor="#354463" style="padding: 3px" class="update" style="font-weight:bold" align="right">Dubai | Mumbai | Addis Ababa</td>
		</tr>
		</table>
	</td>
</tr>

<!-- Page Title -->
<tr><td> <br>
<table cellSpacing="0" cellPadding="0" width="100%" border="0">
  <tr> 
    <td width="33%" align="center" ><IMG src="mv.jpg" alt="Max Virtual : Computer Science Applications" align="middle"></td>
  </tr>
</table>
<br>
<table cellSpacing="0" cellPadding="0" width="100%" border="0">
  <tr>
	<td width="12%">&nbsp;</td>
	<td width="76%">
		<table cellSpacing="0" cellPadding="0" width="100%" border="0">
		<tr>
			<td vAlign="bottom" align="right">
				<table cellSpacing="1" cellPadding="2" width="100%" bgColor="#354463" border="0">
					<tr>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com';"><A class="navlink" href="http://www.maxvirtual.com/Default.aspx">Home</A></td>
						<td class="navon" align="center" width="20%" OnClick="location.href='..\Samples.html';"><A class="navlink" href="..\Samples.html">Code Samples</A></td>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/OpenSrc.aspx';"><A class="navlink" href="http://www.maxvirtual.com/OpenSrc.aspx">Downloads</A>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/About.aspx';"><A class="navlink" href="http://www.maxvirtual.com/About.aspx">About</A></td></td>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/Contact.aspx';"><A class="navlink" href="http://www.maxvirtual.com/Contact.aspx">Contact</A></td>
					</tr>
				</table>
			</td>
		</tr>
		</table>
	</td>
	<td width="12%">&nbsp;</td>
</tr>
</table></td></tr>
<!-- Page Middle -->
<tr>
  <td>
	<table class="content" cellspacing="1" cellpadding="2" border="0" width="100%">
    <tr>
      <td>
        <table width="100%" cellpadding="2" cellspacing="2" border="0">
        <tr>
          <td valign="top">
  



<script language="javascript" type="text/javascript" src="mv.js"></script>
<!-- Content -->
<table cellspacing="0" cellpadding="0" border="0" width="100%">
	<tr><td><h3 align="center">CSymphony Samples</h3></td>
	<tr><td align="center"><a href="http://www.sourceforge.net/projects/csymphony">Click here to Download </a><br><br></td></tr>
	<tr><td align="center"><a href="..\Samples.html">CSymphony Code Samples List</a></td></tr>
</table>
<br>
<table width="100%">
	<tr>
		<td>
<h3 align="center"><span id="MyCSySamplesCtrl_SampleTitle">CodeConstructor</span></h3>
<table align="center" width="100%" border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td id="link1" width="75" onclick="SelCode(1)" class="backtab">CSy.xml</td>
		<td id="link2" width="75" onclick="SelCode(2)" class="backtab">C# (In)</td>
		<td id="link3" width="75" onclick="SelCode(3)" class="tab">VB (In)</td>
		<td id="link4" width="75" onclick="SelCode(4)" class="backtab">C#</td>
		<td id="link5" width="75" onclick="SelCode(5)" class="backtab">VB</td>
		<td id="link6" width="75" onclick="SelCode(6)" class="backtab">JScript</td>
		<td id="link7" width="75" onclick="SelCode(7)" class="backtab">J#</td>
		<td id="link8" width="75" onclick="SelCode(8)" class="backtab">C++</td>
		<td id="link9" width="75" onclick="SelCode(9)" class="backtab">CodeDOM </td>
		<td class="space">&nbsp;</td>
	</tr>
</table>
<table class="code" width="100%" cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td><div class="code" id="Code1" style="display:none;">
	<pre>&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
&lt;csy&gt;
	&lt;in file=&quot;InputSourcFile.Ext&quot; prvId=&quot;CS&quot;/&gt;

	&lt;codeGen&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;CS&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;VB&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;CPP&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;JSCRIPT&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;JSHARP&quot;/&gt;
	&lt;/codeGen&gt;

	&lt;codeProviders&gt;

	&lt;codeProvider prvId=&quot;CS&quot; fileExt=&quot;cs&quot; info= &quot;C#&quot; 
		assembly=&quot;System, Version=1.1.4322.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; 
		providerType = &quot;Microsoft.CSharp.CSharpCodeProvider&quot; /&gt;

	&lt;codeProvider prvId=&quot;VB&quot; fileExt=&quot;vb&quot; info= &quot;Visual Basic .NET&quot; 
		assembly=&quot;System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; 
		providerType = &quot;Microsoft.VisualBasic.VBCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;JSHARP&quot; fileExt=&quot;jsl&quot; info= &quot;JSharp&quot;
		assembly=&quot;VJSharpCodeProvider, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType = &quot;Microsoft.VJSharp.VJSharpCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;CPP&quot; fileExt=&quot;cpp&quot; info= &quot;C++.net&quot; 
		assembly=&quot;MCppCodeDomProvider, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType=&quot;Microsoft.MCpp.MCppCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;JSCRIPT&quot; fileExt=&quot;js&quot; info= &quot;Jscript.Net&quot; 
		assembly=&quot;Microsoft.JScript, , Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType = &quot;Microsoft.JScript.JScriptCodeProvider&quot; /&gt;

	&lt;/codeProviders&gt;

&lt;/csy&gt;
</pre>
</div><div class="code" id="Code2" style="display:none;">
	<pre>using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using CSymphony.Lib;

namespace CSymphony.CSy
{
	public class CSyUnit : GraphUnit
	{
		public override void Build()
		{
			ns("MyNameSpace");

			// Class : BaseType
			declClass(TypePublic, "BaseType");

			declCtor(MemPublic);
			declCtor(MemPublic, "System.String", "TestStringParameter");

			// Class : DerviedType
			declClass(TypePublic, "DerivedType", "BaseType");
			ArgRef argTestParam = "TestStringParameter";

			declCtor(MemPublic, "System.String" , argTestParam);
			parent(argTestParam);

			declCtor(MemPublic);
			parent(new Literal("test"));

			declCtor(MemPublic, "System.Int32", "TestIntParameter");
			peer();

		}
	}
}
</pre>
</div><div class="code" id="Code3" style="display:block;">
	<pre>Option Strict On
Option Explicit On

Imports System
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports System.Collections
Imports CSymphony.Lib

Namespace CSymphony.CSy
	Public Class CSyUnit
		 Inherits GraphUnit
		Overrides Public Sub Build()
			ns("MyNameSpace")

			declClass(TypePublic, "BaseType")

			declCtor(MemPublic)
			
			declCtor(MemPublic, "System.String", "TestStringParameter")

			declClass(TypePublic, "DerivedType", "BaseType")
			
			Dim argTestParam As ArgRef  = New ArgRef("TestStringParameter")

			declCtor(MemPublic, "System.String" , argTestParam.Expr())
			parent(argTestParam.Expr())

			declCtor(MemPublic)
			parent(newLit("test"))

			declCtor(MemPublic, "System.Int32", "TestIntParameter")
			peer()
		End Sub
	End Class
End Namespace
			</pre>
</div><div class="code" id="Code4" style="display:none;">
	<pre>//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MyNameSpace
{
    
    
    public class BaseType
    {
        
        public BaseType()
        {
        }
        
        public BaseType(string TestStringParameter)
        {
        }
    }
    
    public class DerivedType : BaseType
    {
        
        public DerivedType(string TestStringParameter) : 
                base(TestStringParameter)
        {
        }
        
        public DerivedType() : 
                base("test")
        {
        }
        
        public DerivedType(int TestIntParameter) : 
                this()
        {
        }
    }
}
</pre>
</div><div class="code" id="Code5" style="display:none;">
	<pre>'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace MyNameSpace
    
    Public Class BaseType
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal TestStringParameter As String)
            MyBase.New
        End Sub
    End Class
    
    Public Class DerivedType
        Inherits BaseType
        
        Public Sub New(ByVal TestStringParameter As String)
            MyBase.New(TestStringParameter)
        End Sub
        
        Public Sub New()
            MyBase.New("test")
        End Sub
        
        Public Sub New(ByVal TestIntParameter As Integer)
            Me.New()
        End Sub
    End Class
End Namespace
</pre>
</div><div class="code" id="Code6" style="display:none;">
	<pre>//------------------------------------------------------------------------------
/// <autogenerated>
///     This code was generated by a tool.
///     Runtime Version: 1.1.4322.573
///
///     Changes to this file may cause incorrect behavior and will be lost if 
///     the code is regenerated.
/// </autogenerated>
//------------------------------------------------------------------------------

//@cc_on
//@set @debug(off)


package MyNameSpace
{
    
    public class BaseType
    {
        
        public function BaseType()
        {
            
        }
        
        public function BaseType(TestStringParameter : System.String)
        {
            
        }
    }
    
    public class DerivedType extends BaseType
    {
        
        public function DerivedType(TestStringParameter : System.String)
        {
            super(TestStringParameter);
            
        }
        
        public function DerivedType()
        {
            super("test");
            
        }
        
        public function DerivedType(TestIntParameter : int)
        {
            this();
            
        }
    }
}
</pre>
</div><div class="code" id="Code7" style="display:none;">
	<pre>/*******************************************************************************
 *
 *     This code was generated by a tool.
 *     Runtime Version: 1.1.4322.573
 *
 *     Changes to this file may cause incorrect behavior and will be lost if 
 *     the code is regenerated.
 *
 ******************************************************************************/

package MyNameSpace;


public class BaseType
{
    
    public BaseType()
    {
    }
    
    public BaseType(String TestStringParameter)
    {
    }
}

public class DerivedType extends BaseType
{
    
    public DerivedType(String TestStringParameter)
    {
        super(TestStringParameter);
    }
    
    public DerivedType()
    {
        super("test");
    }
    
    public DerivedType(int TestIntParameter)
    {
        this();
    }
}
</pre>
</div><div class="code" id="Code8" style="display:none;">
	<pre>#pragma once 

#using &lt;mscorlib.dll&gt;

namespace MyNameSpace
{
    
    using namespace System;
    public __gc class BaseType;
    public __gc class DerivedType;
    
    
    public __gc class BaseType
    {
        
        public: BaseType();
        public: BaseType(System::String *  TestStringParameter);};
    
    public __gc class DerivedType : public MyNameSpace::BaseType
    {
        
        public: DerivedType(System::String *  TestStringParameter);
        public: DerivedType();
        public: DerivedType(System::Int32 TestIntParameter);};
    
    
    inline BaseType::BaseType()
    {
    }
    
    inline BaseType::BaseType(System::String *  TestStringParameter)
    {
    }
    
    
    inline DerivedType::DerivedType(System::String *  TestStringParameter) : 
            BaseType(TestStringParameter)
    {
    }
    
    inline DerivedType::DerivedType() : 
            BaseType(S"test")
    {
    }
    
    inline DerivedType::DerivedType(System::Int32 TestIntParameter)
    {
        DerivedType();
    }
}
</pre>
</div><div class="code" id="Code9" style="display:none;">
	<pre>[Visual Basic] 
' This example declares two types, one of which inherits from another,
' and creates a set of different styles of constructors using CodeConstructor.

' Creates a new CodeCompileUnit to contain the program graph.
Dim CompileUnit As New CodeCompileUnit()
' Declares a new namespace object and names it.
Dim Samples As New CodeNamespace("Samples")
' Adds the namespace object to the compile unit.
CompileUnit.Namespaces.Add(Samples)
' Adds a new namespace import for the System namespace.
Samples.Imports.Add(New CodeNamespaceImport("System"))

' Declares a new type and names it.
Dim BaseType As New CodeTypeDeclaration("BaseType")
' Adds the new type to the namespace object's type collection.
Samples.Types.Add(BaseType)

' Declares a default constructor that takes no arguments.
Dim defaultConstructor As New CodeConstructor()
defaultConstructor.Attributes = MemberAttributes.Public
' Adds the constructor to the Members collection of the BaseType.
BaseType.Members.Add(defaultConstructor)

' Declares a constructor that takes a string argument.
Dim stringConstructor As New CodeConstructor()
stringConstructor.Attributes = MemberAttributes.Public
' Declares a parameter of type string named "TestStringParameter".
stringConstructor.Parameters.Add(New CodeParameterDeclarationExpression("System.String", "TestStringParameter"))
' Adds the constructor to the Members collection of the BaseType.
BaseType.Members.Add(stringConstructor)

' Declares a type that derives from BaseType and names it.
Dim DerivedType As New CodeTypeDeclaration("DerivedType")
' The DerivedType class inherits from the BaseType class.
DerivedType.BaseTypes.Add(New CodeTypeReference("BaseType"))
' Adds the new type to the namespace object's type collection.
Samples.Types.Add(DerivedType)

' Declare a constructor that takes a string argument and calls the base class constructor with it.
Dim baseStringConstructor As New CodeConstructor()
baseStringConstructor.Attributes = MemberAttributes.Public
' Declares a parameter of type string named "TestStringParameter".    
baseStringConstructor.Parameters.Add(New CodeParameterDeclarationExpression("System.String", "TestStringParameter"))
' Calls a base class constructor with the TestStringParameter parameter.
baseStringConstructor.BaseConstructorArgs.Add(New CodeVariableReferenceExpression("TestStringParameter"))
' Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(baseStringConstructor)

' Declares a constructor overload that calls another constructor for the type with a predefined argument.
Dim overloadConstructor As New CodeConstructor()
overloadConstructor.Attributes = MemberAttributes.Public
' Sets the argument to pass to a base constructor method.
overloadConstructor.ChainedConstructorArgs.Add(New CodePrimitiveExpression("Test"))
' Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(overloadConstructor)

' Declares a constructor overload that calls another constructor for the type.
Dim overloadConstructor2 As New CodeConstructor()
overloadConstructor2.Attributes = MemberAttributes.Public
overloadConstructor2.Parameters.Add( New CodeParameterDeclarationExpression("System.Int32", "TestIntParameter") )
' Sets the argument to pass to a base constructor method.
overloadConstructor2.ChainedConstructorArgs.Add(New CodeSnippetExpression(""))
' Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(overloadConstructor2)

        ' A Visual Basic code generator produces the following source code for the preceeding example code:
        
        ' Public Class BaseType
        '     
        '     Public Sub New()
        '         MyBase.New
        '     End Sub
        '        
        '     Public Sub New(ByVal TestStringParameter As String)
        '         MyBase.New
        '     End Sub
        ' End Class
        '    
        ' Public Class DerivedType
        '     Inherits BaseType
        '        
        '     Public Sub New(ByVal TestStringParameter As String)
        '         MyBase.New(TestStringParameter)
        '     End Sub
        '     
        '     Public Sub New()
        '         Me.New("Test")
        '     End Sub
        '
        '     Public Sub New(ByVal TestIntParameter As Integer)
        '         Me.New()
        '     End Sub
        ' End Class

[C#] 
// This example declares two types, one of which inherits from another,
// and creates a set of different styles of constructors using CodeConstructor.

// Creates a new CodeCompileUnit to contain the program graph.
CodeCompileUnit CompileUnit = new CodeCompileUnit();
// Declares a new namespace object and names it.
CodeNamespace Samples = new CodeNamespace("Samples");
// Adds the namespace object to the compile unit.
CompileUnit.Namespaces.Add( Samples );
// Adds a new namespace import for the System namespace.
Samples.Imports.Add( new CodeNamespaceImport("System") );            

// Declares a new type and names it.
CodeTypeDeclaration BaseType = new CodeTypeDeclaration("BaseType");                                                
// Adds the new type to the namespace object's type collection.
Samples.Types.Add(BaseType);

// Declares a default constructor that takes no arguments.
CodeConstructor defaultConstructor = new CodeConstructor();
defaultConstructor.Attributes = MemberAttributes.Public;
// Adds the constructor to the Members collection of the BaseType.
BaseType.Members.Add(defaultConstructor);

// Declares a constructor that takes a string argument.
CodeConstructor stringConstructor = new CodeConstructor();
stringConstructor.Attributes = MemberAttributes.Public;
// Declares a parameter of type string named "TestStringParameter".
stringConstructor.Parameters.Add( new CodeParameterDeclarationExpression("System.String", "TestStringParameter") );
// Adds the constructor to the Members collection of the BaseType.
BaseType.Members.Add(stringConstructor);
            
// Declares a type that derives from BaseType and names it.
CodeTypeDeclaration DerivedType = new CodeTypeDeclaration("DerivedType");
// The DerivedType class inherits from the BaseType class.
DerivedType.BaseTypes.Add( new CodeTypeReference("BaseType") );
// Adds the new type to the namespace object's type collection.
Samples.Types.Add(DerivedType);        
        
// Declare a constructor that takes a string argument and calls the base class constructor with it.
CodeConstructor baseStringConstructor = new CodeConstructor();
baseStringConstructor.Attributes = MemberAttributes.Public;
// Declares a parameter of type string named "TestStringParameter".    
baseStringConstructor.Parameters.Add( new CodeParameterDeclarationExpression("System.String", "TestStringParameter") );
// Calls a base class constructor with the TestStringParameter parameter.
baseStringConstructor.BaseConstructorArgs.Add( new CodeVariableReferenceExpression("TestStringParameter") );
// Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(baseStringConstructor);

// Declares a constructor overload that calls another constructor for the type with a predefined argument.
CodeConstructor overloadConstructor = new CodeConstructor();
overloadConstructor.Attributes = MemberAttributes.Public;
// Sets the argument to pass to a base constructor method.
overloadConstructor.ChainedConstructorArgs.Add( new CodePrimitiveExpression("Test") );
// Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(overloadConstructor);        

// Declares a constructor overload that calls the default constructor for the type.
CodeConstructor overloadConstructor2 = new CodeConstructor();
overloadConstructor2.Attributes = MemberAttributes.Public;
overloadConstructor2.Parameters.Add( new CodeParameterDeclarationExpression("System.Int32", "TestIntParameter") );
// Sets the argument to pass to a base constructor method.
overloadConstructor2.ChainedConstructorArgs.Add( new CodeSnippetExpression("") );
// Adds the constructor to the Members collection of the DerivedType.
DerivedType.Members.Add(overloadConstructor2);            
        
// A C# code generator produces the following source code for the preceeding example code:

// public class BaseType {
//     
//     public BaseType() {
//     }
//        
//     public BaseType(string TestStringParameter) {
//     }
// }
//    
// public class DerivedType : BaseType {
//        
//     public DerivedType(string TestStringParameter) : 
//             base(TestStringParameter) {
//     }
//        
//     public DerivedType() : 
//             this("Test") {
//     }
//
//     public DerivedType(int TestIntParameter) : 
//                this() {
//     }
// }
</pre>
</div></td>
	</tr>
</table>
</td>
	</tr>
</table>
<!-- Copyright Info -->
            </td>
            </tr>
            </table>
          </td>

        </tr>
        </table>
      </td>
</tr>

    <!-- Last Update -->
<tr>
     <td align="right" class="update" bgcolor="#5f7797">   Last Update: 15th September 2004</td>
</tr>
<tr>
  <td align="right" class="copyright">
    &copy; 2004 Max Virtual, LLC</td>
</tr>

</table>
</td></tr></table>
</td></tr></table>
</td></tr></table>
</td></tr></table>
</td></tr></table>

</body>
</html>
