

<html>

<head>

<!-- Page Title -->
<title>Max Virtual - Computer Science Applications : .Net Specialist</title>
<link rel="stylesheet" type="text/css" href="mv.css">

</head>
<!-- Outer Border -->
<body>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#2d3851" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#bfc4cb" width="100%"><tr><td>
<table cellspacing="0" cellpadding="2" border="0" bgcolor="#ffffff" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#2d3851" width="100%"><tr><td>
<table cellspacing="0" cellpadding="1" border="0" bgcolor="#7c8aa4" width="100%"><tr><td>
<table cellspacing="1" cellpadding="0" border="0" width="100%">
<tr>
	<td>
		<table cellspacing="0" cellpadding="3" width="100%">
		<tr>
		  <td  width="50%" bgcolor="#354463" style="padding: 3px" class="update" style="font-weight:bold" align="left">Max Virtual : Computer Science Applications</td>
		  <td  width="50%" bgcolor="#354463" style="padding: 3px" class="update" style="font-weight:bold" align="right">Dubai | Mumbai | Addis Ababa</td>
		</tr>
		</table>
	</td>
</tr>

<!-- Page Title -->
<tr><td> <br>
<table cellSpacing="0" cellPadding="0" width="100%" border="0">
  <tr> 
    <td width="33%" align="center" ><IMG src="mv.jpg" alt="Max Virtual : Computer Science Applications" align="middle"></td>
  </tr>
</table>
<br>
<table cellSpacing="0" cellPadding="0" width="100%" border="0">
  <tr>
	<td width="12%">&nbsp;</td>
	<td width="76%">
		<table cellSpacing="0" cellPadding="0" width="100%" border="0">
		<tr>
			<td vAlign="bottom" align="right">
				<table cellSpacing="1" cellPadding="2" width="100%" bgColor="#354463" border="0">
					<tr>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com';"><A class="navlink" href="http://www.maxvirtual.com/Default.aspx">Home</A></td>
						<td class="navon" align="center" width="20%" OnClick="location.href='..\Samples.html';"><A class="navlink" href="..\Samples.html">Code Samples</A></td>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/OpenSrc.aspx';"><A class="navlink" href="http://www.maxvirtual.com/OpenSrc.aspx">Downloads</A>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/About.aspx';"><A class="navlink" href="http://www.maxvirtual.com/About.aspx">About</A></td></td>
						<td class="navoff" align="center" width="20%" OnClick="location.href='http://www.maxvirtual.com/Contact.aspx';"><A class="navlink" href="http://www.maxvirtual.com/Contact.aspx">Contact</A></td>
					</tr>
				</table>
			</td>
		</tr>
		</table>
	</td>
	<td width="12%">&nbsp;</td>
</tr>
</table></td></tr>
<!-- Page Middle -->
<tr>
  <td>
	<table class="content" cellspacing="1" cellpadding="2" border="0" width="100%">
    <tr>
      <td>
        <table width="100%" cellpadding="2" cellspacing="2" border="0">
        <tr>
          <td valign="top">
  



<script language="javascript" type="text/javascript" src="mv.js"></script>
<!-- Content -->
<table cellspacing="0" cellpadding="0" border="0" width="100%">
	<tr><td><h3 align="center">CSymphony Samples</h3></td>
	<tr><td align="center"><a href="http://www.sourceforge.net/projects/csymphony">Click here to Download </a><br><br></td></tr>
	<tr><td align="center"><a href="..\Samples.html">CSymphony Code Samples List</a></td></tr>
</table>
<br>
<table width="100%">
	<tr>
		<td>
<h3 align="center"><span id="MyCSySamplesCtrl_SampleTitle">CodeIterationStatement</span></h3>
<table align="center" width="100%" border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td id="link1" width="75" onclick="SelCode(1)" class="backtab">CSy.xml</td>
		<td id="link2" width="75" onclick="SelCode(2)" class="backtab">C# (In)</td>
		<td id="link3" width="75" onclick="SelCode(3)" class="tab">VB (In)</td>
		<td id="link4" width="75" onclick="SelCode(4)" class="backtab">C#</td>
		<td id="link5" width="75" onclick="SelCode(5)" class="backtab">VB</td>
		<td id="link6" width="75" onclick="SelCode(6)" class="backtab">JScript</td>
		<td id="link7" width="75" onclick="SelCode(7)" class="backtab">J#</td>
		<td id="link8" width="75" onclick="SelCode(8)" class="backtab">C++</td>
		<td id="link9" width="75" onclick="SelCode(9)" class="backtab">CodeDOM </td>
		<td class="space">&nbsp;</td>
	</tr>
</table>
<table class="code" width="100%" cellspacing="0" cellpadding="0" border="0">
	<tr>
		<td><div class="code" id="Code1" style="display:none;">
	<pre>&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
&lt;csy&gt;
	&lt;in file=&quot;InputSourcFile.Ext&quot; prvId=&quot;CS&quot;/&gt;

	&lt;codeGen&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;CS&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;VB&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;CPP&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;JSCRIPT&quot;/&gt;
	&lt;out path=&quot;out&quot; prvId=&quot;JSHARP&quot;/&gt;
	&lt;/codeGen&gt;

	&lt;codeProviders&gt;

	&lt;codeProvider prvId=&quot;CS&quot; fileExt=&quot;cs&quot; info= &quot;C#&quot; 
		assembly=&quot;System, Version=1.1.4322.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; 
		providerType = &quot;Microsoft.CSharp.CSharpCodeProvider&quot; /&gt;

	&lt;codeProvider prvId=&quot;VB&quot; fileExt=&quot;vb&quot; info= &quot;Visual Basic .NET&quot; 
		assembly=&quot;System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot; 
		providerType = &quot;Microsoft.VisualBasic.VBCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;JSHARP&quot; fileExt=&quot;jsl&quot; info= &quot;JSharp&quot;
		assembly=&quot;VJSharpCodeProvider, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType = &quot;Microsoft.VJSharp.VJSharpCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;CPP&quot; fileExt=&quot;cpp&quot; info= &quot;C++.net&quot; 
		assembly=&quot;MCppCodeDomProvider, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType=&quot;Microsoft.MCpp.MCppCodeProvider&quot; /&gt;
	
	&lt;codeProvider prvId=&quot;JSCRIPT&quot; fileExt=&quot;js&quot; info= &quot;Jscript.Net&quot; 
		assembly=&quot;Microsoft.JScript, , Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot; 
		providerType = &quot;Microsoft.JScript.JScriptCodeProvider&quot; /&gt;

	&lt;/codeProviders&gt;

&lt;/csy&gt;
</pre>
</div><div class="code" id="Code2" style="display:none;">
	<pre>using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using CSymphony.Lib;

namespace CSymphony.CSy
{
	public class CSyUnit : GraphUnit
	{
		public override void Build()
		{
			ns("MyNameSpace");

			declClass(TypePublic, "MyClass");
			declMethod(MemPublic, "System.Void", "MonMethod");

			VarRef testInt = declVar("System.Int32", "testInt", new Literal (0));
			forOn(equate (testInt, new Literal(1)));
			forTest(testInt < new Literal (10));
			forInc(testInt + new Literal(1));
			hi ("for statements come here");
			MethodRef writeLine = new MethodRef ("System.Console", "WriteLine");
			MethodRef testIntToStr = new MethodRef (testInt, "ToString");

			enter (ex (writeLine, ex(testIntToStr)));
			forOff();
	
		}
	}
}
</pre>
</div><div class="code" id="Code3" style="display:block;">
	<pre>Option Strict Off
Option Explicit On

Imports System
Imports System.CodeDom
Imports System.CodeDom.Compiler
Imports System.Collections
Imports CSymphony.Lib

Namespace CSymphony.CSy
	Public Class CSyUnit
		 Inherits GraphUnit
		Overrides Public Sub Build()
			ns("MyNameSpace")

			declClass(TypePublic, "MyClass")
			declMethod(MemPublic, "System.Void", "MonMethod")

			Dim testInt As VarRef = declVar("System.Int32", "testInt", newLit(0))
			
			forOn(equate (testInt.Expr(), newLit(1)))
			forTest(oper(testInt.Expr(), lt, newLit(10)))
			forInc(oper(testInt.Expr(), add, newLit(1)))
			hi ("for statements come here")
			
			Dim writeLine As MethodRef  = New MethodRef ("System.Console", "WriteLine")
			Dim testIntToStr As MethodRef = New MethodRef (testInt.Expr(), "ToString")

			enter (ex (writeLine, ex(testIntToStr)))
			forOff()
	
		End Sub
	End Class
End Namespace
			</pre>
</div><div class="code" id="Code4" style="display:none;">
	<pre>//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace MyNameSpace
{
    
    
    public class MyClass
    {
        
        public virtual void MonMethod()
        {
            int testInt = 0;
            for (testInt = 1; (testInt < 10); (testInt + 1))
            {
                // for statements come here
                System.Console.WriteLine(testInt.ToString());
            }
        }
    }
}
</pre>
</div><div class="code" id="Code5" style="display:none;">
	<pre>'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace MyNameSpace
    
    Public Class [MyClass]
        
        Public Overridable Sub MonMethod()
            Dim testInt As Integer = 0
            testInt = 1
            Do While (testInt < 10)
                'for statements come here
                System.Console.WriteLine(testInt.ToString)
                (testInt + 1)
            Loop
        End Sub
    End Class
End Namespace
</pre>
</div><div class="code" id="Code6" style="display:none;">
	<pre>//------------------------------------------------------------------------------
/// <autogenerated>
///     This code was generated by a tool.
///     Runtime Version: 1.1.4322.573
///
///     Changes to this file may cause incorrect behavior and will be lost if 
///     the code is regenerated.
/// </autogenerated>
//------------------------------------------------------------------------------

//@cc_on
//@set @debug(off)


package MyNameSpace
{
    
    public class MyClass
    {
        
        public function MonMethod()
        {
            var testInt : int = 0;
            for (testInt = 1; (testInt < 10); (testInt + 1))
            {
                //for statements come here
                System.Console.WriteLine(testInt.ToString());
            }
        }
    }
}
</pre>
</div><div class="code" id="Code7" style="display:none;">
	<pre>/*******************************************************************************
 *
 *     This code was generated by a tool.
 *     Runtime Version: 1.1.4322.573
 *
 *     Changes to this file may cause incorrect behavior and will be lost if 
 *     the code is regenerated.
 *
 ******************************************************************************/

package MyNameSpace;


public class MyClass
{
    
    public void MonMethod()
    {
        int testInt = 0;
        for (testInt = 1; (testInt < 10); (testInt + 1))
        {
            // for statements come here
            System.Console.WriteLine(testInt.ToString());
        }
    }
}
</pre>
</div><div class="code" id="Code8" style="display:none;">
	<pre>#pragma once 

#using &lt;mscorlib.dll&gt;

namespace MyNameSpace
{
    
    using namespace System;
    public __gc class MyClass;
    
    
    public __gc class MyClass
    {
        
        public: virtual System::Void MonMethod();
    };
    
    
    inline System::Void MyClass::MonMethod()
    {
        System::Int32 testInt = 0;
        for (        testInt = 1; (testInt < 10);         (testInt + 1))
        {
            // for statements come here
            System::Console::WriteLine(testInt.ToString());
        }
    };
}
</pre>
</div><div class="code" id="Code9" style="display:none;">
	<pre>[Visual Basic] 
' Declares and initializes an integer variable named testInt.
Dim testInt As New CodeVariableDeclarationStatement(GetType(Integer), "testInt", New CodePrimitiveExpression(0))

' Creates a for loop that sets testInt to 0 and continues incrementing testInt by 1 each loop until testInt is not less than 10.
   ' initStatement parameter for pre-loop initialization.
   ' testExpression parameter indicates the epxression to test for continuation condition.
   ' incrementStatement parameter indicates statement to execute after each iteration.
   ' statements parameter contains the statements to execute during each interation of the loop.
   ' Each loop iteration the value of the integer is output using the Console.WriteLine method.

Dim forLoop As New CodeIterationStatement( _
   New CodeAssignStatement(New CodeVariableReferenceExpression("testInt"), New CodePrimitiveExpression(1)), _
   New CodeBinaryOperatorExpression(New CodeVariableReferenceExpression("testInt"), _ 
       CodeBinaryOperatorType.LessThan, New CodePrimitiveExpression(10)), _
   New CodeAssignStatement(New CodeVariableReferenceExpression("testInt"), _
   New CodeBinaryOperatorExpression(New CodeVariableReferenceExpression("testInt"), _
       CodeBinaryOperatorType.Add, New CodePrimitiveExpression(1))), _
   New CodeStatement() {New CodeExpressionStatement( _
       New CodeMethodInvokeExpression(New CodeMethodReferenceExpression(New CodeTypeReferenceExpression("Console"), "WriteLine"), _ 
               New CodeMethodInvokeExpression(New CodeVariableReferenceExpression("testInt"), "ToString")))})


        ' A Visual Basic code generator produces the following source code for the preceeding example code:

        '     Dim testInt As Integer = 0
        '     testInt = 1
        '     Do While (testInt < 10)
        '         Console.WriteLine(testInt.ToString)
        '         testInt = (testInt + 1)
[C#] 
// Declares and initializes an integer variable named testInt.
CodeVariableDeclarationStatement testInt = new CodeVariableDeclarationStatement(typeof(int), "testInt", new CodePrimitiveExpression(0) );

// Creates a for loop that sets testInt to 0 and continues incrementing testInt by 1 each loop until testInt is not less than 10.
CodeIterationStatement forLoop = new CodeIterationStatement(
    // initStatement parameter for pre-loop initialization.
    new CodeAssignStatement( new CodeVariableReferenceExpression("testInt"), new CodePrimitiveExpression(1) ),
    // testExpression parameter to test for continuation condition.
    new CodeBinaryOperatorExpression( new CodeVariableReferenceExpression("testInt"), 
        CodeBinaryOperatorType.LessThan, new CodePrimitiveExpression(10) ),
    // incrementStatement parameter indicates statement to execute after each iteration.
    new CodeAssignStatement( new CodeVariableReferenceExpression("testInt"), new CodeBinaryOperatorExpression( 
        new CodeVariableReferenceExpression("testInt"), CodeBinaryOperatorType.Add, new CodePrimitiveExpression(1) )),
    // statements parameter contains the statements to execute during each interation of the loop.
    // Each loop iteration the value of the integer is output using the Console.WriteLine method.
    new CodeStatement[] { new CodeExpressionStatement( new CodeMethodInvokeExpression( new CodeMethodReferenceExpression( 
        new CodeTypeReferenceExpression("Console"), "WriteLine" ), new CodeMethodInvokeExpression( 
        new CodeVariableReferenceExpression("testInt"), "ToString" ) ) ) } );

// A C# code generator produces the following source code for the preceeding example code:

//     int testInt = 0;
//     for (testInt = 1; (testInt < 10); testInt = (testInt + 1)) {
//        Console.WriteLine(testInt.ToString());
</pre>
</div></td>
	</tr>
</table>
</td>
	</tr>
</table>
<!-- Copyright Info -->
            </td>
            </tr>
            </table>
          </td>

        </tr>
        </table>
      </td>
</tr>

    <!-- Last Update -->
<tr>
     <td align="right" class="update" bgcolor="#5f7797">   Last Update: 15th September 2004</td>
</tr>
<tr>
  <td align="right" class="copyright">
    &copy; 2004 Max Virtual, LLC</td>
</tr>

</table>
</td></tr></table>
</td></tr></table>
</td></tr></table>
</td></tr></table>
</td></tr></table>

</body>
</html>
