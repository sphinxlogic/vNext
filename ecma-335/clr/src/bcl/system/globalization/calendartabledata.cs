// ==++==
//
//   
//    Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
//
// ==--==
// The file is autogenerated by nlpgen.pl.

// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.

namespace System.Globalization
{

    using System;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Collections;


    //
    //

    //
    // The list of data fields:
    // Keep the fields that can be overridden in the beginning of the fields
    // so that we can check if user override values should be read quickly.
    //


    // StructLayout is needed here otherwise compiler can re-arrange the fields.
    [StructLayout(LayoutKind.Sequential, Pack=2)]
    internal struct CalendarTableData
    {
        internal ushort iCalendar                ; // Calendar #.  1-based.  (record 0 is cal. 1, record 12 is cal 13
        internal ushort iTwoDigitYearMax         ; // Max 2 digit year (for Y2K bug data entry)
        internal uint   saShortDate              ; // Short Data format, default first
        internal uint   saYearMonth              ; // Year/Month Data format, default first
        internal uint   saLongDate               ; // Long Data format, default first
        internal uint   saEraNames               ; // Names of Eras
        internal uint   waaEraRanges             ; // Era Range Data: [0] - Era # (index to era names); [1] - Era start year; [2] - Start Month; [3] - Start Day; [4] - offset to Gregorian year (1988); [5] minimum era year for this era
        internal uint   saDayNames               ; // Day Names, null to use locale data, starts on Sunday
        internal uint   saAbbrevDayNames         ; // Abbrev Day Names, null to use locale data, starts on Sunday
        internal uint   saMonthNames             ; // Month Names (13)
        internal uint   saAbbrevMonthNames       ; // Abbrev Month Names (13)
        internal ushort iCurrentEra              ; // 
        internal ushort iFormatFlags             ; // The DateTime formatting/parsing flag for this calendar. It indcates things like if genitive form or leap year month is used.
        internal uint   sName                    ; // 
        internal uint   sMonthDay                ; // 
        internal uint   saAbbrevEraNames         ; // 
        internal uint   saAbbrevEnglishEraNames  ; // 
        internal uint   saLeapYearMonthNames     ; // Multiple strings for the month names in a leap year.
        internal uint   saSuperShortDayNames     ; // Super short Day of week names
        internal ushort _padding1;                 // padding to keep record 64 bit aligned
        internal ushort _padding2;                 // padding to keep record 64 bit aligned
        // Constants
        internal const int sizeofDataFields = 72; // Size of our data record (64-bit(QWORD) aligned)

    }
}

