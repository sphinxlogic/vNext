// ==++==
//
//   
//    Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
//
// ==--==
// The file is autogenerated by nlpgen.pl.

// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.

namespace System.Globalization {
    using System.Runtime.InteropServices;

    ////////////////////////////////////////////////////////////////////////
    //
    // This header is in the beginning of the data table, and it contains offset
    // which point to little-Endian and big-Endian versions of the real header
    // (BaseInfoHeader) and the headers will contain offset to different data
    // of little-Endian and big-Endian.
    //
    ////////////////////////////////////////////////////////////////////////    

    // StructLayout is needed here otherwise compiler can re-arrange the fields.
    [StructLayout(LayoutKind.Sequential, Pack=2)]
    internal struct EndianessHeader    {
        internal uint leOffset; // DWORD: The offset (from the beginning of the file) to LE BaseInfoHeader.  This might be a value of 0 if one version is in the table.
        internal uint beOffset; // DWORD: The offset (from the beginning of the file) to BE BaseInfoHeader.  This might be a value of 0 if one version is in the table.
    }

    //
    //
    //

    [StructLayout(LayoutKind.Sequential, Pack=2)]
    internal struct CultureTableHeader
    {   // Generic header information
        internal uint   version;                   // DWORD version
        internal ushort hash0;                     // WORD[8]
        internal ushort hash1;
        internal ushort hash2;
        internal ushort hash3;
        internal ushort hash4;
        internal ushort hash5;
        internal ushort hash6;
        internal ushort hash7;
        internal ushort headerSize;                // WORD: The size of the header ((bytes) irrelevent right now because all of our sections have offsets)

        // Culture Table Data
        internal ushort numLcidItems;              // WORD: The number of items in the LCID index.
        internal ushort numCultureItems;           // WORD: The number of culture data items in the table.
        internal ushort sizeCultureItem;           // WORD: The total size of each culture data item (bytes)
        internal uint   offsetToCultureItemData;   // DWORD: The offset (from the beginning of the file) to the culture data items (bytes).

        // Culture Table Indexing Data
        internal ushort numCultureNames;           // WORD: The number of items in culture name index table.
        internal ushort numRegionNames;            // WORD: The number of items in region name index table.
        internal uint   cultureIDTableOffset;      // DWORD: Offset (in bytes) to Culture LCID Offset Table. The offset is related to the beginning of the file (in bytes).
        internal uint   cultureNameTableOffset;    // DWORD: Offset (in bytes) to Culture Name (en-us) Offset Table.  The offset is related to the beginning of the file (bytes).
        internal uint   regionNameTableOffset;     // DWORD: Offset (in bytes) to Region Name (us) Offset Table.  The offset is related to the beginning of the file (bytes).

        // Calendar Table Data
        internal ushort numCalendarItems;          // WORD: The number of calendar data items in the table.
        internal ushort sizeCalendarItem;          // WORD: The total size of each calendar data item (bytes)
        internal uint   offsetToCalendarItemData;  // DWORD: The offset (from the beginning of the file) to the calendar data items (bytes).

        // Data Pool
        internal uint   offsetToDataPool;          // DWORD: Offset (bytes) to the Data Pool (for strings, etc.)

        // Ietf Name Index
        internal ushort numIetfNames;              // WORD: The number of IETF names in the IETF name index table.
        internal ushort Unused_Padding;            // WORD: Keep it short aligned.
        internal uint   ietfNameTableOffset;       // DWORD: Offset (in bytes) to the ietf name Offset Table

    }

}
