// ==++==
//
//   
//    Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
//
// ==--==
// The file is autogenerated by nlpgen.pl.

// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.
// DO NOT EDIT THIS FILE MANUALLY.

namespace System.Globalization
{

    using System;
    using System.IO;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Collections;


    //
    //

    //
    // The list of data fields:
    // Keep the fields that can be overridden in the beginning of the fields
    // so that we can check if user override values should be read quickly.
    //


    // StructLayout is needed here otherwise compiler can re-arrange the fields.
    [StructLayout(LayoutKind.Sequential, Pack=2)]
    internal struct CultureTableData
    {
        internal uint   sName                    ; // locale name (ie: en-us)
        internal uint   sIetfLanguage            ; // RFC 3066 IETF Language Name
        internal ushort iLanguage                ; // locale ID (0409) - NO sort information
        internal ushort iParent                  ; // Parent locale/culture LCID
        internal ushort iDigits                  ; // (user can override) number of fractional digits
        internal ushort iNegativeNumber          ; // (user can override) negative number format
        internal ushort iCurrencyDigits          ; // (user can override) # local monetary fractional digits
        internal ushort iCurrency                ; // (user can override) positive currency format
        internal ushort iNegativeCurrency        ; // (user can override) negative currency format
        internal ushort iLeadingZeros            ; // (user can override) leading zeros 0 = no leading zeros, 1 = leading zeros
        internal ushort iFlags                   ; // Flags for the culture
        internal ushort iFirstDayOfWeek          ; // (user can override) first day of week
        internal ushort iFirstWeekOfYear         ; // (user can override) first week of year
        internal ushort iCountry                 ; // (user can override) country code (RegionInfo)
        internal ushort iMeasure                 ; // (user can override) system of measurement 0=metric, 1=US (RegionInfo)
        internal ushort iDigitSubstitution       ; // (user can override) Digit substitution 0=context, 1=none/arabic, 2=Native/national (2 seems to be unused) (Windows Only)
        internal uint   waGrouping               ; // (user can override) grouping of digits
        internal uint   waMonetaryGrouping       ; // (user can override) monetary grouping of digits
        internal uint   sListSeparator           ; // (user can override) list separator
        internal uint   sDecimalSeparator        ; // (user can override) decimal separator
        internal uint   sThousandSeparator       ; // (user can override) thousands separator
        internal uint   sCurrency                ; // (user can override) local monetary symbol
        internal uint   sMonetaryDecimal         ; // (user can override) monetary decimal separator
        internal uint   sMonetaryThousand        ; // (user can override) monetary thousands separator
        internal uint   sPositiveSign            ; // (user can override) positive sign
        internal uint   sNegativeSign            ; // (user can override) negative sign
        internal uint   sAM1159                  ; // (user can override) AM designator
        internal uint   sPM2359                  ; // (user can override) PM designator
        internal uint   saNativeDigits           ; // (user can override) native characters for digits 0-9
        internal uint   saTimeFormat             ; // (user can override) time format
        internal uint   saShortDate              ; // (user can override) short date format
        internal uint   saLongDate               ; // (user can override) long date format
        internal uint   saYearMonth              ; // (user can override) year month format
        internal uint   saDuration               ; // time duration format
        internal ushort iDefaultLanguage         ; // Default language if this is a rare lcid (Windows Only)
        internal ushort iDefaultAnsiCodePage     ; // default ansi code page ID (ACP)
        internal ushort iDefaultOemCodePage      ; // default oem code page ID (OCP or OEM)
        internal ushort iDefaultMacCodePage      ; // default macintosh code page
        internal ushort iDefaultEbcdicCodePage   ; // default EBCDIC code page
        internal ushort iGeoId                   ; // GeoId (Windows Only)
        internal ushort iPaperSize               ; // default paper size (RegionInfo)
        internal ushort iIntlCurrencyDigits      ; // # of digits after decimal in intl currency format (Windows Only)
        internal uint   waCalendars              ; // all available calendar type(s), semicolon seperated, ie: '1;6'. The first one is the default calendar.
        internal uint   sAbbrevLang              ; // abbreviated language name
        internal uint   sISO639Language          ; // ISO 639 Language Name
        internal uint   sEnglishLanguage         ; // English name for this language (Windows Only)
        internal uint   sNativeLanguage          ; // Native name of this language (Windows Only)
        internal uint   sEnglishCountry          ; // english country name (RegionInfo)
        internal uint   sNativeCountry           ; // native country name (Windows Only)
        internal uint   sAbbrevCountry           ; // abbreviated country name (RegionInfo)
        internal uint   sISO3166CountryName      ; //  (RegionInfo)
        internal uint   sIntlMonetarySymbol      ; // international monetary symbol (RegionInfo)
        internal uint   sEnglishCurrency         ; // English name for this currency (Windows Only)
        internal uint   sNativeCurrency          ; // Native name for this currency (Windows Only)
        internal uint   waFontSignature          ; // Font signature (16 WORDS) (Windows Only)
        internal uint   sISO639Language2         ; //  (RegionInfo)
        internal uint   sISO3166CountryName2     ; //  (RegionInfo)
        internal uint   sParent                  ; // Parent name (which may be a custom locale/culture)
        internal uint   saDayNames               ; // day names
        internal uint   saAbbrevDayNames         ; // abbreviated day names
        internal uint   saMonthNames             ; // month names
        internal uint   saAbbrevMonthNames       ; // abbreviated month names
        internal uint   saMonthGenitiveNames     ; // Genitive month names
        internal uint   saAbbrevMonthGenitiveNames; // Abbreviated genitive month names
        internal uint   saNativeCalendarNames    ; // Native calendar names.  index of optional calendar - 1, empty if no optional calendar at that number
        internal uint   saAltSortID              ; // one-based (1, 2, ...) array of alternate sort culture names. A blank entry means that the SORTID is invalid. e.g. zh-TW-pron
        internal ushort iNegativePercent         ; // Negative Percent (0-3)
        internal ushort iPositivePercent         ; // Positive Percent (0-11)
        internal ushort iFormatFlags             ; // Formatting flags
        internal ushort iLineOrientations        ; // Line orientation data
        internal ushort iTextInfo                ; // Text info LCID to use for custom
        internal ushort iInputLanguageHandle     ; // input language handle
        internal uint   iCompareInfo             ; // MUST BE DWORD ALIGNED -Compare info LCID (including sorting key) to use if custom
        internal uint   sEnglishDisplayName      ; // English pretty name for this locale
        internal uint   sNativeDisplayName       ; // Native pretty name for this locale
        internal uint   sPercent                 ; // Percent (%) symbol
        internal uint   sNaN                     ; // Not a Number
        internal uint   sPositiveInfinity        ; // + Infinity
        internal uint   sNegativeInfinity        ; // - Infinity
        internal uint   sMonthDay                ; // Month day pattern
        internal uint   sAdEra                   ; // localized names for the A.D. Era
        internal uint   sAbbrevAdEra             ; // abbreviated localized names for the A.D. Era
        internal uint   sRegionName              ; //  (RegionInfo)
        internal uint   sConsoleFallbackName     ; // The culture name for the console fallback UI culture
        internal uint   saShortTime              ; // short time format
        internal uint   saSuperShortDayNames     ; // The super short day names
        internal uint   saDateWords              ; // words that can appear in date strings
        internal uint   sSpecificCulture         ; // The culture name to be used in CultureInfo.CreateSpecificCulture()
        internal uint   sKeyboardsToInstall      ; // Keyboard installation string.
        internal uint   sScripts                 ; // Typical Scripts for this locale (latn;cyrl; etc)
        // Constants
        internal const int sizeofDataFields = 304; // Size of our data record (64-bit(QWORD) aligned)

// These aren't really used in FEATURE_PAL, but its easier to disable them at the Override functions than here
//#if !FEATURE_PAL
        //
        // Win32 GetLocaleInfo data constants
        //
        internal const int LOCALE_IDIGITS                   = 0x00000011;  // iDigits                   number of fractional digits
        internal const int LOCALE_INEGNUMBER                = 0x00001010;  // iNegNumber                negative number format
        internal const int LOCALE_ICURRDIGITS               = 0x00000019;  // iCurrDigits               # local monetary fractional digits
        internal const int LOCALE_ICURRENCY                 = 0x0000001B;  // iCurrency                 positive currency format
        internal const int LOCALE_INEGCURR                  = 0x0000001C;  // iNegCurr                  negative currency format
        internal const int LOCALE_ILZERO                    = 0x00000012;  // iLZero                    leading zeros 0 = no leading zeros, 1 = leading zeros
        internal const int LOCALE_IFIRSTDAYOFWEEK           = 0x0000100C;  // iFirstDayOfWeek           first day of week
        internal const int LOCALE_IFIRSTWEEKOFYEAR          = 0x0000100D;  // iFirstWeekOfYear          first week of year
        internal const int LOCALE_ICOUNTRY                  = 0x00000005;  // iCountry                  country code (RegionInfo)
        internal const int LOCALE_IMEASURE                  = 0x0000000D;  // iMeasure                  system of measurement 0=metric, 1=US (RegionInfo)
        internal const int LOCALE_IDIGITSUBSTITUTION        = 0x00001014;  // NumShape                  Digit substitution 0=context, 1=none/arabic, 2=Native/national (2 seems to be unused) (Windows Only)
        internal const int LOCALE_SGROUPING                 = 0x00000010;  // sGrouping                 grouping of digits
        internal const int LOCALE_SMONGROUPING              = 0x00000018;  // sMonGrouping              monetary grouping of digits
        internal const int LOCALE_SLIST                     = 0x0000000C;  // sList                     list separator
        internal const int LOCALE_SDECIMAL                  = 0x0000000E;  // sDecimal                  decimal separator
        internal const int LOCALE_STHOUSAND                 = 0x0000000F;  // sThousand                 thousands separator
        internal const int LOCALE_SCURRENCY                 = 0x00000014;  // sCurrency                 local monetary symbol
        internal const int LOCALE_SMONDECIMALSEP            = 0x00000016;  // sMonDecimalSep            monetary decimal separator
        internal const int LOCALE_SMONTHOUSANDSEP           = 0x00000017;  // sMonThousandSep           monetary thousands separator
        internal const int LOCALE_SPOSITIVESIGN             = 0x00000050;  // sPositiveSign             positive sign
        internal const int LOCALE_SNEGATIVESIGN             = 0x00000051;  // sNegativeSign             negative sign
        internal const int LOCALE_S1159                     = 0x00000028;  // s1159                     AM designator
        internal const int LOCALE_S2359                     = 0x00000029;  // s2359                     PM designator
        internal const int LOCALE_SNATIVEDIGITS             = 0x00000013;  // sNativeDigits             native characters for digits 0-9
        internal const int LOCALE_STIMEFORMAT               = 0x00001003;  // sTimeFormat               time format
        internal const int LOCALE_SSHORTDATE                = 0x0000001F;  // sShortDate                short date format
        internal const int LOCALE_SLONGDATE                 = 0x00000020;  // sLongDate                 long date format
        internal const int LOCALE_SYEARMONTH                = 0x00001006;  // sYearMonth                year month format
//#endif // !FEATURE_PAL
    }
}

