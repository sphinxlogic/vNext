// ==++==
// 
//   
//    Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
// 
// ==--==
//+---------------------------------------------------------------------------
//
//  Microsoft Windows
//  File:       fusionpriv.idl
//
//  Contents:   Fusion Interfaces
//
//  Classes:
//
//  Functions:
//
//
//----------------------------------------------------------------------------
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// fusionpriv.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// Copyright (c) Microsoft Corporation.  All rights reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")
cpp_quote("#ifdef _MSC_VER")
cpp_quote("#pragma comment(lib,\"uuid.lib\")")
cpp_quote("#endif")
cpp_quote("")
cpp_quote("//---------------------------------------------------------------------------=")
cpp_quote("// Fusion Interfaces.")
cpp_quote("")

import "objidl.idl";
import "oleidl.idl";
import "fusion.idl";

cpp_quote("#ifdef _MSC_VER")
cpp_quote("#pragma once")
cpp_quote("#endif")

interface IAssembly;
interface IAssemblyBindSink;
interface IAssemblyBinding;
interface IAssemblyManifestImport;
interface IAssemblyModuleImport;
interface IAssemblyBindingClosure;

interface IAssemblyNameBinder;
interface IHistoryAssembly;
interface IHistoryReader;
interface IFusionBindLog;

interface IAssemblyScavenger;

interface IHostAssembly;
interface IHostAssemblyModuleImport;

cpp_quote("EXTERN_C const IID IID_IApplicationContext;       ")
cpp_quote("EXTERN_C const IID IID_IAssembly;           ")
cpp_quote("EXTERN_C const IID IID_IAssemblyBindSink;   ")
cpp_quote("EXTERN_C const IID IID_IAssemblyBinding;   ")
cpp_quote("EXTERN_C const IID IID_IAssemblyManifestImport;")
cpp_quote("EXTERN_C const IID IID_IAssemblyModuleImport;  ")

cpp_quote("EXTERN_C const IID IID_IHistoryAssembly;      ")
cpp_quote("EXTERN_C const IID IID_IHistoryReader;      ")
cpp_quote("EXTERN_C const IID IID_IMetaDataAssemblyImportControl;      ")

cpp_quote("EXTERN_C const IID IID_IAssemblyScavenger;  ")

cpp_quote("EXTERN_C const IID IID_IHostAssembly; ")
cpp_quote("EXTERN_C const IID IID_IHostAssemblyModuleImport; ")
//
// Bind flags for IAssemblyName::BindToObject
//
// External caller of IAssemblyName::BindToObject should only use ASM_BINDF_PARENT_ASM_HINT/ASM_BINDF_NONE/ASM_BINDF_INSPECTION_ONLY.
// The rest is used internally by fusion. They can(and should) be set via IApplicationContext::Set.
//
typedef enum
{
    ASM_BINDF_NONE                            = 0x0,
    ASM_BINDF_FORCE_CACHE_INSTALL             = 0x1,
    ASM_BINDF_RFS_INTEGRITY_CHECK             = 0x2,
    ASM_BINDF_RFS_MODULE_CHECK                = 0x4,
    ASM_BINDF_BINPATH_PROBE_ONLY              = 0x8,
    //ASM_BINDF_SHARED_BINPATH_HINT             = 0x10, 
    ASM_BINDF_PARENT_ASM_HINT                 = 0x20,
    ASM_BINDF_DISALLOW_APPLYPUBLISHERPOLICY   = 0x40,
    ASM_BINDF_DISALLOW_APPBINDINGREDIRECTS    = 0x80,
    ASM_BINDF_DISABLE_FX_UNIFICATION          = 0x100, 
    ASM_BINDF_DO_NOT_PROBE_NATIVE_IMAGE       = 0x200,
    ASM_BINDF_DISABLE_DOWNLOAD                = 0x400,
    ASM_BINDF_INSPECTION_ONLY                 = 0x800,
    ASM_BINDF_DISALLOW_APP_BASE_PROBING       = 0x1000
} ASM_BIND_FLAGS;

typedef enum tagDEVOVERRIDEMODE {
    DEVOVERRIDE_LOCAL     = 0x1,
    DEVOVERRIDE_GLOBAL    = 0x2
} DEVOVERRIDEMODE;

///////////////////////////////////////////////////////////////////////////////
//
// IHistoryAssembly
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(e6096a07-e188-4a49-8d50-2a0172a0d205),
        pointer_default(unique)
]
interface IHistoryAssembly : IUnknown
{
    HRESULT GetAssemblyName
    (
        [out] LPWSTR wzAsmName,
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetPublicKeyToken
    (
        [out] LPWSTR wzPublicKeyToken,
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetCulture
    (
        [out] LPWSTR wzCulture,
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetReferenceVersion
    (
        [out] LPWSTR wzVerRef,
        [in, out] DWORD *pdwSize
    );
        
    HRESULT GetActivationDate
    (
        [out] LPWSTR wzActivationDate, 
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetAppCfgVersion
    (
        [out] LPWSTR pwzVerAppCfg, 
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetPublisherCfgVersion
    (
        [out] LPWSTR pwzVerPublisherCfg, 
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetAdminCfgVersion
    (
        [out] LPWSTR pwzAdminCfg,
        [in, out] DWORD *pdwSize
    );
}

///////////////////////////////////////////////////////////////////////////////
//
// IHistoryReader
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(1d23df4d-a1e2-4b8b-93d6-6ea3dc285a54),
        pointer_default(unique)
]
interface IHistoryReader : IUnknown
{
    HRESULT GetFilePath
    (
        [out] LPWSTR wzFilePath,
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetApplicationName
    (
        [out] LPWSTR wzAppName, 
        [in, out] DWORD *pdwSize
    );

    HRESULT GetEXEModulePath
    (
        [out] LPWSTR wzExePath, 
        [in, out] DWORD *pdwSize
    );
    
    
    HRESULT GetNumActivations
    (
        [out] DWORD *pdwNumActivations
    );
    
    HRESULT GetActivationDate
    (
        [in] DWORD dwIdx, 
        [out] FILETIME *pftDate
    );
    
    HRESULT GetRunTimeVersion
    (
        [in] FILETIME *pftActivationDate,
        [out] LPWSTR wzRunTimeVersion, 
        [in, out] DWORD *pdwSize
    );
    
    HRESULT GetNumAssemblies
    (
        [in] FILETIME *pftActivationDate, 
        [out] DWORD *pdwNumAsms
    );
        
    HRESULT GetHistoryAssembly
    (
        [in] FILETIME *pftActivationDate, 
        [in] DWORD dwIdx,
        [out] IHistoryAssembly **ppHistAsm
    );
}
    
typedef enum {
    LOADCTX_TYPE_DEFAULT,
    LOADCTX_TYPE_LOADFROM,
    LOADCTX_TYPE_UNKNOWN,
} LOADCTX_TYPE;

// Log for normal assembly binding
cpp_quote("#define FUSION_BIND_LOG_CATEGORY_DEFAULT       0")
// Log for native image binding
cpp_quote("#define FUSION_BIND_LOG_CATEGORY_NGEN          1")
// max entry for bind log kinds. Should always point to the biggest one
cpp_quote("#define FUSION_BIND_LOG_CATEGORY_MAX           2")

///////////////////////////////////////////////////////////////////////////////
//
// IFusionBindLog
//
///////////////////////////////////////////////////////////////////////////////

[
        local,
        object,
        uuid(67E9F87D-8B8A-4a90-9D3E-85ED5B2DCC83),
        pointer_default(unique)
]
interface IFusionBindLog : IUnknown
{
    HRESULT SetResultCode
    (
        [in]        DWORD   dwLogCategory,
        [in]        HRESULT hr
    );

    HRESULT GetResultCode
    (
        [in]       DWORD   dwLogCategory,
        [out]       HRESULT *pHr
    );
    
    HRESULT GetBindLog
    (
        [in]       DWORD             dwDetailLevel,
        [in]       DWORD             dwLogCategory, 
        [out]      LPWSTR            pwzDebugLog,
        [in, out]  DWORD            *pcbDebugLog
    );

    HRESULT LogMessage
    (
        [in]       DWORD             dwDetailLevel,
        [in]       DWORD             dwLogCategory, 
        [in]       LPCWSTR           pwzDebugLog
    );

    HRESULT Flush
    (
        [in]       DWORD             dwDetailLevel,
        [in]       DWORD             dwLogCategory
    );
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyManifestImport
// 
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid( de9a68ba-0fa2-11d3-94aa-00c04fc308ff),
        pointer_default(unique)
]
interface IAssemblyManifestImport: IUnknown
{
    typedef [unique] IAssemblyManifestImport *LPASSEMBLY_MANIFEST_IMPORT;
    
    HRESULT GetAssemblyNameDef(
        [out] IAssemblyName **ppAssemblyName);

    HRESULT GetNextAssemblyNameRef(
        [in]        DWORD            nIndex,
        [out]       IAssemblyName ** ppAssemblyName);

    HRESULT GetNextAssemblyModule(
        [in]       DWORD                    nIndex,
        [out]      IAssemblyModuleImport **ppImport);

    HRESULT GetModuleByName(
        [in]       LPCOLESTR               szModuleName,
        [out]      IAssemblyModuleImport **ppModImport);

    HRESULT GetManifestModulePath(
        [out, size_is(*pccModulePath)]  LPOLESTR szModulePath, 
        [in, out]  LPDWORD pccModulePath);
        
}

///////////////////////////////////////////////////////////////////////////////
//
// IApplicationContext
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(7c23ff90-33af-11d3-95da-00a024a85b51),
        pointer_default(unique)
]
interface IApplicationContext: IUnknown
{
    cpp_quote("// App context configuration variables")
    cpp_quote("#define ACTAG_APP_BASE_URL            L\"APPBASE\"")
    cpp_quote("#define ACTAG_MACHINE_CONFIG          L\"MACHINE_CONFIG\"")
    cpp_quote("#define ACTAG_APP_PRIVATE_BINPATH     L\"PRIVATE_BINPATH\"")
    cpp_quote("#define ACTAG_APP_SHARED_BINPATH      L\"SHARED_BINPATH\"")
    cpp_quote("#define ACTAG_APP_SNAPSHOT_ID         L\"SNAPSHOT_ID\"")
    cpp_quote("#define ACTAG_APP_CONFIG_FILE         L\"APP_CONFIG_FILE\"")
    cpp_quote("#define ACTAG_APP_ID                  L\"APPLICATION_ID\"")
    cpp_quote("#define ACTAG_APP_SHADOW_COPY_DIRS    L\"SHADOW_COPY_DIRS\"")
    cpp_quote("#define ACTAG_APP_DYNAMIC_BASE        L\"DYNAMIC_BASE\"")
    cpp_quote("#define ACTAG_APP_CACHE_BASE          L\"CACHE_BASE\"")
    cpp_quote("#define ACTAG_APP_NAME                L\"APP_NAME\"")
    cpp_quote("#define ACTAG_DEV_PATH                L\"DEV_PATH\"")
    cpp_quote("#define ACTAG_HOST_CONFIG_FILE        L\"HOST_CONFIG\"")
    cpp_quote("#define ACTAG_SXS_ACTIVATION_CONTEXT  L\"SXS\"")
    cpp_quote("#define ACTAG_APP_CFG_LOCAL_FILEPATH  L\"APP_CFG_LOCAL_FILEPATH\"")
    cpp_quote("#define ACTAG_ZAP_STRING              L\"ZAP_STRING\"")
    cpp_quote("#define ACTAG_ZAP_CONFIG_FLAGS        L\"ZAP_CONFIG_FLAGS\"")
    cpp_quote("#define ACTAG_APP_DOMAIN_ID           L\"APPDOMAIN_ID\"")
    cpp_quote("#define ACTAG_APP_CONFIG_BLOB         L\"APP_CONFIG_BLOB\"")
   
    cpp_quote("// App context flag overrides")
    cpp_quote("#define ACTAG_FORCE_CACHE_INSTALL     L\"FORCE_CACHE_INSTALL\"")
    cpp_quote("#define ACTAG_RFS_INTEGRITY_CHECK     L\"RFS_INTEGRITY_CHECK\"")
    cpp_quote("#define ACTAG_RFS_MODULE_CHECK        L\"RFS_MODULE_CHECK\"")
    cpp_quote("#define ACTAG_BINPATH_PROBE_ONLY      L\"BINPATH_PROBE_ONLY\"")
    cpp_quote("#define ACTAG_DISALLOW_APPLYPUBLISHERPOLICY  L\"DISALLOW_APP\"")
    cpp_quote("#define ACTAG_DISALLOW_APP_BINDING_REDIRECTS  L\"DISALLOW_APP_REDIRECTS\"")
    cpp_quote("#define ACTAG_DISALLOW_APP_BASE_PROBING L\"DISALLOW_APP_BASE_PROBING\"")
    cpp_quote("#define ACTAG_CODE_DOWNLOAD_DISABLED  L\"CODE_DOWNLOAD_DISABLED\"")
    cpp_quote("#define ACTAG_DISABLE_FX_ASM_UNIFICATION  L\"DISABLE_FX_ASM_UNIFICATION\"")

    typedef [unique] IApplicationContext *LPAPPLICATIONCONTEXT;
    
    typedef enum
    {
        APP_CTX_FLAGS_INTERFACE = 0x1
    } APP_FLAGS;

    HRESULT SetContextNameObject(
        [in]    LPASSEMBLYNAME pName);

    HRESULT GetContextNameObject(
        [out]   LPASSEMBLYNAME * ppName);


    HRESULT Set(
        [in]    LPCOLESTR szName, 
        [in]    LPVOID pvValue,
        [in]    DWORD  cbValue,
        [in]    DWORD  dwFlags);

    HRESULT Get(
        [in]         LPCOLESTR szName, 
        [out]        LPVOID   pvValue,
        [in, out]    LPDWORD  pcbValue,
        [in]         DWORD    dwFlags);
        
    HRESULT GetDynamicDirectory(
        [out]         LPWSTR wzDynamicDir,
        [in, out]     LPDWORD pdwSize);
        
    HRESULT GetAppCacheDirectory(
        [out]         LPWSTR wzAppCacheDir,
        [in, out]     LPDWORD pdwSize);
    
    HRESULT RegisterKnownAssembly(
        [in]          IAssemblyName *pName,
        [in]          LPCWSTR pwzAsmURL,
        [out]         IAssembly **ppAsmOut);
    
    HRESULT PrefetchAppConfigFile();
        
    // This will give a IAssemblyBindingClosure object without really walking
    // the closure. Any of the APIs on IAssemblyBindingClosure may trigger a 
    // real walking. 
    //
    // This closure is not cached in fusion. Caller is responsible to cache the closure.
    //
    // pUnk is the result of a previous bind within the same application context. 
    // It could be IHostAssembly or IAssembly. The assembly has to be strongly named.
    // 
    // dwSharingFlags cannot be 0 now.
    HRESULT GetAssemblyBindingClosure(
        [in]  IUnknown *pUnk,
        [out] IAssemblyBindingClosure **ppAsmClosure
        );
}

[
        local,
        object,
        uuid(56972d9d-0f6c-47de-a038-e82d5de3a777),
        pointer_default(unique)
]
interface IAssemblyNameBinder : IUnknown 
{
    HRESULT BindToObject(
        [in]      REFIID               refIID,
        [in]      IUnknown            *pUnkSink, 
        [in]      IUnknown            *pUnkContext,
        [in]      LPCOLESTR            szCodeBase,
        [in]      LONGLONG             llFlags,
        [in]      LPVOID               pParentAssembly,
        [in]      DWORD                cbReserved,
        [out]     LPVOID               *ppv,
        [out]     LPVOID               *ppvNI);
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssembly
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(ff08d7d4-04c2-11d3-94aa-00c04fc308ff),
        pointer_default(unique)
]
interface IAssembly : IUnknown
{
    typedef [unique] IAssembly *LPASSEMBLY;
    
    cpp_quote("#define ASMLOC_LOCATION_MASK          0x0000001B")
    cpp_quote("#define ASMLOC_UNKNOWN                0x00000000")
    cpp_quote("#define ASMLOC_GAC                    0x00000001")
    cpp_quote("#define ASMLOC_DOWNLOAD_CACHE         0x00000002")
    cpp_quote("#define ASMLOC_RUN_FROM_SOURCE        0x00000003")
    cpp_quote("#define ASMLOC_CODEBASE_HINT          0x00000004")
    cpp_quote("#define ASMLOC_ZAP                    0x00000008")
    cpp_quote("#define ASMLOC_DEV_OVERRIDE           0x00000010")
    
    HRESULT GetAssemblyNameDef(
        [out] IAssemblyName **ppAssemblyName);

    HRESULT GetNextAssemblyNameRef(
        [in] DWORD nIndex,
        [out] IAssemblyName **ppAssemblyName);
        
    HRESULT GetNextAssemblyModule(
        [in] DWORD nIndex,
        [out] IAssemblyModuleImport **ppModImport);

    HRESULT GetModuleByName(
        [in]       LPCOLESTR               szModuleName,
        [out]      IAssemblyModuleImport **ppModImport);

    HRESULT GetManifestModulePath(
        [out, size_is(*pccModulePath)]  LPOLESTR szModulePath, 
        [in, out]  LPDWORD pccModulePath);
        
    HRESULT GetAssemblyPath(
        [out, size_is(*lpcwBuffer)] LPOLESTR pStr,
        [in, out] LPDWORD lpcwBuffer);

    HRESULT GetAssemblyLocation(
        [out] DWORD *pdwAsmLocation);
        
    LOADCTX_TYPE GetFusionLoadContext();

    HRESULT GetNextHardBoundDependency(
        [in]    DWORD dwIndex, 
        [out]   IAssembly **ppILAsm, 
        [out]   IAssembly **ppNIAsm);
    
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyBindingClosure
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(415c226a-e513-41ba-9651-9c48e97aa5df),
        pointer_default(unique)
]
interface IAssemblyBindingClosure : IUnknown
{
    // Test if all the assemblies in the closure are in GAC.
    // return:
    //      S_OK        all assemblies are in GAC.
    //      S_FALSE     not all assemblies are in GAC.
    //      otherwise   failure.
    HRESULT IsAllAssembliesInGAC();

    // Test to see if two closures are semantically the same
    // under the specified sharing context.
    // return:
    //      S_OK        Equal.
    //      S_FALSE     Not Equal.
    //      otherwise   failure.
    HRESULT IsEqual(
        [in] IAssemblyBindingClosure *pAssemblyClosure
        );

    // return:
    //  S_OK        There are more assemblies. ppUnk contains a valid result
    //              *ppUnk could be IAssembly or IHostAssembly. Caller 
    //              should QI to get the real object.
    //  HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS) No more assembly. *ppUnk is set to NULL.
    //  Caller should set dwIndex to 0, then increment dwIndex and keep 
    //  calling this API until it returns HRESULT_FROM_WIN32(ERROR_NO_MORE_ITEMS)
    HRESULT GetNextAssembly(
        [in]  DWORD dwIndex,
        [out] IUnknown **pUnk
        );

    // Usage same as GetNextAssembly
    HRESULT GetNextFailureAssembly(
        [in]  DWORD dwIndex, 
        [out] IAssemblyName **ppName,
        [out] HRESULT *pHResult);
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyBindSink
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(af0bc960-0b9a-11d3-95ca-00a024a85b51),
        pointer_default(unique)
]
interface IAssemblyBindSink : IUnknown
{
    typedef [unique] IAssemblyBindSink *LPASSEMBLY_BIND_SINK;
    
    typedef struct _tagFusionBindInfo
    {
        IFusionBindLog             *pdbglog;
        IAssemblyName              *pNamePolicy;
        DWORD                       dwPoliciesApplied;
    } FusionBindInfo;

    typedef enum
    {
        ASM_NOTIFICATION_START,
        ASM_NOTIFICATION_PROGRESS,
        ASM_NOTIFICATION_SUSPEND,
        ASM_NOTIFICATION_ATTEMPT_NEXT_CODEBASE,
        ASM_NOTIFICATION_BIND_INFO,
        ASM_NOTIFICATION_DONE,
        ASM_NOTIFICATION_NATIVE_IMAGE_DONE        
    } ASM_NOTIFICATION;


    HRESULT OnProgress(
        [in]    DWORD          dwNotification,
        [in]    HRESULT        hrNotification,
        [in]    LPCWSTR        szNotification,
        [in]    DWORD          dwProgress,
        [in]    DWORD          dwProgressMax,
        [in]    LPVOID         pvBindInfo,
        [in]    IUnknown      *pUnk);
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyBinding
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(cfe52a80-12bd-11d3-95ca-00a024a85b51),
        pointer_default(unique)
]
interface IAssemblyBinding : IUnknown
{
    typedef [unique] IAssemblyBinding *LPASSEMBLY_BINDINDING;

    HRESULT Control(
        [in]    HRESULT        hrControl);

    HRESULT DoDefaultUI(
        [in]    HWND    hWnd,
        [in]    DWORD   dwFlags);   
}

///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyModuleImport
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(da0cd4b0-1117-11d3-95ca-00a024a85b51),
        pointer_default(unique)
]
interface IAssemblyModuleImport : IStream
{
    typedef [unique] IAssemblyModuleImport *LPASSEMBLY_MODULE_IMPORT;

    HRESULT GetModuleName(
        [out, size_is(*pccModuleName)]  LPOLESTR szModuleName, 
        [in, out]  LPDWORD pccModuleName);

    HRESULT GetHashAlgId(
        [out]   LPDWORD pdwHashAlgId);

    HRESULT GetHashValue(
        [out, size_is(*pcbHashValue)] BYTE *pbHashValue,
        [in, out] LPDWORD pcbHashValue);

    HRESULT GetFlags(
        [out]  LPDWORD pdwFlags);

    HRESULT GetModulePath(
        [out, size_is(*pccModulePath)]  LPOLESTR szModulePath, 
        [in, out]  LPDWORD pccModulePath);
        
    BOOL IsAvailable();
    
    HRESULT BindToObject(
        [in]       IAssemblyBindSink *pBindSink,
        [in]       IApplicationContext *pAppCtx,
        [in]       LONGLONG llFlags,
        [out]      LPVOID *ppv);
}


///////////////////////////////////////////////////////////////////////////////
//
// IAssemblyScavenger
//
///////////////////////////////////////////////////////////////////////////////
[
        local,
        object,
        uuid(21b8916c-f28e-11d2-a473-00ccff8ef448),
        pointer_default(unique)
]
interface IAssemblyScavenger : IUnknown
{

    HRESULT  ScavengeAssemblyCache
    (
    );

    HRESULT GetCacheDiskQuotas
    (
        [out] DWORD *pdwZapQuotaInGAC,
        [out] DWORD *pdwDownloadQuotaAdmin,
        [out] DWORD *pdwDownloadQuotaUser
    );

    HRESULT SetCacheDiskQuotas
    (
        [in] DWORD dwZapQuotaInGAC,
        [in] DWORD dwDownloadQuotaAdmin,
        [in] DWORD dwDownloadQuotaUser
    );

    HRESULT  GetCurrentCacheUsage
    (
        [out] DWORD *dwZapUsage,
        [out] DWORD *dwDownloadUsage
    );
}


///////////////////////////////////////////////////////////////////////////////

[
        local,
        object,
        uuid(D8FB9BD6-3969-11d3-B4AF-00C04F8ECB26),
        pointer_default(unique)
]
interface ICodebaseList : IUnknown
{
    HRESULT AddCodebase
    (
        [in]       LPCWSTR              wzCodebase,
        [in]       DWORD                dwFlags
    );
    
    HRESULT RemoveCodebase
    (
        [in]       DWORD               dwIndex
    );
    
    HRESULT RemoveAll();
    
    HRESULT GetCount
    (
        [out]      DWORD              *pdwCount
    );
    
    HRESULT GetCodebase
    (
        [in]       DWORD               dwIndex,
        [out]      DWORD              *pdwFlags,
        [out]      LPWSTR              wzCodebase,
        [in, out]  DWORD              *pcbCodebase
    );
}

[
        local,
        object,
        uuid(0A6F16F8-ACD7-11d3-B4ED-00C04F8ECB26),
        pointer_default(unique)
]
interface IDownloadMgr : IUnknown
{
    HRESULT PreDownloadCheck
    (
        [out]      void **ppv,
        [out]      void **ppvNI
    );

    HRESULT DoSetup
    (
        [in]       LPCWSTR              wzSourceUrl,
        [in]       LPCWSTR              wzFilePath,
        [in]       const FILETIME      *pftLastMod,
        [out]      IUnknown             **ppUnk,
        [out]      IUnknown             **ppAsmNI
    );
    
    HRESULT ProbeFailed
    (
        [out]      IUnknown             **ppUnk
    );
    
    HRESULT IsDuplicate
    (
        [out]      IDownloadMgr         *ppDLMgr
    );
    
    HRESULT LogResult();

    HRESULT DownloadEnabled
    (
        [out]      BOOL *pbEnabled
    );
    
    HRESULT GetBindInfo
    (
        [out]      FusionBindInfo       *pBindInfo
    );

    HRESULT CacheBindingResult
    (
        [in]        HRESULT hrResult
    );
}


[
        local,
        object,
        uuid(711f7c2d-8234-4505-b02f-7554f46cbf29),
        pointer_default(unique)
]
interface IHostAssembly : IUnknown
{
    typedef [unique] IHostAssembly *LPHOSTASSEMBLY;  
   
    HRESULT GetAssemblyNameDef(
        [out] IAssemblyName **ppAssemblyName);

    HRESULT GetNextAssemblyNameRef(
        [in] DWORD nIndex,
        [out] IAssemblyName **ppAssemblyName);
        
    HRESULT GetNextAssemblyModule(
        [in] DWORD nIndex,
        [out] IHostAssemblyModuleImport **ppModImport);

    HRESULT GetModuleByName(
        [in]       LPCOLESTR                   szModuleName,
        [out]      IHostAssemblyModuleImport **ppModImport);

    // Always release the copy in fusion
    HRESULT GetAssemblyStream(
        [out]      IStream **ppStreamAsm);
        
    HRESULT GetAssemblyId(
        [out]      UINT64 *pAssemblyId);

    // Always release the copy in fusion
    HRESULT GetAssemblyDebugStream(
        [out]      IStream **ppDebugStream);

    LOADCTX_TYPE GetFusionLoadContext(
        );
        
    HRESULT GetAssemblyContext(
        [out]      UINT64 *pdwAssemblyContext);
}

[
        local,
        object,
        uuid(b6f2729d-6c0f-4944-b692-e5a2ce2c6e7a),
        pointer_default(unique)
]
interface IHostAssemblyModuleImport : IUnknown
{
    typedef [unique] IHostAssemblyModuleImport *LPHOSTASSEMBLY_MODULE_IMPORT;

    HRESULT GetModuleName(
        [out, size_is(*pccModuleName)]  LPOLESTR szModuleName, 
        [in, out]  LPDWORD pccModuleName);

    HRESULT GetModuleStream(
        [out]  IStream **ppStreamModule);
        
    HRESULT GetModuleId(
        [out]  DWORD  *pdwModuleId);

    HRESULT GetModuleDebugStream(
        [out]  IStream **ppDebugStream);
}    


#pragma midl_echo("STDAPI CreateHistoryReader(LPCWSTR wzFilePath, IHistoryReader **ppHistReader);")
#pragma midl_echo("STDAPI LookupHistoryAssembly(LPCWSTR pwzFilePath, FILETIME *pftActivationDate, LPCWSTR pwzAsmName, LPCWSTR pwzPublicKeyToken, LPCWSTR wzCulture, LPCWSTR pwzVerRef, IHistoryAssembly **pHistAsm);")
#pragma midl_echo("STDAPI GetHistoryFileDirectory(LPWSTR wzDir, DWORD *pdwSize);")
#pragma midl_echo("STDAPI PreBindAssembly(IApplicationContext *pAppCtx, IAssemblyName *pName, IAssembly *pAsmParent, IAssemblyName **ppNamePostPolicy, LPVOID pvReserved); ")

#pragma midl_echo("STDAPI CreateApplicationContext(IAssemblyName *pName, LPAPPLICATIONCONTEXT *ppCtx);             ")


cpp_quote("#define EXPLICITBIND_FLAGS_NON_BINDABLE          0x0")
cpp_quote("#define EXPLICITBIND_FLAGS_EXE                   0x1")

#pragma midl_echo("HRESULT BindToSystem(IAssemblyName *pNameSystem, LPCWSTR pcwzSystemDirectory, IUnknown *pNIEva, IAssembly **ppAsmOut, IAssembly **ppNIAsmOut, IFusionBindLog **ppdbglog);")

#pragma midl_echo("HRESULT ExplicitBind(LPCWSTR wzPath, IApplicationContext *pAppCtx, DWORD dwFlags, IUnknown *pNIEva, IAssembly **ppAsmOut, IAssembly **ppNIAsmOut, IFusionBindLog **ppdbglog);")
