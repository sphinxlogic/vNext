// ==++==
//
//   
//    Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
//
// ==--==
/**************************************************************************************
 **                                                                                  **
 ** Mscoree.idl - interface definitions for internal usage.                          **
 **                                                                                  **
 **************************************************************************************/

//
// Interface descriptions
//
import "unknwn.idl";

// IID IExecutionEngine :     uuid(7AF02DAC-2A33-494b-A09F-25E00A93C6F8)
cpp_quote("EXTERN_GUID(IID_IExecutionEngine, 0x7AF02DAC, 0x2A33, 0x494b, 0xA0, 0x9F, 0x25, 0xE0, 0x0A, 0x93, 0xC6, 0xF8);")

// IID IEEMemoryManager :     uuid{17713B61-B59F-4e13-BAAF-91623DC8ADC0}
cpp_quote("EXTERN_GUID(IID_IEEMemoryManager, 0x17713b61, 0xb59f, 0x4e13, 0xba, 0xaf, 0x91, 0x62, 0x3d, 0xc8, 0xad, 0xc0);")

//*****************************************************************************
// Interface for exposing services from the EE to other DLLs of the CLR.
//*****************************************************************************
typedef void * CRITSEC_COOKIE;
typedef void * EVENT_COOKIE;
typedef void * SEMAPHORE_COOKIE;
typedef void * MUTEX_COOKIE;

typedef enum {
    CRST_DEFAULT          = 0x0,
    CRST_REENTRANCY       = 0x1,  // allow same thread to take lock multiple times.
    CRST_UNSAFE_SAMELEVEL = 0x2,  // AVOID THIS! Can take other locks @ same level in
                                  //             any order.
    CRST_UNSAFE_COOPGC    = 0x4,  // AVOID THIS! Lock must be taken in cooperative mode.
    CRST_UNSAFE_ANYMODE   = 0x8,  // AVOID THIS! Lock can be taken in either GC mode.
    CRST_DEBUGGER_THREAD  = 0x10, // This lock can be taken on the debugger's helper thread.
    CRST_HOST_BREAKABLE   = 0x20, // This lock is held while running managed code.  It can be terminated by a host.
    CRST_SUSPEND_THREAD  = 0x40,    // This lock can be held by a thread who suspended another thread, so the lock
                                                            // should only be taken in a forbid suspend thread region, to ensure
                                                            // the suspended thread doesn't own it as well.
} CrstFlags;

// Callback function for cleaning up TLS
typedef VOID (__stdcall *PTLS_CALLBACK_FUNCTION)(PVOID);


[
    uuid(7AF02DAC-2A33-494b-A09F-25E00A93C6F8),
    helpstring("CLR Coordination Interface"),
    pointer_default(unique),
    local
]
interface IExecutionEngine : IUnknown
{
    // Thread Local Storage is based on logical threads.  The underlying
    // implementation could be threads, fibers, or something more exotic.
    // Slot numbers are predefined.  This is not a general extensibility
    // mechanism.

    // Associate a callback function for releasing TLS on thread/fiber death.
    // This can be NULL.
    void TLS_AssociateCallback([in] DWORD slot, [in] PTLS_CALLBACK_FUNCTION callback);

    // May be called once to get the master TLS block slot for fast Get/Set operations
    DWORD TLS_GetMasterSlotIndex();

    // Get the value at a slot
    PVOID TLS_GetValue([in] DWORD slot);

    // Get the value at a slot, return FALSE if TLS info block doesn't exist
    BOOL TLS_CheckValue([in] DWORD slot, [out] PVOID * pValue);

    // Set the value at a slot
    void TLS_SetValue([in] DWORD slot, [in] PVOID pData);

    // Free TLS memory block and make callback
    void TLS_ThreadDetaching();

    // Critical Sections are sometimes exposed to the host and therefore need to be
    // reflected from all CLR DLLs to the EE.
    //
    // In addition, we always monitor interactions between the lock & the GC, based
    // on the GC mode in which the lock is acquired and we restrict what operations
    // are permitted while holding the lock based on this.
    //
    // Finally, we we rank all our locks to prevent deadlock across all the DLLs of
    // the CLR.  This is the level argument to CreateLock.
    //
    // All usage of these locks must be exception-safe.  To achieve this, we suggest
    // using Holders (see holder.h & crst.h).  In fact, within the EE code cannot
    // hold locks except by using exception-safe holders.

    CRITSEC_COOKIE CreateLock([in] LPCSTR szTag, [in] LPCSTR level, [in] CrstFlags flags);

    void DestroyLock([in] CRITSEC_COOKIE lock);

    void AcquireLock([in] CRITSEC_COOKIE lock);

    void ReleaseLock([in] CRITSEC_COOKIE lock);

    EVENT_COOKIE CreateAutoEvent([in] BOOL bInitialState);
    EVENT_COOKIE CreateManualEvent([in] BOOL bInitialState);
    void CloseEvent([in] EVENT_COOKIE event);
    BOOL ClrSetEvent([in] EVENT_COOKIE event);
    BOOL ClrResetEvent([in] EVENT_COOKIE event);
    DWORD WaitForEvent([in] EVENT_COOKIE event, [in] DWORD dwMilliseconds, [in] BOOL bAlertable);
    DWORD WaitForSingleObject([in] HANDLE handle, [in] DWORD dwMilliseconds);

    // OS header file defines CreateSemaphore.
    SEMAPHORE_COOKIE ClrCreateSemaphore([in] DWORD dwInitial, [in] DWORD dwMax);
    void ClrCloseSemaphore([in] SEMAPHORE_COOKIE semaphore);
    DWORD ClrWaitForSemaphore([in] SEMAPHORE_COOKIE semaphore, [in] DWORD dwMilliseconds, [in] BOOL bAlertable);
    BOOL ClrReleaseSemaphore([in] SEMAPHORE_COOKIE semaphore, [in] LONG lReleaseCount, [in] LONG *lpPreviousCount);

    MUTEX_COOKIE ClrCreateMutex([in]LPSECURITY_ATTRIBUTES lpMutexAttributes, [in]BOOL bInitialOwner, [in]LPCTSTR lpName);
    DWORD ClrWaitForMutex([in] MUTEX_COOKIE mutex, [in] DWORD dwMilliseconds, [in] BOOL bAlertable);
    BOOL ClrReleaseMutex([in] MUTEX_COOKIE mutex);
    void ClrCloseMutex([in] MUTEX_COOKIE mutex);

    DWORD ClrSleepEx([in] DWORD dwMilliseconds, [in] BOOL bAlertable);

    BOOL ClrAllocationDisallowed();

    void GetLastThrownObjectExceptionFromThread([out] void **ppvException);
};


//*****************************************************************************
// Interface for exposing memory services from the EE to other DLLs of the CLR.
//*****************************************************************************

cpp_quote("#if !defined(_WINNT_) && !defined(_NTMMAPI_)")
typedef void* PMEMORY_BASIC_INFORMATION;
cpp_quote("#endif")


[
    uuid(17713B61-B59F-4e13-BAAF-91623DC8ADC0),
    helpstring("CLR Memory Manager Interface"),
    pointer_default(unique),
    local
]
interface IEEMemoryManager : IUnknown
{
    LPVOID ClrVirtualAlloc(
        [in] LPVOID lpAddress,        // region to reserve or commit
        [in] SIZE_T dwSize,           // size of region
        [in] DWORD flAllocationType,  // type of allocation
        [in] DWORD flProtect          // type of access protection
    );

    BOOL ClrVirtualFree(
        [in] LPVOID lpAddress,   // address of region
        [in] SIZE_T dwSize,      // size of region
        [in] DWORD dwFreeType    // operation type
    );

    SIZE_T ClrVirtualQuery(
        [in] const void* lpAddress,                    // address of region
        [in] PMEMORY_BASIC_INFORMATION lpBuffer,  // information buffer
        [in] SIZE_T dwLength                      // size of buffer
    );

    BOOL ClrVirtualProtect(
        [in] LPVOID lpAddress,       // region of committed pages
        [in] SIZE_T dwSize,          // size of the region
        [in] DWORD flNewProtect,     // desired access protection
        [in] DWORD* lpflOldProtect   // old protection
    );

    HANDLE ClrGetProcessHeap();

    HANDLE ClrHeapCreate(
        [in] DWORD flOptions,       // heap allocation attributes
        [in] SIZE_T dwInitialSize,  // initial heap size
        [in] SIZE_T dwMaximumSize   // maximum heap size
    );

    BOOL ClrHeapDestroy(
        [in] HANDLE hHeap   // handle to heap
    );

    LPVOID ClrHeapAlloc(
        [in] HANDLE hHeap,   // handle to private heap block
        [in] DWORD dwFlags,  // heap allocation control
        [in] SIZE_T dwBytes  // number of bytes to allocate
    );

    BOOL ClrHeapFree(
        [in] HANDLE hHeap,  // handle to heap
        [in] DWORD dwFlags, // heap free options
        [in] LPVOID lpMem   // pointer to memory
    );

    BOOL ClrHeapValidate(
        [in] HANDLE hHeap,  // handle to heap
        [in] DWORD dwFlags, // heap access options
        [in] const void* lpMem   // optional pointer to memory block
    );

    HANDLE ClrGetProcessExecutableHeap();

};




