.assembly mscorlib
{
	.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 01 00 00)
	.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
	.publickey = (00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00)
	.hash algorithm 0x00008004
	.ver 2:0:0:0
}
.namespace Microsoft.Win32.SafeHandles
{
	.class public abstract CriticalHandleMinusOneIsInvalid
		extends System.Runtime.InteropServices.CriticalHandle
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsInvalid()
		{
			ret
		}
		.property instance bool IsInvalid()
		{
			.get instance bool Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid::get_IsInvalid()
		}
	}
	.class public abstract CriticalHandleZeroOrMinusOneIsInvalid
		extends System.Runtime.InteropServices.CriticalHandle
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsInvalid()
		{
			ret
		}
		.property instance bool IsInvalid()
		{
			.get instance bool Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid::get_IsInvalid()
		}
	}
	.class public sealed SafeFileHandle
		extends Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
	{
		.permissionset linkcheck = (00)
		.method public hidebysig specialname 
			instance void .ctor(native int preexistingHandle, bool ownsHandle)
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool ReleaseHandle()
		{
			ret
		}
	}
	.class public abstract SafeHandleMinusOneIsInvalid
		extends System.Runtime.InteropServices.SafeHandle
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor(bool ownsHandle)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsInvalid()
		{
			ret
		}
		.property instance bool IsInvalid()
		{
			.get instance bool Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid::get_IsInvalid()
		}
	}
	.class public abstract SafeHandleZeroOrMinusOneIsInvalid
		extends System.Runtime.InteropServices.SafeHandle
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor(bool ownsHandle)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsInvalid()
		{
			ret
		}
		.property instance bool IsInvalid()
		{
			.get instance bool Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid::get_IsInvalid()
		}
	}
	.class public sealed SafeWaitHandle
		extends Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
	{
		.permissionset linkcheck = (00)
		.method public hidebysig specialname 
			instance void .ctor(native int existingHandle, bool ownsHandle)
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool ReleaseHandle()
		{
			ret
		}
	}
}
.namespace System
{
	.class public serializable AccessViolationException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed 'Action`1'<T>
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(!0 obj)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(!0 obj, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed Activator
		extends System.Object
		implements System.Runtime.InteropServices._Activator
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 29 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 41 63 74 69 76 61 74 6F 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type', valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type', valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes)
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type', object[] args)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type', object[] args, object[] activationAttributes)
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class System.Type 'type', bool nonPublic)
		{
			ret
		}
		.method public static hidebysig 
			!!0 CreateInstance<T>()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityInfo)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.AppDomain domain, string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(class System.AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetObject(class System.Type 'type', string url)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetObject(class System.Type 'type', string url, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Activator.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._Activator::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Activator.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._Activator::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Activator.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._Activator::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Activator.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._Activator::Invoke
			ret
		}
	}
	.class public sealed AppDomain
		extends System.MarshalByRefObject
		implements System._AppDomain, System.Security.IEvidenceFactory
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 11 53 79 73 74 65 6D 2E 5F 41 70 70 44 6F 6D 61 69 6E 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot specialname 
			instance void add_AssemblyLoad(class System.AssemblyLoadEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_AssemblyLoad(class System.AssemblyLoadEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_TypeResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_TypeResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_ResourceResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_ResourceResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_AssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_AssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void add_ReflectionOnlyAssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void remove_ReflectionOnlyAssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.AppDomainManager get_DomainManager()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized)
		{
			ret
		}
		.method public hidebysig 
			instance string ApplyPolicy(string assemblyName)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(string assemblyString)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 ExecuteAssembly(string assemblyFile)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args)
		{
			ret
		}
		.method public hidebysig 
			instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args, uint8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
		{
			ret
		}
		.method public hidebysig 
			instance int32 ExecuteAssemblyByName(string assemblyName)
		{
			ret
		}
		.method public hidebysig 
			instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public hidebysig 
			instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args)
		{
			.param [3]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args)
		{
			.param [3]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			class System.AppDomain get_CurrentDomain()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Security.Policy.Evidence get_Evidence()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_FriendlyName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_BaseDirectory()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_RelativeSearchPath()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_ShadowCopyFiles()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly[] GetAssemblies()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Assembly[] ReflectionOnlyGetAssemblies()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsFinalizingForUnload()
			internalcall 
		{
		}
		.method public final virtual hidebysig newslot 
			instance void AppendPrivatePath(string path)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 A2 41 70 70 44 6F 6D 61 69 6E 2E 41 70 70 65 6E 64 50 72 69 76 61 74 65 50 61 74 68 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 50 72 69 76 61 74 65 42 69 6E 50 61 74 68 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void ClearPrivatePath()
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 A1 41 70 70 44 6F 6D 61 69 6E 2E 43 6C 65 61 72 50 72 69 76 61 74 65 50 61 74 68 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 50 72 69 76 61 74 65 42 69 6E 50 61 74 68 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void ClearShadowCopyPath()
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 AB 41 70 70 44 6F 6D 61 69 6E 2E 43 6C 65 61 72 53 68 61 64 6F 77 43 6F 70 79 50 61 74 68 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 53 68 61 64 6F 77 43 6F 70 79 44 69 72 65 63 74 6F 72 69 65 73 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetCachePath(string path)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 98 41 70 70 44 6F 6D 61 69 6E 2E 53 65 74 43 61 63 68 65 50 61 74 68 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 43 61 63 68 65 50 61 74 68 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetData(string name, object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void SetData(string name, object data, class System.Security.IPermission permission)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetData(string name)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetCurrentThreadId()
			preservesig 
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 81 29 41 70 70 44 6F 6D 61 69 6E 2E 47 65 74 43 75 72 72 65 6E 74 54 68 72 65 61 64 49 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 20 62 65 63 61 75 73 65 20 69 74 20 64 6F 65 73 20 6E 6F 74 20 70 72 6F 76 69 64 65 20 61 20 73 74 61 62 6C 65 20 49 64 20 77 68 65 6E 20 6D 61 6E 61 67 65 64 20 74 68 72 65 61 64 73 20 61 72 65 20 72 75 6E 6E 69 6E 67 20 6F 6E 20 66 69 62 65 72 73 20 28 61 6B 61 20 6C 69 67 68 74 77 65 69 67 68 74 20 74 68 72 65 61 64 73 29 2E 20 54 6F 20 67 65 74 20 61 20 73 74 61 62 6C 65 20 69 64 65 6E 74 69 66 69 65 72 20 66 6F 72 20 61 20 6D 61 6E 61 67 65 64 20 74 68 72 65 61 64 2C 20 75 73 65 20 74 68 65 20 4D 61 6E 61 67 65 64 54 68 72 65 61 64 49 64 20 70 72 6F 70 65 72 74 79 20 6F 6E 20 54 68 72 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00 00)
		}
		.method public static hidebysig 
			void Unload(class System.AppDomain domain)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetAppDomainPolicy(class System.Security.Policy.PolicyLevel domainPolicy)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetThreadPrincipal(class System.Security.Principal.IPrincipal principal)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetPrincipalPolicy(valuetype System.Security.Principal.PrincipalPolicy policy)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InitializeLifetimeService()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void DoCallBack(class System.CrossAppDomainDelegate callBackDelegate)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_DynamicDirectory()
		{
			ret
		}
		.method public static hidebysig 
			class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo)
		{
			ret
		}
		.method public static hidebysig 
			class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles)
		{
			ret
		}
		.method public static hidebysig 
			class System.AppDomain CreateDomain(string friendlyName)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_ProcessExit(class System.EventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_ProcessExit(class System.EventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_DomainUnload(class System.EventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_DomainUnload(class System.EventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void add_UnhandledException(class System.UnhandledExceptionEventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_UnhandledException(class System.UnhandledExceptionEventHandler 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info)
		{
			ret
		}
		.method public static hidebysig 
			class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, class System.AppDomainInitializer adInit, string[] adInitArgs)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void SetShadowCopyPath(string path)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 A9 41 70 70 44 6F 6D 61 69 6E 2E 53 65 74 53 68 61 64 6F 77 43 6F 70 79 50 61 74 68 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 53 68 61 64 6F 77 43 6F 70 79 44 69 72 65 63 74 6F 72 69 65 73 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetShadowCopyFiles()
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 A4 41 70 70 44 6F 6D 61 69 6E 2E 53 65 74 53 68 61 64 6F 77 43 6F 70 79 46 69 6C 65 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 53 68 61 64 6F 77 43 6F 70 79 46 69 6C 65 73 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetDynamicBase(string path)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 9C 41 70 70 44 6F 6D 61 69 6E 2E 53 65 74 44 79 6E 61 6D 69 63 42 61 73 65 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 69 6E 76 65 73 74 69 67 61 74 65 20 74 68 65 20 75 73 65 20 6F 66 20 41 70 70 44 6F 6D 61 69 6E 53 65 74 75 70 2E 44 79 6E 61 6D 69 63 42 61 73 65 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.AppDomainSetup get_SetupInformation()
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceAndUnwrap(string assemblyName, string typeName)
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName)
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes)
		{
			ret
		}
		.method public hidebysig 
			instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Id()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsDefaultAppDomain()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System._AppDomain.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System._AppDomain::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System._AppDomain.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System._AppDomain::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System._AppDomain.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System._AppDomain::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System._AppDomain.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System._AppDomain::Invoke
			ret
		}
		.event System.AssemblyLoadEventHandler AssemblyLoad
		{
			.addon instance void System.AppDomain::add_AssemblyLoad(class System.AssemblyLoadEventHandler)
			.removeon instance void System.AppDomain::remove_AssemblyLoad(class System.AssemblyLoadEventHandler)
		}
		.event System.ResolveEventHandler AssemblyResolve
		{
			.addon instance void System.AppDomain::add_AssemblyResolve(class System.ResolveEventHandler)
			.removeon instance void System.AppDomain::remove_AssemblyResolve(class System.ResolveEventHandler)
		}
		.event System.EventHandler DomainUnload
		{
			.addon instance void System.AppDomain::add_DomainUnload(class System.EventHandler)
			.removeon instance void System.AppDomain::remove_DomainUnload(class System.EventHandler)
		}
		.event System.EventHandler ProcessExit
		{
			.addon instance void System.AppDomain::add_ProcessExit(class System.EventHandler)
			.removeon instance void System.AppDomain::remove_ProcessExit(class System.EventHandler)
		}
		.event System.ResolveEventHandler ReflectionOnlyAssemblyResolve
		{
			.addon instance void System.AppDomain::add_ReflectionOnlyAssemblyResolve(class System.ResolveEventHandler)
			.removeon instance void System.AppDomain::remove_ReflectionOnlyAssemblyResolve(class System.ResolveEventHandler)
		}
		.event System.ResolveEventHandler ResourceResolve
		{
			.addon instance void System.AppDomain::add_ResourceResolve(class System.ResolveEventHandler)
			.removeon instance void System.AppDomain::remove_ResourceResolve(class System.ResolveEventHandler)
		}
		.event System.ResolveEventHandler TypeResolve
		{
			.addon instance void System.AppDomain::add_TypeResolve(class System.ResolveEventHandler)
			.removeon instance void System.AppDomain::remove_TypeResolve(class System.ResolveEventHandler)
		}
		.event System.UnhandledExceptionEventHandler UnhandledException
		{
			.addon instance void System.AppDomain::add_UnhandledException(class System.UnhandledExceptionEventHandler)
			.removeon instance void System.AppDomain::remove_UnhandledException(class System.UnhandledExceptionEventHandler)
		}
		.property instance string BaseDirectory()
		{
			.get instance string System.AppDomain::get_BaseDirectory()
		}
		.property class System.AppDomain CurrentDomain()
		{
			.get class System.AppDomain System.AppDomain::get_CurrentDomain()
		}
		.property instance class System.AppDomainManager DomainManager()
		{
			.get instance class System.AppDomainManager System.AppDomain::get_DomainManager()
		}
		.property instance string DynamicDirectory()
		{
			.get instance string System.AppDomain::get_DynamicDirectory()
		}
		.property instance class System.Security.Policy.Evidence Evidence()
		{
			.get instance class System.Security.Policy.Evidence System.AppDomain::get_Evidence()
		}
		.property instance string FriendlyName()
		{
			.get instance string System.AppDomain::get_FriendlyName()
		}
		.property instance int32 Id()
		{
			.get instance int32 System.AppDomain::get_Id()
		}
		.property instance string RelativeSearchPath()
		{
			.get instance string System.AppDomain::get_RelativeSearchPath()
		}
		.property instance class System.AppDomainSetup SetupInformation()
		{
			.get instance class System.AppDomainSetup System.AppDomain::get_SetupInformation()
		}
		.property instance bool ShadowCopyFiles()
		{
			.get instance bool System.AppDomain::get_ShadowCopyFiles()
		}
	}
	.class public sealed serializable AppDomainInitializer
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(string[] args)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(string[] args, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public AppDomainManager
		extends System.MarshalByRefObject
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo)
		{
			ret
		}
		.method family static hidebysig 
			class System.AppDomain CreateDomainHelper(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup appDomainInfo)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void InitializeNewDomain(class System.AppDomainSetup appDomainInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.AppDomainManagerInitializationOptions get_InitializationFlags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_InitializationFlags(valuetype System.AppDomainManagerInitializationOptions 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Security.HostSecurityManager get_HostSecurityManager()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Threading.HostExecutionContextManager get_HostExecutionContextManager()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.Assembly get_EntryAssembly()
		{
			ret
		}
		.property instance class System.Reflection.Assembly EntryAssembly()
		{
			.get instance class System.Reflection.Assembly System.AppDomainManager::get_EntryAssembly()
		}
		.property instance class System.Threading.HostExecutionContextManager HostExecutionContextManager()
		{
			.get instance class System.Threading.HostExecutionContextManager System.AppDomainManager::get_HostExecutionContextManager()
		}
		.property instance class System.Security.HostSecurityManager HostSecurityManager()
		{
			.get instance class System.Security.HostSecurityManager System.AppDomainManager::get_HostSecurityManager()
		}
		.property instance valuetype System.AppDomainManagerInitializationOptions InitializationFlags()
		{
			.get instance valuetype System.AppDomainManagerInitializationOptions System.AppDomainManager::get_InitializationFlags()
			.set instance void System.AppDomainManager::set_InitializationFlags(valuetype System.AppDomainManagerInitializationOptions)
		}
	}
	.class public sealed AppDomainManagerInitializationOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.AppDomainManagerInitializationOptions None = int32(0x00000000)
		.field static public literal valuetype System.AppDomainManagerInitializationOptions RegisterWithHost = int32(0x00000001)
	}
	.class public sealed serializable AppDomainSetup
		extends System.Object
		implements System.IAppDomainSetup
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ApplicationBase()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ApplicationBase(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ConfigurationFile()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ConfigurationFile(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetConfigurationBytes()
		{
			ret
		}
		.method public hidebysig 
			instance void SetConfigurationBytes(uint8[] 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_DynamicBase()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_DynamicBase(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DisallowPublisherPolicy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DisallowPublisherPolicy(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DisallowBindingRedirects()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DisallowBindingRedirects(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DisallowCodeDownload()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DisallowCodeDownload(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DisallowApplicationBaseProbing()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DisallowApplicationBaseProbing(bool 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ApplicationName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ApplicationName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.AppDomainInitializer get_AppDomainInitializer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AppDomainInitializer(class System.AppDomainInitializer 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_AppDomainInitializerArguments()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AppDomainInitializerArguments(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Runtime.Hosting.ActivationArguments get_ActivationArguments()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ActivationArguments(class System.Runtime.Hosting.ActivationArguments 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_PrivateBinPath()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_PrivateBinPath(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_PrivateBinPathProbe()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_PrivateBinPathProbe(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ShadowCopyDirectories()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ShadowCopyDirectories(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ShadowCopyFiles()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ShadowCopyFiles(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_CachePath()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_CachePath(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_LicenseFile()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_LicenseFile(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.LoaderOptimization get_LoaderOptimization()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LoaderOptimization(valuetype System.LoaderOptimization 'value')
		{
			ret
		}
		.property instance class System.Runtime.Hosting.ActivationArguments ActivationArguments()
		{
			.get instance class System.Runtime.Hosting.ActivationArguments System.AppDomainSetup::get_ActivationArguments()
			.set instance void System.AppDomainSetup::set_ActivationArguments(class System.Runtime.Hosting.ActivationArguments)
		}
		.property instance class System.AppDomainInitializer AppDomainInitializer()
		{
			.get instance class System.AppDomainInitializer System.AppDomainSetup::get_AppDomainInitializer()
			.set instance void System.AppDomainSetup::set_AppDomainInitializer(class System.AppDomainInitializer)
		}
		.property instance string[] AppDomainInitializerArguments()
		{
			.get instance string[] System.AppDomainSetup::get_AppDomainInitializerArguments()
			.set instance void System.AppDomainSetup::set_AppDomainInitializerArguments(string[])
		}
		.property instance string ApplicationBase()
		{
			.get instance string System.AppDomainSetup::get_ApplicationBase()
			.set instance void System.AppDomainSetup::set_ApplicationBase(string)
		}
		.property instance string ApplicationName()
		{
			.get instance string System.AppDomainSetup::get_ApplicationName()
			.set instance void System.AppDomainSetup::set_ApplicationName(string)
		}
		.property instance string CachePath()
		{
			.get instance string System.AppDomainSetup::get_CachePath()
			.set instance void System.AppDomainSetup::set_CachePath(string)
		}
		.property instance string ConfigurationFile()
		{
			.get instance string System.AppDomainSetup::get_ConfigurationFile()
			.set instance void System.AppDomainSetup::set_ConfigurationFile(string)
		}
		.property instance bool DisallowApplicationBaseProbing()
		{
			.get instance bool System.AppDomainSetup::get_DisallowApplicationBaseProbing()
			.set instance void System.AppDomainSetup::set_DisallowApplicationBaseProbing(bool)
		}
		.property instance bool DisallowBindingRedirects()
		{
			.get instance bool System.AppDomainSetup::get_DisallowBindingRedirects()
			.set instance void System.AppDomainSetup::set_DisallowBindingRedirects(bool)
		}
		.property instance bool DisallowCodeDownload()
		{
			.get instance bool System.AppDomainSetup::get_DisallowCodeDownload()
			.set instance void System.AppDomainSetup::set_DisallowCodeDownload(bool)
		}
		.property instance bool DisallowPublisherPolicy()
		{
			.get instance bool System.AppDomainSetup::get_DisallowPublisherPolicy()
			.set instance void System.AppDomainSetup::set_DisallowPublisherPolicy(bool)
		}
		.property instance string DynamicBase()
		{
			.get instance string System.AppDomainSetup::get_DynamicBase()
			.set instance void System.AppDomainSetup::set_DynamicBase(string)
		}
		.property instance string LicenseFile()
		{
			.get instance string System.AppDomainSetup::get_LicenseFile()
			.set instance void System.AppDomainSetup::set_LicenseFile(string)
		}
		.property instance valuetype System.LoaderOptimization LoaderOptimization()
		{
			.get instance valuetype System.LoaderOptimization System.AppDomainSetup::get_LoaderOptimization()
			.set instance void System.AppDomainSetup::set_LoaderOptimization(valuetype System.LoaderOptimization)
		}
		.property instance string PrivateBinPath()
		{
			.get instance string System.AppDomainSetup::get_PrivateBinPath()
			.set instance void System.AppDomainSetup::set_PrivateBinPath(string)
		}
		.property instance string PrivateBinPathProbe()
		{
			.get instance string System.AppDomainSetup::get_PrivateBinPathProbe()
			.set instance void System.AppDomainSetup::set_PrivateBinPathProbe(string)
		}
		.property instance string ShadowCopyDirectories()
		{
			.get instance string System.AppDomainSetup::get_ShadowCopyDirectories()
			.set instance void System.AppDomainSetup::set_ShadowCopyDirectories(string)
		}
		.property instance string ShadowCopyFiles()
		{
			.get instance string System.AppDomainSetup::get_ShadowCopyFiles()
			.set instance void System.AppDomainSetup::set_ShadowCopyFiles(string)
		}
	}
	.class public serializable AppDomainUnloadedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable ApplicationException
		extends System.Exception
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable ApplicationId
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8[] publicKeyToken, string name, class System.Version version, string processorArchitecture, string culture)
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8[] get_PublicKeyToken()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ProcessorArchitecture()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Culture()
		{
			ret
		}
		.method public hidebysig 
			instance class System.ApplicationId Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string Culture()
		{
			.get instance string System.ApplicationId::get_Culture()
		}
		.property instance string Name()
		{
			.get instance string System.ApplicationId::get_Name()
		}
		.property instance string ProcessorArchitecture()
		{
			.get instance string System.ApplicationId::get_ProcessorArchitecture()
		}
		.property instance uint8[] PublicKeyToken()
		{
			.get instance uint8[] System.ApplicationId::get_PublicKeyToken()
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.ApplicationId::get_Version()
		}
	}
	.class public sealed ArgIterator
		extends System.ValueType
	{
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.RuntimeArgumentHandle 'arglist')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.RuntimeArgumentHandle 'arglist', void* ptr)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance typedref GetNextArg()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance typedref GetNextArg(valuetype System.RuntimeTypeHandle rth)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void End()
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetRemainingCount()
			internalcall 
		{
		}
		.method public hidebysig 
			instance valuetype System.RuntimeTypeHandle GetNextArgType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public serializable ArgumentException
		extends System.SystemException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string paramName, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string paramName)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ParamName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string Message()
		{
			.get instance string System.ArgumentException::get_Message()
		}
		.property instance string ParamName()
		{
			.get instance string System.ArgumentException::get_ParamName()
		}
	}
	.class public serializable ArgumentNullException
		extends System.ArgumentException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string paramName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string paramName, string message)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
	}
	.class public serializable ArgumentOutOfRangeException
		extends System.ArgumentException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string paramName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string paramName, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string paramName, object actualValue, string message)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_ActualValue()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.property instance object ActualValue()
		{
			.get instance object System.ArgumentOutOfRangeException::get_ActualValue()
		}
		.property instance string Message()
		{
			.get instance string System.ArgumentOutOfRangeException::get_Message()
		}
	}
	.class public serializable ArithmeticException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract serializable Array
		extends System.Object
		implements System.ICloneable, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class 'System.Collections.ObjectModel.ReadOnlyCollection`1'<!!0> AsReadOnly<T>(!!0[] 'array')
		{
			ret
		}
		.method public static hidebysig 
			void Resize<T>(!!0[]& 'array', int32 newSize)
		{
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2)
		{
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int32 length1, int32 length2, int32 length3)
		{
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int32[] lengths)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int64[] lengths)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Array CreateInstance(class System.Type elementType, int32[] lengths, int32[] lowerBounds)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(class System.Array sourceArray, class System.Array destinationArray, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void ConstrainedCopy(class System.Array sourceArray, int32 sourceIndex, class System.Array destinationArray, int32 destinationIndex, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(class System.Array sourceArray, class System.Array destinationArray, int64 length)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(class System.Array sourceArray, int64 sourceIndex, class System.Array destinationArray, int64 destinationIndex, int64 length)
		{
			ret
		}
		.method public static hidebysig 
			void Clear(class System.Array 'array', int32 index, int32 length)
			internalcall 
		{
		}
		.method public hidebysig 
			instance object GetValue(int32[] indices)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance object GetValue(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance object GetValue(int32 index1, int32 index2)
		{
			ret
		}
		.method public hidebysig 
			instance object GetValue(int32 index1, int32 index2, int32 index3)
		{
			ret
		}
		.method public hidebysig 
			instance object GetValue(int64 index)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance object GetValue(int64 index1, int64 index2)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance object GetValue(int64 index1, int64 index2, int64 index3)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance object GetValue(int64[] indices)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int32 index1, int32 index2)
		{
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int32 index1, int32 index2, int32 index3)
		{
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int32[] indices)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int64 index)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int64 index1, int64 index2)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int64 index1, int64 index2, int64 index3)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(object 'value', int64[] indices)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Length()
			internalcall 
		{
		}
		.method public hidebysig specialname 
			instance int64 get_LongLength()
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetLength(int32 dimension)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int64 GetLongLength(int32 dimension)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Rank()
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 GetUpperBound(int32 dimension)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 GetLowerBound(int32 dimension)
			internalcall 
		{
		}
		.method private final virtual hidebysig newslot specialname 
			instance int32 System.Collections.ICollection.get_Count()
		{
			.override System.Collections.ICollection::get_Count
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFixedSize()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IList.get_Item(int32 index)
		{
			.override System.Collections.IList::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IList.set_Item(int32 index, object 'value')
		{
			.override System.Collections.IList::set_Item
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.Add(object 'value')
		{
			.override System.Collections.IList::Add
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IList.Contains(object 'value')
		{
			.override System.Collections.IList::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Clear()
		{
			.override System.Collections.IList::Clear
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.IndexOf(object 'value')
		{
			.override System.Collections.IList::IndexOf
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Insert(int32 index, object 'value')
		{
			.override System.Collections.IList::Insert
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Remove(object 'value')
		{
			.override System.Collections.IList::Remove
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.RemoveAt(int32 index)
		{
			.override System.Collections.IList::RemoveAt
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch(class System.Array 'array', object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch(class System.Array 'array', int32 index, int32 length, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch(class System.Array 'array', object 'value', class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch(class System.Array 'array', int32 index, int32 length, object 'value', class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch<T>(!!0[] 'array', !!0 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch<T>(!!0[] 'array', !!0 'value', class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch<T>(!!0[] 'array', int32 index, int32 length, !!0 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 BinarySearch<T>(!!0[] 'array', int32 index, int32 length, !!0 'value', class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			!!1[] ConvertAll<TInput, TOutput>(!!0[] 'array', class 'System.Converter`2'<!!0,!!1> converter)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance void CopyTo(class System.Array 'array', int64 index)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool Exists<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			!!0 Find<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			!!0[] FindAll<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindIndex<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindIndex<T>(!!0[] 'array', int32 startIndex, class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindIndex<T>(!!0[] 'array', int32 startIndex, int32 count, class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			!!0 FindLast<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindLastIndex<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindLastIndex<T>(!!0[] 'array', int32 startIndex, class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			int32 FindLastIndex<T>(!!0[] 'array', int32 startIndex, int32 count, class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public static hidebysig 
			void ForEach<T>(!!0[] 'array', class 'System.Action`1'<!!0> action)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf(class System.Array 'array', object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf(class System.Array 'array', object 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf(class System.Array 'array', object 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf<T>(!!0[] 'array', !!0 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf<T>(!!0[] 'array', !!0 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int32 IndexOf<T>(!!0[] 'array', !!0 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf(class System.Array 'array', object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf(class System.Array 'array', object 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf(class System.Array 'array', object 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf<T>(!!0[] 'array', !!0 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf<T>(!!0[] 'array', !!0 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int32 LastIndexOf<T>(!!0[] 'array', !!0 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			void Reverse(class System.Array 'array')
		{
			ret
		}
		.method public static hidebysig 
			void Reverse(class System.Array 'array', int32 index, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array 'array')
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array keys, class System.Array items)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array 'array', int32 index, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array keys, class System.Array items, int32 index, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array 'array', class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array keys, class System.Array items, class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array 'array', int32 index, int32 length, class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort(class System.Array keys, class System.Array items, int32 index, int32 length, class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<T>(!!0[] 'array')
		{
			ret
		}
		.method public static hidebysig 
			void Sort<TKey, TValue>(!!0[] keys, !!1[] items)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<T>(!!0[] 'array', int32 index, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<TKey, TValue>(!!0[] keys, !!1[] items, int32 index, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<T>(!!0[] 'array', class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<TKey, TValue>(!!0[] keys, !!1[] items, class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<T>(!!0[] 'array', int32 index, int32 length, class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<TKey, TValue>(!!0[] keys, !!1[] items, int32 index, int32 length, class 'System.Collections.Generic.IComparer`1'<!!0> comparer)
		{
			ret
		}
		.method public static hidebysig 
			void Sort<T>(!!0[] 'array', class 'System.Comparison`1'<!!0> comparison)
		{
			ret
		}
		.method public static hidebysig 
			bool TrueForAll<T>(!!0[] 'array', class 'System.Predicate`1'<!!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance void Initialize()
			internalcall 
		{
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Array::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Array::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Array::get_IsSynchronized()
		}
		.property instance int32 Length()
		{
			.get instance int32 System.Array::get_Length()
		}
		.property instance int64 LongLength()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int64 System.Array::get_LongLength()
		}
		.property instance int32 Rank()
		{
			.get instance int32 System.Array::get_Rank()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Array::get_SyncRoot()
		}
		.property instance int32 System.Collections.ICollection.Count()
		{
			.get instance int32 System.Array::System.Collections.ICollection.get_Count()
		}
		.property instance object System.Collections.IList.Item(int32)
		{
			.get instance object System.Array::System.Collections.IList.get_Item(int32)
			.set instance void System.Array::System.Collections.IList.set_Item(int32, object)
		}
	}
	.class public sequential sealed serializable 'ArraySegment`1'<T>
		extends System.ValueType
	{
		.method public hidebysig specialname 
			instance void .ctor(!0[] 'array')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(!0[] 'array', int32 offset, int32 count)
		{
			ret
		}
		.method public hidebysig specialname 
			instance !0[] get_Array()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Offset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype 'System.ArraySegment`1'<!0> obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype 'System.ArraySegment`1'<!0> a, valuetype 'System.ArraySegment`1'<!0> b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype 'System.ArraySegment`1'<!0> a, valuetype 'System.ArraySegment`1'<!0> b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance !0[] Array()
		{
			.get instance !0[] 'System.ArraySegment`1'::get_Array()
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.ArraySegment`1'::get_Count()
		}
		.property instance int32 Offset()
		{
			.get instance int32 'System.ArraySegment`1'::get_Offset()
		}
	}
	.class public serializable ArrayTypeMismatchException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public AssemblyLoadEventArgs
		extends System.EventArgs
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance class System.Reflection.Assembly get_LoadedAssembly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Reflection.Assembly loadedAssembly)
		{
			ret
		}
		.property instance class System.Reflection.Assembly LoadedAssembly()
		{
			.get instance class System.Reflection.Assembly System.AssemblyLoadEventArgs::get_LoadedAssembly()
		}
	}
	.class public sealed serializable AssemblyLoadEventHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class System.AssemblyLoadEventArgs args)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.AssemblyLoadEventArgs args, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed serializable AsyncCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(class System.IAsyncResult ar)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.IAsyncResult ar, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract serializable Attribute
		extends System.Object
		implements System.Runtime.InteropServices._Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 7F 00 00 02 00 54 02 09 49 6E 68 65 72 69 74 65 64 01 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 29 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 41 74 74 72 69 62 75 74 65 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type 'type', bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.Module element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.Module element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_TypeId()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Match(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsDefaultAttribute()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Attribute.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._Attribute::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Attribute.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._Attribute::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Attribute.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._Attribute::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Attribute.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._Attribute::Invoke
			ret
		}
		.property instance object TypeId()
		{
			.get instance object System.Attribute::get_TypeId()
		}
	}
	.class public sealed serializable AttributeTargets
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.AttributeTargets All = int32(0x00007FFF)
		.field static public literal valuetype System.AttributeTargets Assembly = int32(0x00000001)
		.field static public literal valuetype System.AttributeTargets Class = int32(0x00000004)
		.field static public literal valuetype System.AttributeTargets Constructor = int32(0x00000020)
		.field static public literal valuetype System.AttributeTargets Delegate = int32(0x00001000)
		.field static public literal valuetype System.AttributeTargets Enum = int32(0x00000010)
		.field static public literal valuetype System.AttributeTargets Event = int32(0x00000200)
		.field static public literal valuetype System.AttributeTargets Field = int32(0x00000100)
		.field static public literal valuetype System.AttributeTargets GenericParameter = int32(0x00004000)
		.field static public literal valuetype System.AttributeTargets Interface = int32(0x00000400)
		.field static public literal valuetype System.AttributeTargets Method = int32(0x00000040)
		.field static public literal valuetype System.AttributeTargets Module = int32(0x00000002)
		.field static public literal valuetype System.AttributeTargets Parameter = int32(0x00000800)
		.field static public literal valuetype System.AttributeTargets Property = int32(0x00000080)
		.field static public literal valuetype System.AttributeTargets ReturnValue = int32(0x00002000)
		.field static public literal valuetype System.AttributeTargets Struct = int32(0x00000008)
	}
	.class public sealed serializable AttributeUsageAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.AttributeTargets validOn)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.AttributeTargets get_ValidOn()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AllowMultiple()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllowMultiple(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Inherited()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Inherited(bool 'value')
		{
			ret
		}
		.property instance bool AllowMultiple()
		{
			.get instance bool System.AttributeUsageAttribute::get_AllowMultiple()
			.set instance void System.AttributeUsageAttribute::set_AllowMultiple(bool)
		}
		.property instance bool Inherited()
		{
			.get instance bool System.AttributeUsageAttribute::get_Inherited()
			.set instance void System.AttributeUsageAttribute::set_Inherited(bool)
		}
		.property instance valuetype System.AttributeTargets ValidOn()
		{
			.get instance valuetype System.AttributeTargets System.AttributeUsageAttribute::get_ValidOn()
		}
	}
	.class public serializable BadImageFormatException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName, class System.Exception inner)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FileName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FusionLog()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string FileName()
		{
			.get instance string System.BadImageFormatException::get_FileName()
		}
		.property instance string FusionLog()
		{
			.get instance string System.BadImageFormatException::get_FusionLog()
		}
		.property instance string Message()
		{
			.get instance string System.BadImageFormatException::get_Message()
		}
	}
	.class public sealed Base64FormattingOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Base64FormattingOptions InsertLineBreaks = int32(0x00000001)
		.field static public literal valuetype System.Base64FormattingOptions None = int32(0x00000000)
	}
	.class public abstract sealed BitConverter
		extends System.Object
	{
		.method public static hidebysig 
			uint8[] GetBytes(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8[] GetBytes(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(uint8[] 'value', int32 startIndex)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(uint8[] 'value', int32 startIndex)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(uint8[] 'value', int32 startIndex)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint8[] 'value', int32 startIndex, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint8[] 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(uint8[] 'value', int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			int64 DoubleToInt64Bits(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 Int64BitsToDouble(int64 'value')
		{
			ret
		}
		.field static public initonly bool IsLittleEndian
	}
	.class public sequential sealed serializable Boolean
		extends System.ValueType
		implements System.IComparable, System.IConvertible, class 'System.IComparable`1'<bool>, class 'System.IEquatable`1'<bool>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(bool obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool Parse(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string 'value', [out] bool& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public initonly string TrueString
		.field static public initonly string FalseString

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public abstract sealed Buffer
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void BlockCopy(class System.Array src, int32 srcOffset, class System.Array dst, int32 dstOffset, int32 count)
			internalcall 
		{
		}
		.method public static hidebysig 
			uint8 GetByte(class System.Array 'array', int32 index)
			internalcall 
		{
		}
		.method public static hidebysig 
			void SetByte(class System.Array 'array', int32 index, uint8 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 ByteLength(class System.Array 'array')
			internalcall 
		{
		}
	}
	.class public sequential sealed serializable Byte
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<uint8>, class 'System.IEquatable`1'<uint8>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(uint8 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public static hidebysig 
			uint8 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			uint8 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			uint8 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint8 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] uint8& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] uint8& result)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal uint8 MaxValue = uint8(0xFF)
		.field static public literal uint8 MinValue = uint8(0x00)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed serializable CLSCompliantAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 7F 00 00 02 00 54 02 09 49 6E 68 65 72 69 74 65 64 01 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool isCompliant)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCompliant()
		{
			ret
		}
		.property instance bool IsCompliant()
		{
			.get instance bool System.CLSCompliantAttribute::get_IsCompliant()
		}
	}
	.class public serializable CannotUnloadAppDomainException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sequential sealed serializable Char
		extends System.ValueType
		implements System.IComparable, System.IConvertible, class 'System.IComparable`1'<char>, class 'System.IEquatable`1'<char>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(char obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(char 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(char c)
		{
			ret
		}
		.method public static hidebysig 
			char Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] char& result)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDigit(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLetter(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsWhiteSpace(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsUpper(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLower(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsPunctuation(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLetterOrDigit(char c)
		{
			ret
		}
		.method public static hidebysig 
			char ToUpper(char c, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig 
			char ToUpper(char c)
		{
			ret
		}
		.method public static hidebysig 
			char ToUpperInvariant(char c)
		{
			ret
		}
		.method public static hidebysig 
			char ToLower(char c, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig 
			char ToLower(char c)
		{
			ret
		}
		.method public static hidebysig 
			char ToLowerInvariant(char c)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.method public static hidebysig 
			bool IsControl(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsControl(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDigit(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLetter(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLetterOrDigit(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLower(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNumber(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNumber(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsPunctuation(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSeparator(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSeparator(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSurrogate(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSurrogate(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSymbol(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSymbol(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsUpper(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsWhiteSpace(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			float64 GetNumericValue(char c)
		{
			ret
		}
		.method public static hidebysig 
			float64 GetNumericValue(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsHighSurrogate(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsHighSurrogate(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLowSurrogate(char c)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLowSurrogate(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSurrogatePair(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSurrogatePair(char highSurrogate, char lowSurrogate)
		{
			ret
		}
		.method public static hidebysig 
			string ConvertFromUtf32(int32 utf32)
		{
			ret
		}
		.method public static hidebysig 
			int32 ConvertToUtf32(char highSurrogate, char lowSurrogate)
		{
			ret
		}
		.method public static hidebysig 
			int32 ConvertToUtf32(string s, int32 index)
		{
			ret
		}
		.field static public literal char MaxValue = char(0xFFFF)
		.field static public literal char MinValue = char(0x0000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed serializable CharEnumerator
		extends System.Object
		implements System.ICloneable, class 'System.Collections.Generic.IEnumerator`1'<char>, System.IDisposable, System.Collections.IEnumerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool MoveNext()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IEnumerator.get_Current()
		{
			.override System.Collections.IEnumerator::get_Current
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance char get_Current()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Reset()
		{
			ret
		}
		.property instance char Current()
		{
			.get instance char System.CharEnumerator::get_Current()
		}
		.property instance object System.Collections.IEnumerator.Current()
		{
			.get instance object System.CharEnumerator::System.Collections.IEnumerator.get_Current()
		}
	}
	.class public sealed 'Comparison`1'<T>
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 Invoke(!0 x, !0 y)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(!0 x, !0 y, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract sealed Console
		extends System.Object
	{
		.method public static hidebysig specialname 
			class 'System.IO.TextWriter' get_Error()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class 'System.IO.TextReader' get_In()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class 'System.IO.TextWriter' get_Out()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_InputEncoding()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_InputEncoding(class System.Text.Encoding 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_OutputEncoding()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_OutputEncoding(class System.Text.Encoding 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			void add_CancelKeyPress(class System.ConsoleCancelEventHandler 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			void remove_CancelKeyPress(class System.ConsoleCancelEventHandler 'value')
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardError()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardError(int32 bufferSize)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardInput()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardInput(int32 bufferSize)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardOutput()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' OpenStandardOutput(int32 bufferSize)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetIn(class 'System.IO.TextReader' newIn)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetOut(class 'System.IO.TextWriter' newOut)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetError(class 'System.IO.TextWriter' newError)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 Read()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			string ReadLine()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(char 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(char[] buffer)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(char[] buffer, int32 index, int32 count)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(valuetype System.Decimal 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(float64 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(float32 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(int32 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(uint32 'value')
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(int64 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(uint64 'value')
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(object 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(string 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(string format, object arg0)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(string format, object arg0, object arg1)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(string format, object arg0, object arg1, object arg2)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			vararg void WriteLine(string format, object arg0, object arg1, object arg2, object arg3)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void WriteLine(string format, object[] arg)
		{
			.permissionset linkcheck = (00)
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Write(string format, object arg0)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(string format, object arg0, object arg1)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(string format, object arg0, object arg1, object arg2)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			vararg void Write(string format, object arg0, object arg1, object arg2, object arg3)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Write(string format, object[] arg)
		{
			.permissionset linkcheck = (00)
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Write(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(char 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(char[] buffer)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(char[] buffer, int32 index, int32 count)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(float64 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(valuetype System.Decimal 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(float32 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(int32 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(uint32 'value')
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Write(int64 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(uint64 'value')
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Write(object 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Write(string 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.event System.ConsoleCancelEventHandler CancelKeyPress
		{
			.addon void System.Console::add_CancelKeyPress(class System.ConsoleCancelEventHandler)
			.removeon void System.Console::remove_CancelKeyPress(class System.ConsoleCancelEventHandler)
		}
		.property class 'System.IO.TextWriter' Error()
		{
			.get class 'System.IO.TextWriter' System.Console::get_Error()
		}
		.property class 'System.IO.TextReader' In()
		{
			.get class 'System.IO.TextReader' System.Console::get_In()
		}
		.property class System.Text.Encoding InputEncoding()
		{
			.get class System.Text.Encoding System.Console::get_InputEncoding()
			.set void System.Console::set_InputEncoding(class System.Text.Encoding)
		}
		.property class 'System.IO.TextWriter' Out()
		{
			.get class 'System.IO.TextWriter' System.Console::get_Out()
		}
		.property class System.Text.Encoding OutputEncoding()
		{
			.get class System.Text.Encoding System.Console::get_OutputEncoding()
			.set void System.Console::set_OutputEncoding(class System.Text.Encoding)
		}
	}
	.class public sealed serializable ConsoleCancelEventArgs
		extends System.EventArgs
	{
		.method public hidebysig specialname 
			instance bool get_Cancel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Cancel(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.ConsoleSpecialKey get_SpecialKey()
		{
			ret
		}
		.property instance bool Cancel()
		{
			.get instance bool System.ConsoleCancelEventArgs::get_Cancel()
			.set instance void System.ConsoleCancelEventArgs::set_Cancel(bool)
		}
		.property instance valuetype System.ConsoleSpecialKey SpecialKey()
		{
			.get instance valuetype System.ConsoleSpecialKey System.ConsoleCancelEventArgs::get_SpecialKey()
		}
	}
	.class public sealed ConsoleCancelEventHandler
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class System.ConsoleCancelEventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.ConsoleCancelEventArgs e, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed serializable ConsoleSpecialKey
		extends System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.ConsoleSpecialKey ControlBreak = int32(0x00000001)
		.field static public literal valuetype System.ConsoleSpecialKey ControlC = int32(0x00000000)
	}
	.class public abstract serializable ContextBoundObject
		extends System.MarshalByRefObject
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable ContextMarshalException
		extends System.SystemException
	{
		.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 24 43 6F 6E 74 65 78 74 4D 61 72 73 68 61 6C 45 78 63 65 70 74 69 6F 6E 20 69 73 20 6F 62 73 6F 6C 65 74 65 2E 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable ContextStaticAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed Convert
		extends System.Object
	{
		.method public static hidebysig 
			valuetype System.TypeCode GetTypeCode(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool IsDBNull(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			object ChangeType(object 'value', valuetype System.TypeCode typeCode)
		{
			ret
		}
		.method public static hidebysig 
			object ChangeType(object 'value', valuetype System.TypeCode typeCode, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			object ChangeType(object 'value', class System.Type conversionType)
		{
			ret
		}
		.method public static hidebysig 
			object ChangeType(object 'value', class System.Type conversionType, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool ToBoolean(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			char ToChar(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			char ToChar(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			char ToChar(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			char ToChar(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			char ToChar(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(object 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(bool 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(char 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(uint8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(int16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(int32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(int64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(float32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(float64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(string 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(string 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(valuetype System.DateTime 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(object 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(bool 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(char 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(uint8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(int16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(int32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(int64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(float32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(float64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(string 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(string 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(valuetype System.DateTime 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(object 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(bool 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(char 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(uint8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(int16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(int32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(int64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(float32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(float64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(string 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(string 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(valuetype System.DateTime 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(object 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(bool 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(char 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(uint8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(int16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(int32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(int64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(float32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(float64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(string 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(string 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(valuetype System.DateTime 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal ToDecimal(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ToDateTime(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(object 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(bool 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(char 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(char 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(int8 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint8 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int16 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(uint16 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int32 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(uint32 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int64 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(uint64 'value', class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(float32 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(float64 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.Decimal 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.DateTime 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			string ToString(string 'value', class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(string 'value', int32 fromBase)
		{
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(string 'value', int32 fromBase)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(string 'value', int32 fromBase)
		{
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(string 'value', int32 fromBase)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToInt32(string 'value', int32 fromBase)
		{
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(string 'value', int32 fromBase)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(string 'value', int32 fromBase)
		{
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(string 'value', int32 fromBase)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToString(uint8 'value', int32 toBase)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int16 'value', int32 toBase)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int32 'value', int32 toBase)
		{
			ret
		}
		.method public static hidebysig 
			string ToString(int64 'value', int32 toBase)
		{
			ret
		}
		.method public static hidebysig 
			string ToBase64String(uint8[] inArray)
		{
			ret
		}
		.method public static hidebysig 
			string ToBase64String(uint8[] inArray, valuetype System.Base64FormattingOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string ToBase64String(uint8[] inArray, int32 offset, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			string ToBase64String(uint8[] inArray, int32 offset, int32 length, valuetype System.Base64FormattingOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 ToBase64CharArray(uint8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut)
		{
			ret
		}
		.method public static hidebysig 
			int32 ToBase64CharArray(uint8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, valuetype System.Base64FormattingOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8[] FromBase64String(string s)
			internalcall 
		{
		}
		.method public static hidebysig 
			uint8[] FromBase64CharArray(char[] inArray, int32 offset, int32 length)
			internalcall 
		{
		}
		.field static public initonly object DBNull
	}
	.class public sealed 'Converter`2'<TInput, TOutput>
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance !1 Invoke(!0 input)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(!0 input, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance !1 EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed CrossAppDomainDelegate
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed serializable DBNull
		extends System.Object
		implements System.Runtime.Serialization.ISerializable, System.IConvertible
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public initonly class System.DBNull Value
	}
	.class public sealed serializable DataMisalignedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
	}
	.class public sealed serializable DateTime
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, System.Runtime.Serialization.ISerializable, class 'System.IComparable`1'<valuetype System.DateTime>, class 'System.IEquatable`1'<valuetype System.DateTime>
	{
		.method public hidebysig specialname 
			instance void .ctor(int64 ticks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime Add(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddDays(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddHours(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddMilliseconds(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddMinutes(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddMonths(int32 months)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddSeconds(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddTicks(int64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime AddYears(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 DaysInMonth(int32 year, int32 month)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime FromBinary(int64 dateData)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime FromFileTime(int64 fileTime)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime FromFileTimeUtc(int64 fileTime)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime FromOADate(float64 d)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.method public hidebysig 
			instance bool IsDaylightSavingTime()
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime SpecifyKind(valuetype System.DateTime 'value', valuetype System.DateTimeKind kind)
		{
			ret
		}
		.method public hidebysig 
			instance int64 ToBinary()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Date()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Day()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DayOfWeek get_DayOfWeek()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_DayOfYear()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Hour()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTimeKind get_Kind()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Millisecond()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Minute()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Month()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.DateTime get_Now()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.DateTime get_UtcNow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Second()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_Ticks()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.TimeSpan get_TimeOfDay()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.DateTime get_Today()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Year()
		{
			ret
		}
		.method public static hidebysig 
			bool IsLeapYear(int32 year)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.TimeSpan Subtract(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime Subtract(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public hidebysig 
			instance float64 ToOADate()
		{
			ret
		}
		.method public hidebysig 
			instance int64 ToFileTime()
		{
			ret
		}
		.method public hidebysig 
			instance int64 ToFileTimeUtc()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime ToLocalTime()
		{
			ret
		}
		.method public hidebysig 
			instance string ToLongDateString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToLongTimeString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToShortDateString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToShortTimeString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime ToUniversalTime()
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] valuetype System.DateTime& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime& result)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetDateTimeFormats()
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetDateTimeFormats(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetDateTimeFormats(char format)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public initonly valuetype System.DateTime MaxValue
		.field static public initonly valuetype System.DateTime MinValue

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance valuetype System.DateTime Date()
		{
			.get instance valuetype System.DateTime System.DateTime::get_Date()
		}
		.property instance int32 Day()
		{
			.get instance int32 System.DateTime::get_Day()
		}
		.property instance valuetype System.DayOfWeek DayOfWeek()
		{
			.get instance valuetype System.DayOfWeek System.DateTime::get_DayOfWeek()
		}
		.property instance int32 DayOfYear()
		{
			.get instance int32 System.DateTime::get_DayOfYear()
		}
		.property instance int32 Hour()
		{
			.get instance int32 System.DateTime::get_Hour()
		}
		.property instance valuetype System.DateTimeKind Kind()
		{
			.get instance valuetype System.DateTimeKind System.DateTime::get_Kind()
		}
		.property instance int32 Millisecond()
		{
			.get instance int32 System.DateTime::get_Millisecond()
		}
		.property instance int32 Minute()
		{
			.get instance int32 System.DateTime::get_Minute()
		}
		.property instance int32 Month()
		{
			.get instance int32 System.DateTime::get_Month()
		}
		.property valuetype System.DateTime Now()
		{
			.get valuetype System.DateTime System.DateTime::get_Now()
		}
		.property instance int32 Second()
		{
			.get instance int32 System.DateTime::get_Second()
		}
		.property instance int64 Ticks()
		{
			.get instance int64 System.DateTime::get_Ticks()
		}
		.property instance valuetype System.TimeSpan TimeOfDay()
		{
			.get instance valuetype System.TimeSpan System.DateTime::get_TimeOfDay()
		}
		.property valuetype System.DateTime Today()
		{
			.get valuetype System.DateTime System.DateTime::get_Today()
		}
		.property valuetype System.DateTime UtcNow()
		{
			.get valuetype System.DateTime System.DateTime::get_UtcNow()
		}
		.property instance int32 Year()
		{
			.get instance int32 System.DateTime::get_Year()
		}
	}
	.class public sealed serializable DateTimeKind
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.DateTimeKind Local = int32(0x00000002)
		.field static public literal valuetype System.DateTimeKind Unspecified = int32(0x00000000)
		.field static public literal valuetype System.DateTimeKind Utc = int32(0x00000001)
	}
	.class public sealed serializable DayOfWeek
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.DayOfWeek Friday = int32(0x00000005)
		.field static public literal valuetype System.DayOfWeek Monday = int32(0x00000001)
		.field static public literal valuetype System.DayOfWeek Saturday = int32(0x00000006)
		.field static public literal valuetype System.DayOfWeek Sunday = int32(0x00000000)
		.field static public literal valuetype System.DayOfWeek Thursday = int32(0x00000004)
		.field static public literal valuetype System.DayOfWeek Tuesday = int32(0x00000002)
		.field static public literal valuetype System.DayOfWeek Wednesday = int32(0x00000003)
	}
	.class public sequential sealed serializable Decimal
		extends System.ValueType
		implements System.IFormattable, System.IComparable, System.IConvertible, class 'System.IComparable`1'<valuetype System.Decimal>, class 'System.IEquatable`1'<valuetype System.Decimal>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(float32 'value')
			internalcall 
		{
		}
		.method public hidebysig specialname 
			instance void .ctor(float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			int64 ToOACurrency(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal FromOACurrency(int64 cy)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32[] bits)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 lo, int32 mid, int32 hi, bool isNegative, uint8 scale)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Add(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Ceiling(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(valuetype System.Decimal d1, valuetype System.Decimal d2)
			internalcall 
		{
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Divide(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
			internalcall 
		{
		}
		.method public static hidebysig 
			bool Equals(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Floor(valuetype System.Decimal d)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] valuetype System.Decimal& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] valuetype System.Decimal& result)
		{
			ret
		}
		.method public static hidebysig 
			int32[] GetBits(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Remainder(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Multiply(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Negate(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Subtract(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig 
			uint8 ToByte(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int8 ToSByte(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 ToInt16(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			float64 ToDouble(valuetype System.Decimal d)
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 ToInt32(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			int64 ToInt64(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			uint16 ToUInt16(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 ToUInt32(valuetype System.Decimal d)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 ToUInt64(valuetype System.Decimal d)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 ToSingle(valuetype System.Decimal d)
			internalcall 
		{
		}
		.method public static hidebysig 
			valuetype System.Decimal Truncate(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(uint8 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(int16 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(char 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(int32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(int64 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Implicit(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Explicit(float32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Explicit(float64 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint8 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			int8 op_Explicit(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			char op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			int16 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint16 op_Explicit(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			int32 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint32 op_Explicit(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			int64 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint64 op_Explicit(valuetype System.Decimal 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			float32 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			float64 op_Explicit(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_UnaryPlus(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_UnaryNegation(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Increment(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Decrement(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Addition(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Subtraction(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Multiply(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Division(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Decimal op_Modulus(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThan(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThanOrEqual(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThan(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThanOrEqual(valuetype System.Decimal d1, valuetype System.Decimal d2)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public initonly valuetype System.Decimal Zero
			.custom instance void System.Runtime.CompilerServices.DecimalConstantAttribute::.ctor(uint8, uint8, uint32, uint32, uint32) = (01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00)
		.field static public initonly valuetype System.Decimal One
			.custom instance void System.Runtime.CompilerServices.DecimalConstantAttribute::.ctor(uint8, uint8, uint32, uint32, uint32) = (01 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00)
		.field static public initonly valuetype System.Decimal MinusOne
			.custom instance void System.Runtime.CompilerServices.DecimalConstantAttribute::.ctor(uint8, uint8, uint32, uint32, uint32) = (01 00 00 80 00 00 00 00 00 00 00 00 01 00 00 00 00 00)
		.field static public initonly valuetype System.Decimal MaxValue
			.custom instance void System.Runtime.CompilerServices.DecimalConstantAttribute::.ctor(uint8, uint8, uint32, uint32, uint32) = (01 00 00 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 00)
		.field static public initonly valuetype System.Decimal MinValue
			.custom instance void System.Runtime.CompilerServices.DecimalConstantAttribute::.ctor(uint8, uint8, uint32, uint32, uint32) = (01 00 00 80 FF FF FF FF FF FF FF FF FF FF FF FF 00 00)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public abstract serializable Delegate
		extends System.Object
		implements System.ICloneable, System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 02 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(object target, string 'method')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Type target, string 'method')
		{
			ret
		}
		.method public hidebysig 
			instance object DynamicInvoke(object[] args)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method family virtual hidebysig newslot 
			instance object DynamicInvokeImpl(object[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate Combine(class System.Delegate a, class System.Delegate b)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate Combine(class System.Delegate[] delegates)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Delegate[] GetInvocationList()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.MethodInfo get_Method()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethodImpl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Target()
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate Remove(class System.Delegate source, class System.Delegate 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate RemoveAll(class System.Delegate source, class System.Delegate 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Delegate CombineImpl(class System.Delegate d)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Delegate RemoveImpl(class System.Delegate d)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', object target, string 'method')
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', object target, string 'method', bool ignoreCase)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', object target, string 'method', bool ignoreCase, bool throwOnBindFailure)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', class System.Type target, string 'method')
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', class System.Type target, string 'method', bool ignoreCase)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', class System.Type target, string 'method', bool ignoreCase, bool throwOnBindFailure)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', class System.Reflection.MethodInfo 'method')
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', class System.Reflection.MethodInfo 'method', bool throwOnBindFailure)
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', object firstArgument, class System.Reflection.MethodInfo 'method')
		{
			ret
		}
		.method public static hidebysig 
			class System.Delegate CreateDelegate(class System.Type 'type', object firstArgument, class System.Reflection.MethodInfo 'method', bool throwOnBindFailure)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(class System.Delegate d1, class System.Delegate d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(class System.Delegate d1, class System.Delegate d2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.property instance class System.Reflection.MethodInfo Method()
		{
			.get instance class System.Reflection.MethodInfo System.Delegate::get_Method()
		}
		.property instance object Target()
		{
			.get instance object System.Delegate::get_Target()
		}
	}
	.class public serializable DivideByZeroException
		extends System.ArithmeticException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable DllNotFoundException
		extends System.TypeLoadException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sequential sealed serializable Double
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<float64>, class 'System.IEquatable`1'<float64>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool IsInfinity(float64 d)
		{
			ret
		}
		.method public static hidebysig 
			bool IsPositiveInfinity(float64 d)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNegativeInfinity(float64 d)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNaN(float64 d)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(float64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(float64 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float64 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			float64 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			float64 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] float64& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float64& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal float64 MinValue = float64(0xFFEFFFFFFFFFFFFF)
		.field static public literal float64 MaxValue = float64(0x7FEFFFFFFFFFFFFF)
		.field static public literal float64 Epsilon = float64(0x1)
		.field static public literal float64 NegativeInfinity = float64(0xFFF0000000000000)
		.field static public literal float64 PositiveInfinity = float64(0x7FF0000000000000)
		.field static public literal float64 NaN = float64(0xFFF8000000000000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public serializable DuplicateWaitObjectException
		extends System.ArgumentException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string parameterName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string parameterName, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable EntryPointNotFoundException
		extends System.TypeLoadException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract serializable Enum
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			object Parse(class System.Type enumType, string 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object Parse(class System.Type enumType, string 'value', bool ignoreCase)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Type GetUnderlyingType(class System.Type enumType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Array GetValues(class System.Type enumType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			string GetName(class System.Type enumType, object 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			string[] GetNames(class System.Type enumType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, object 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			bool IsDefined(class System.Type enumType, object 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			string Format(class System.Type enumType, object 'value', string format)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
			internalcall 
		{
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 3F 54 68 65 20 70 72 6F 76 69 64 65 72 20 61 72 67 75 6D 65 6E 74 20 69 73 20 6E 6F 74 20 75 73 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 54 6F 53 74 72 69 6E 67 28 53 74 72 69 6E 67 29 2E 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object target)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 39 54 68 65 20 70 72 6F 76 69 64 65 72 20 61 72 67 75 6D 65 6E 74 20 69 73 20 6E 6F 74 20 75 73 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 54 6F 53 74 72 69 6E 67 28 29 2E 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, int16 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, int32 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, uint8 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, int64 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object ToObject(class System.Type enumType, uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public abstract sealed Environment
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			int32 get_TickCount()
		{
			ret
		}
		.method public static hidebysig 
			void Exit(int32 exitCode)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_ExitCode()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_ExitCode(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			void FailFast(string message)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig specialname 
			string get_CommandLine()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_CurrentDirectory()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_CurrentDirectory(string 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_SystemDirectory()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_MachineName()
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_ProcessorCount()
		{
			ret
		}
		.method public static hidebysig 
			string[] GetCommandLineArgs()
		{
			ret
		}
		.method public static hidebysig 
			string GetEnvironmentVariable(string variable)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IDictionary GetEnvironmentVariables()
		{
			ret
		}
		.method public static hidebysig 
			void SetEnvironmentVariable(string variable, string 'value')
		{
			ret
		}
		.method public static hidebysig 
			string[] GetLogicalDrives()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_NewLine()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Version get_Version()
		{
			ret
		}
		.method public static hidebysig specialname 
			int64 get_WorkingSet()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_StackTrace()
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_HasShutdownStarted()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_UserName()
		{
			ret
		}
		.property string CommandLine()
		{
			.get string System.Environment::get_CommandLine()
		}
		.property string CurrentDirectory()
		{
			.get string System.Environment::get_CurrentDirectory()
			.set void System.Environment::set_CurrentDirectory(string)
		}
		.property int32 ExitCode()
		{
			.get int32 System.Environment::get_ExitCode()
			.set void System.Environment::set_ExitCode(int32)
		}
		.property bool HasShutdownStarted()
		{
			.get bool System.Environment::get_HasShutdownStarted()
		}
		.property string MachineName()
		{
			.get string System.Environment::get_MachineName()
		}
		.property string NewLine()
		{
			.get string System.Environment::get_NewLine()
		}
		.property int32 ProcessorCount()
		{
			.get int32 System.Environment::get_ProcessorCount()
		}
		.property string StackTrace()
		{
			.get string System.Environment::get_StackTrace()
		}
		.property string SystemDirectory()
		{
			.get string System.Environment::get_SystemDirectory()
		}
		.property int32 TickCount()
		{
			.get int32 System.Environment::get_TickCount()
		}
		.property string UserName()
		{
			.get string System.Environment::get_UserName()
		}
		.property class System.Version Version()
		{
			.get class System.Version System.Environment::get_Version()
		}
		.property int64 WorkingSet()
		{
			.get int64 System.Environment::get_WorkingSet()
		}
	}
	.class public serializable EventArgs
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly class System.EventArgs Empty
	}
	.class public sealed serializable EventHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class System.EventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.EventArgs e, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed serializable 'EventHandler`1'<(System.EventArgs) TEventArgs>
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, !0 e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, !0 e, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public serializable Exception
		extends System.Object
		implements System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._Exception
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 29 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 45 78 63 65 70 74 69 6F 6E 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Message()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Data()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Exception GetBaseException()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Exception get_InnerException()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_TargetSite()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_StackTrace()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_HelpLink()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_HelpLink(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Source()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Source(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig specialname 
			instance int32 get_HResult()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void set_HResult(int32 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetType()
		{
			ret
		}
		.property instance class System.Collections.IDictionary Data()
		{
			.get instance class System.Collections.IDictionary System.Exception::get_Data()
		}
		.property instance int32 HResult()
		{
			.get instance int32 System.Exception::get_HResult()
			.set instance void System.Exception::set_HResult(int32)
		}
		.property instance string HelpLink()
		{
			.get instance string System.Exception::get_HelpLink()
			.set instance void System.Exception::set_HelpLink(string)
		}
		.property instance class System.Exception InnerException()
		{
			.get instance class System.Exception System.Exception::get_InnerException()
		}
		.property instance string Message()
		{
			.get instance string System.Exception::get_Message()
		}
		.property instance string Source()
		{
			.get instance string System.Exception::get_Source()
			.set instance void System.Exception::set_Source(string)
		}
		.property instance string StackTrace()
		{
			.get instance string System.Exception::get_StackTrace()
		}
		.property instance class System.Reflection.MethodBase TargetSite()
		{
			.get instance class System.Reflection.MethodBase System.Exception::get_TargetSite()
		}
	}
	.class public sealed serializable ExecutionEngineException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
	}
	.class public serializable FieldAccessException
		extends System.MemberAccessException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable FlagsAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 10 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable FormatException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract sealed GC
		extends System.Object
	{
		.method public static hidebysig 
			void AddMemoryPressure(int64 bytesAllocated)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void RemoveMemoryPressure(int64 bytesAllocated)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 GetGeneration(object obj)
			internalcall 
		{
		}
		.method public static hidebysig 
			void Collect(int32 generation)
		{
			ret
		}
		.method public static hidebysig 
			void Collect()
		{
			ret
		}
		.method public static hidebysig 
			int32 CollectionCount(int32 generation)
		{
			ret
		}
		.method public static hidebysig 
			void KeepAlive(object obj)
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 GetGeneration(class System.WeakReference wo)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_MaxGeneration()
		{
			ret
		}
		.method public static hidebysig 
			void WaitForPendingFinalizers()
			internalcall 
		{
		}
		.method public static hidebysig 
			void SuppressFinalize(object obj)
		{
			ret
		}
		.method public static hidebysig 
			void ReRegisterForFinalize(object obj)
		{
			ret
		}
		.method public static hidebysig 
			int64 GetTotalMemory(bool forceFullCollection)
		{
			ret
		}
		.property int32 MaxGeneration()
		{
			.get int32 'System.GC'::get_MaxGeneration()
		}
	}
	.class public sequential sealed serializable Guid
		extends System.ValueType
		implements System.IFormattable, System.IComparable, class 'System.IComparable`1'<valuetype System.Guid>, class 'System.IEquatable`1'<valuetype System.Guid>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8[] b)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint32 a, uint16 b, uint16 c, uint8 d, uint8 e, uint8 f, uint8 g, uint8 h, uint8 i, uint8 j, uint8 k)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string g)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 a, int16 b, int16 c, uint8[] d)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 a, int16 b, int16 c, uint8 d, uint8 e, uint8 f, uint8 g, uint8 h, uint8 i, uint8 j, uint8 k)
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] ToByteArray()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(valuetype System.Guid g)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(valuetype System.Guid 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Guid a, valuetype System.Guid b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Guid a, valuetype System.Guid b)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Guid NewGuid()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.field static public initonly valuetype System.Guid Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public interface abstract IAppDomainSetup
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 32 37 46 46 46 32 33 32 2D 41 37 41 38 2D 34 30 64 64 2D 38 44 34 41 2D 37 33 34 41 44 35 39 46 43 44 34 31 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ApplicationBase()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ApplicationBase(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ApplicationName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ApplicationName(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_CachePath()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_CachePath(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ConfigurationFile()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ConfigurationFile(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_DynamicBase()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_DynamicBase(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_LicenseFile()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_LicenseFile(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_PrivateBinPath()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_PrivateBinPath(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_PrivateBinPathProbe()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_PrivateBinPathProbe(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ShadowCopyDirectories()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ShadowCopyDirectories(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ShadowCopyFiles()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ShadowCopyFiles(string 'value')
		{
		}
		.property instance string ApplicationBase()
		{
			.get instance string System.IAppDomainSetup::get_ApplicationBase()
			.set instance void System.IAppDomainSetup::set_ApplicationBase(string)
		}
		.property instance string ApplicationName()
		{
			.get instance string System.IAppDomainSetup::get_ApplicationName()
			.set instance void System.IAppDomainSetup::set_ApplicationName(string)
		}
		.property instance string CachePath()
		{
			.get instance string System.IAppDomainSetup::get_CachePath()
			.set instance void System.IAppDomainSetup::set_CachePath(string)
		}
		.property instance string ConfigurationFile()
		{
			.get instance string System.IAppDomainSetup::get_ConfigurationFile()
			.set instance void System.IAppDomainSetup::set_ConfigurationFile(string)
		}
		.property instance string DynamicBase()
		{
			.get instance string System.IAppDomainSetup::get_DynamicBase()
			.set instance void System.IAppDomainSetup::set_DynamicBase(string)
		}
		.property instance string LicenseFile()
		{
			.get instance string System.IAppDomainSetup::get_LicenseFile()
			.set instance void System.IAppDomainSetup::set_LicenseFile(string)
		}
		.property instance string PrivateBinPath()
		{
			.get instance string System.IAppDomainSetup::get_PrivateBinPath()
			.set instance void System.IAppDomainSetup::set_PrivateBinPath(string)
		}
		.property instance string PrivateBinPathProbe()
		{
			.get instance string System.IAppDomainSetup::get_PrivateBinPathProbe()
			.set instance void System.IAppDomainSetup::set_PrivateBinPathProbe(string)
		}
		.property instance string ShadowCopyDirectories()
		{
			.get instance string System.IAppDomainSetup::get_ShadowCopyDirectories()
			.set instance void System.IAppDomainSetup::set_ShadowCopyDirectories(string)
		}
		.property instance string ShadowCopyFiles()
		{
			.get instance string System.IAppDomainSetup::get_ShadowCopyFiles()
			.set instance void System.IAppDomainSetup::set_ShadowCopyFiles(string)
		}
	}
	.class public interface abstract IAsyncResult
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsCompleted()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Threading.WaitHandle get_AsyncWaitHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_AsyncState()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CompletedSynchronously()
		{
		}
		.property instance object AsyncState()
		{
			.get instance object System.IAsyncResult::get_AsyncState()
		}
		.property instance class System.Threading.WaitHandle AsyncWaitHandle()
		{
			.get instance class System.Threading.WaitHandle System.IAsyncResult::get_AsyncWaitHandle()
		}
		.property instance bool CompletedSynchronously()
		{
			.get instance bool System.IAsyncResult::get_CompletedSynchronously()
		}
		.property instance bool IsCompleted()
		{
			.get instance bool System.IAsyncResult::get_IsCompleted()
		}
	}
	.class public interface abstract ICloneable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Clone()
		{
		}
	}
	.class public interface abstract IComparable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 CompareTo(object obj)
		{
		}
	}
	.class public interface abstract 'IComparable`1'<T>
	{
		.method public virtual hidebysig newslot abstract 
			instance int32 CompareTo(!0 other)
		{
		}
	}
	.class public interface abstract IConvertible
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.TypeCode GetTypeCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool ToBoolean(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance char ToChar(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int8 ToSByte(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8 ToByte(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int16 ToInt16(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint16 ToUInt16(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 ToInt32(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint32 ToUInt32(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int64 ToInt64(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 ToUInt64(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance float32 ToSingle(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance float64 ToDouble(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Decimal ToDecimal(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DateTime ToDateTime(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString(class System.IFormatProvider provider)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object ToType(class System.Type conversionType, class System.IFormatProvider provider)
		{
		}
	}
	.class public interface abstract ICustomFormatter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance string Format(string format, object arg, class System.IFormatProvider formatProvider)
		{
		}
	}
	.class public interface abstract IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Dispose()
		{
		}
	}
	.class public interface abstract 'IEquatable`1'<T>
	{
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(!0 other)
		{
		}
	}
	.class public interface abstract IFormatProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object GetFormat(class System.Type formatType)
		{
		}
	}
	.class public interface abstract IFormattable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance string ToString(string format, class System.IFormatProvider formatProvider)
		{
		}
	}
	.class public interface abstract IServiceProvider
	{
		.method public virtual hidebysig newslot abstract 
			instance object GetService(class System.Type serviceType)
		{
		}
	}
	.class public sealed serializable IndexOutOfRangeException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
	}
	.class public sealed serializable InsufficientMemoryException
		extends System.OutOfMemoryException
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
	}
	.class public sequential sealed serializable Int16
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<int16>, class 'System.IEquatable`1'<int16>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(int16 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(int16 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int16 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			int16 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			int16 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int16 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] int16& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int16& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal int16 MaxValue = int16(0x7FFF)
		.field static public literal int16 MinValue = int16(0xFFFF8000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable Int32
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<int32>, class 'System.IEquatable`1'<int32>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(int32 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int32 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			int32 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			int32 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] int32& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int32& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal int32 MaxValue = int32(0x7FFFFFFF)
		.field static public literal int32 MinValue = int32(0x80000000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable Int64
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<int64>, class 'System.IEquatable`1'<int64>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(int64 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int64 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			int64 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			int64 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] int64& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int64& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal int64 MaxValue = int64(0x7FFFFFFFFFFFFFFF)
		.field static public literal int64 MinValue = int64(0x8000000000000000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable IntPtr
		extends System.ValueType
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(void* 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance int32 ToInt32()
		{
			ret
		}
		.method public hidebysig 
			instance int64 ToInt64()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public static hidebysig specialname 
			native int op_Explicit(int32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			native int op_Explicit(int64 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			native int op_Explicit(void* 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			void* op_Explicit(native int 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			int32 op_Explicit(native int 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			int64 op_Explicit(native int 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(native int value1, native int value2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(native int value1, native int value2)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_Size()
		{
			ret
		}
		.method public hidebysig 
			instance void* ToPointer()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.field static public initonly native int Zero

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property int32 Size()
		{
			.get int32 System.IntPtr::get_Size()
		}
	}
	.class public serializable InvalidCastException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, int32 errorCode)
		{
			ret
		}
	}
	.class public serializable InvalidOperationException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable InvalidProgramException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
	}
	.class public sealed serializable LoaderOptimization
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.LoaderOptimization DisallowBindings = int32(0x00000004)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 71 54 68 69 73 20 6D 65 74 68 6F 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 2E 4C 6F 61 64 28 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.field static public literal valuetype System.LoaderOptimization DomainMask = int32(0x00000003)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 71 54 68 69 73 20 6D 65 74 68 6F 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 2E 4C 6F 61 64 28 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.field static public literal valuetype System.LoaderOptimization MultiDomain = int32(0x00000002)
		.field static public literal valuetype System.LoaderOptimization MultiDomainHost = int32(0x00000003)
		.field static public literal valuetype System.LoaderOptimization NotSpecified = int32(0x00000000)
		.field static public literal valuetype System.LoaderOptimization SingleDomain = int32(0x00000001)
	}
	.class public sealed LoaderOptimizationAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.LoaderOptimization 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.LoaderOptimization get_Value()
		{
			ret
		}
		.property instance valuetype System.LoaderOptimization Value()
		{
			.get instance valuetype System.LoaderOptimization System.LoaderOptimizationAttribute::get_Value()
		}
	}
	.class public sealed LocalDataStoreSlot
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
	}
	.class public sealed MTAThreadAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract serializable MarshalByRefObject
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig 
			instance class System.MarshalByRefObject MemberwiseClone(bool cloneIdentity)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetLifetimeService()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object InitializeLifetimeService()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed Math
		extends System.Object
	{
		.method public static hidebysig 
			float64 Acos(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Asin(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Atan(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Atan2(float64 y, float64 x)
			internalcall 
		{
		}
		.method public static hidebysig 
			valuetype System.Decimal Ceiling(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			float64 Ceiling(float64 a)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Cos(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Cosh(float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			valuetype System.Decimal Floor(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			float64 Floor(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Sin(float64 a)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Tan(float64 a)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Sinh(float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Tanh(float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Round(float64 a)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Round(float64 'value', int32 digits)
		{
			ret
		}
		.method public static hidebysig 
			float64 Round(float64 'value', valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			float64 Round(float64 'value', int32 digits, valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Truncate(valuetype System.Decimal d)
		{
			ret
		}
		.method public static hidebysig 
			float64 Truncate(float64 d)
		{
			ret
		}
		.method public static hidebysig 
			float64 Sqrt(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Log(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Log10(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Exp(float64 d)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Pow(float64 x, float64 y)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 IEEERemainder(float64 x, float64 y)
		{
			ret
		}
		.method public static hidebysig 
			int8 Abs(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int16 Abs(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Abs(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 Abs(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			float32 Abs(float32 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Abs(float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			valuetype System.Decimal Abs(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int8 Max(int8 val1, int8 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 Max(uint8 val1, uint8 val2)
		{
			ret
		}
		.method public static hidebysig 
			int16 Max(int16 val1, int16 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint16 Max(uint16 val1, uint16 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 Max(int32 val1, int32 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint32 Max(uint32 val1, uint32 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 Max(int64 val1, int64 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint64 Max(uint64 val1, uint64 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 Max(float32 val1, float32 val2)
		{
			ret
		}
		.method public static hidebysig 
			float64 Max(float64 val1, float64 val2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2)
		{
			ret
		}
		.method public static hidebysig 
			int8 Min(int8 val1, int8 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint8 Min(uint8 val1, uint8 val2)
		{
			ret
		}
		.method public static hidebysig 
			int16 Min(int16 val1, int16 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint16 Min(uint16 val1, uint16 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 Min(int32 val1, int32 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint32 Min(uint32 val1, uint32 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int64 Min(int64 val1, int64 val2)
		{
			ret
		}
		.method public static hidebysig 
			uint64 Min(uint64 val1, uint64 val2)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 Min(float32 val1, float32 val2)
		{
			ret
		}
		.method public static hidebysig 
			float64 Min(float64 val1, float64 val2)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2)
		{
			ret
		}
		.method public static hidebysig 
			float64 Log(float64 a, float64 newBase)
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 Sign(int16 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(float32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 Sign(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 BigMul(int32 a, int32 b)
		{
			ret
		}
		.method public static hidebysig 
			int32 DivRem(int32 a, int32 b, [out] int32& result)
		{
			ret
		}
		.method public static hidebysig 
			int64 DivRem(int64 a, int64 b, [out] int64& result)
		{
			ret
		}
		.field static public literal float64 E = float64(0x4005BF0A8B145769)
		.field static public literal float64 PI = float64(0x400921FB54442D18)
	}
	.class public serializable MemberAccessException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable MethodAccessException
		extends System.MemberAccessException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed MidpointRounding
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.MidpointRounding AwayFromZero = int32(0x00000001)
		.field static public literal valuetype System.MidpointRounding ToEven = int32(0x00000000)
	}
	.class public serializable MissingFieldException
		extends System.MissingMemberException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string className, string fieldName)
		{
			ret
		}
		.property instance string Message()
		{
			.get instance string System.MissingFieldException::get_Message()
		}
	}
	.class public serializable MissingMemberException
		extends System.MemberAccessException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string className, string memberName)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.field family string ClassName
		.field family string MemberName
		.field family uint8[] Signature
		.property instance string Message()
		{
			.get instance string System.MissingMemberException::get_Message()
		}
	}
	.class public serializable MissingMethodException
		extends System.MissingMemberException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string className, string methodName)
		{
			ret
		}
		.property instance string Message()
		{
			.get instance string System.MissingMethodException::get_Message()
		}
	}
	.class public sequential sealed ModuleHandle
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.ModuleHandle handle)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.ModuleHandle left, valuetype System.ModuleHandle right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.ModuleHandle left, valuetype System.ModuleHandle right)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken(int32 typeToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeTypeHandle ResolveTypeHandle(int32 typeToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeTypeHandle ResolveTypeHandle(int32 typeToken, valuetype System.RuntimeTypeHandle[] typeInstantiationContext, valuetype System.RuntimeTypeHandle[] methodInstantiationContext)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken(int32 methodToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeMethodHandle ResolveMethodHandle(int32 methodToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeMethodHandle ResolveMethodHandle(int32 methodToken, valuetype System.RuntimeTypeHandle[] typeInstantiationContext, valuetype System.RuntimeTypeHandle[] methodInstantiationContext)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken(int32 fieldToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeFieldHandle ResolveFieldHandle(int32 fieldToken)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.RuntimeFieldHandle ResolveFieldHandle(int32 fieldToken, valuetype System.RuntimeTypeHandle[] typeInstantiationContext, valuetype System.RuntimeTypeHandle[] methodInstantiationContext)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MDStreamVersion()
		{
			ret
		}
		.field static public initonly valuetype System.ModuleHandle EmptyHandle

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 MDStreamVersion()
		{
			.get instance int32 System.ModuleHandle::get_MDStreamVersion()
		}
	}
	.class public abstract serializable MulticastDelegate
		extends System.Delegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(object target, string 'method')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Type target, string 'method')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public final virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method family final virtual hidebysig 
			instance class System.Delegate CombineImpl(class System.Delegate follow)
		{
			ret
		}
		.method family final virtual hidebysig 
			instance class System.Delegate RemoveImpl(class System.Delegate 'value')
		{
			ret
		}
		.method public final virtual hidebysig 
			instance class System.Delegate[] GetInvocationList()
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(class System.MulticastDelegate d1, class System.MulticastDelegate d2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(class System.MulticastDelegate d1, class System.MulticastDelegate d2)
		{
			ret
		}
		.method public final virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.MethodInfo GetMethodImpl()
		{
			ret
		}
	}
	.class public sealed serializable MulticastNotSupportedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
	}
	.class public sealed NonSerializedAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable NotFiniteNumberException
		extends System.ArithmeticException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(float64 offendingNumber)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, float64 offendingNumber)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, float64 offendingNumber, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_OffendingNumber()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance float64 OffendingNumber()
		{
			.get instance float64 System.NotFiniteNumberException::get_OffendingNumber()
		}
	}
	.class public serializable NotImplementedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable NotSupportedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable NullReferenceException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract sealed Nullable
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			int32 Compare<valuetype .ctor (System.ValueType) T>(valuetype 'System.Nullable`1'<!!0> n1, valuetype 'System.Nullable`1'<!!0> n2)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			bool Equals<valuetype .ctor (System.ValueType) T>(valuetype 'System.Nullable`1'<!!0> n1, valuetype 'System.Nullable`1'<!!0> n2)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Type GetUnderlyingType(class System.Type nullableType)
		{
			ret
		}
	}
	.class public sequential sealed serializable 'Nullable`1'<valuetype .ctor (System.ValueType) T>
		extends System.ValueType
	{
		.method public hidebysig specialname 
			instance void .ctor(!0 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_HasValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance !0 get_Value()
		{
			ret
		}
		.method public hidebysig 
			instance !0 GetValueOrDefault()
		{
			ret
		}
		.method public hidebysig 
			instance !0 GetValueOrDefault(!0 defaultValue)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype 'System.Nullable`1'<!0> op_Implicit(!0 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			!0 op_Explicit(valuetype 'System.Nullable`1'<!0> 'value')
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance bool HasValue()
		{
			.get instance bool 'System.Nullable`1'::get_HasValue()
		}
		.property instance !0 Value()
		{
			.get instance !0 'System.Nullable`1'::get_Value()
		}
	}
	.class public serializable Object
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 02 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(object objA, object objB)
		{
			ret
		}
		.method public static hidebysig 
			bool ReferenceEquals(object objA, object objB)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Type GetType()
			internalcall 
		{
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method family hidebysig 
			instance object MemberwiseClone()
			internalcall 
		{
		}
	}
	.class public serializable ObjectDisposedException
		extends System.InvalidOperationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string objectName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string objectName, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ObjectName()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string Message()
		{
			.get instance string System.ObjectDisposedException::get_Message()
		}
		.property instance string ObjectName()
		{
			.get instance string System.ObjectDisposedException::get_ObjectName()
		}
	}
	.class public sealed serializable ObsoleteAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FC 17 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, bool 'error')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsError()
		{
			ret
		}
		.property instance bool IsError()
		{
			.get instance bool System.ObsoleteAttribute::get_IsError()
		}
		.property instance string Message()
		{
			.get instance string System.ObsoleteAttribute::get_Message()
		}
	}
	.class public sealed serializable OperatingSystem
		extends System.Object
		implements System.ICloneable, System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.PlatformID 'platform', class System.Version version)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.PlatformID get_Platform()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ServicePack()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_VersionString()
		{
			ret
		}
		.property instance valuetype System.PlatformID Platform()
		{
			.get instance valuetype System.PlatformID System.OperatingSystem::get_Platform()
		}
		.property instance string ServicePack()
		{
			.get instance string System.OperatingSystem::get_ServicePack()
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.OperatingSystem::get_Version()
		}
		.property instance string VersionString()
		{
			.get instance string System.OperatingSystem::get_VersionString()
		}
	}
	.class public serializable OperationCanceledException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable OutOfMemoryException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable OverflowException
		extends System.ArithmeticException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed ParamArrayAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 08 00 00 02 00 54 02 09 49 6E 68 65 72 69 74 65 64 01 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable PlatformID
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.PlatformID Unix = int32(0x00000004)
		.field static public literal valuetype System.PlatformID Win32NT = int32(0x00000002)
		.field static public literal valuetype System.PlatformID Win32S = int32(0x00000000)
		.field static public literal valuetype System.PlatformID Win32Windows = int32(0x00000001)
		.field static public literal valuetype System.PlatformID WinCE = int32(0x00000003)
	}
	.class public serializable PlatformNotSupportedException
		extends System.NotSupportedException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed 'Predicate`1'<T>
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool Invoke(!0 obj)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(!0 obj, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public serializable Random
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 Seed)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance float64 Sample()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Next()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Next(int32 minValue, int32 maxValue)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Next(int32 maxValue)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance float64 NextDouble()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void NextBytes(uint8[] buffer)
		{
			ret
		}
	}
	.class public serializable RankException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public ResolveEventArgs
		extends System.EventArgs
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.ResolveEventArgs::get_Name()
		}
	}
	.class public sealed serializable ResolveEventHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Assembly Invoke(object sender, class System.ResolveEventArgs args)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.ResolveEventArgs args, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Assembly EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sequential sealed RuntimeArgumentHandle
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable RuntimeFieldHandle
		extends System.ValueType
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance native int get_Value()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.RuntimeFieldHandle handle)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.RuntimeFieldHandle left, valuetype System.RuntimeFieldHandle right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.RuntimeFieldHandle left, valuetype System.RuntimeFieldHandle right)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance native int Value()
		{
			.get instance native int System.RuntimeFieldHandle::get_Value()
		}
	}
	.class public sequential sealed serializable RuntimeMethodHandle
		extends System.ValueType
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance native int get_Value()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.RuntimeMethodHandle left, valuetype System.RuntimeMethodHandle right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.RuntimeMethodHandle left, valuetype System.RuntimeMethodHandle right)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.RuntimeMethodHandle handle)
		{
			ret
		}
		.method public hidebysig 
			instance native int GetFunctionPointer()
			internalcall 
		{
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance native int Value()
		{
			.get instance native int System.RuntimeMethodHandle::get_Value()
		}
	}
	.class public sequential sealed serializable RuntimeTypeHandle
		extends System.ValueType
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.RuntimeTypeHandle left, object right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(object left, valuetype System.RuntimeTypeHandle right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.RuntimeTypeHandle left, object right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(object left, valuetype System.RuntimeTypeHandle right)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.RuntimeTypeHandle handle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance native int get_Value()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.ModuleHandle GetModuleHandle()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance native int Value()
		{
			.get instance native int System.RuntimeTypeHandle::get_Value()
		}
	}
	.class public sequential sealed serializable SByte
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<int8>, class 'System.IEquatable`1'<int8>
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(int8 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(int8 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			int8 Parse(string s)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 Parse(string s, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int8 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] int8& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] int8& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal int8 MaxValue = int8(0x7F)
		.field static public literal int8 MinValue = int8(0xFFFFFF80)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed STAThreadAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed SerializableAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 1C 10 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sequential sealed serializable Single
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<float32>, class 'System.IEquatable`1'<float32>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool IsInfinity(float32 f)
		{
			ret
		}
		.method public static hidebysig 
			bool IsPositiveInfinity(float32 f)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNegativeInfinity(float32 f)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNaN(float32 f)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(float32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(float32 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float32 Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			float32 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			ret
		}
		.method public static hidebysig 
			float32 Parse(string s, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] float32& result)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32& result)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal float32 MinValue = float32(0xFF7FFFFF)
		.field static public literal float32 Epsilon = float32(0x00000001)
		.field static public literal float32 MaxValue = float32(0x7F7FFFFF)
		.field static public literal float32 PositiveInfinity = float32(0x7F800000)
		.field static public literal float32 NegativeInfinity = float32(0xFF800000)
		.field static public literal float32 NaN = float32(0xFFC00000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed serializable StackOverflowException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
	}
	.class public sealed serializable String
		extends System.Object
		implements System.IComparable, System.ICloneable, System.IConvertible, class 'System.IComparable`1'<string>, class 'System.Collections.Generic.IEnumerable`1'<char>, System.Collections.IEnumerable, class 'System.IEquatable`1'<string>
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 05 43 68 61 72 73 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			string Join(string separator, string[] 'value')
		{
			ret
		}
		.method public static hidebysig 
			string Join(string separator, string[] 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(string 'value', valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(string a, string b)
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(string a, string b, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(string a, string b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(string a, string b)
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_Chars(int32 index)
			internalcall 
		{
		}
		.method public hidebysig 
			instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance char[] ToCharArray()
		{
			ret
		}
		.method public hidebysig 
			instance char[] ToCharArray(int32 startIndex, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			bool IsNullOrEmpty(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Length()
			internalcall 
		{
		}
		.method public hidebysig 
			instance string[] Split(char[] separator)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string[] Split(char[] separator, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance string[] Split(char[] separator, valuetype System.StringSplitOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string[] Split(string[] separator, valuetype System.StringSplitOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string Substring(int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance string Substring(int32 startIndex, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance string Trim(char[] trimChars)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string TrimStart(char[] trimChars)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string TrimEnd(char[] trimChars)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(char* 'value')
			internalcall 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig specialname 
			instance void .ctor(char* 'value', int32 startIndex, int32 length)
			internalcall 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig specialname 
			instance void .ctor(int8* 'value')
			internalcall 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig specialname 
			instance void .ctor(int8* 'value', int32 startIndex, int32 length)
			internalcall 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig specialname 
			instance void .ctor(int8* 'value', int32 startIndex, int32 length, class System.Text.Encoding enc)
			internalcall 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig 
			instance bool IsNormalized()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm)
		{
			ret
		}
		.method public hidebysig 
			instance string Normalize()
		{
			ret
		}
		.method public hidebysig 
			instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(char[] 'value', int32 startIndex, int32 length)
			internalcall 
		{
		}
		.method public hidebysig specialname 
			instance void .ctor(char[] 'value')
			internalcall 
		{
		}
		.method public hidebysig specialname 
			instance void .ctor(char c, int32 count)
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 Compare(string strA, string strB)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, string strB, bool ignoreCase)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(string strB)
		{
			ret
		}
		.method public static hidebysig 
			int32 CompareOrdinal(string strA, string strB)
		{
			ret
		}
		.method public static hidebysig 
			int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance bool Contains(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool EndsWith(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool EndsWith(string 'value', valuetype System.StringComparison comparisonType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance bool EndsWith(string 'value', bool ignoreCase, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(char 'value', int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(char 'value', int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 IndexOfAny(char[] anyOf)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOfAny(char[] anyOf, int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value', int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value', valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value', int32 startIndex, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(string 'value', int32 startIndex, int32 count, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(char 'value', int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(char 'value', int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 LastIndexOfAny(char[] anyOf)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value', int32 startIndex)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value', valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value', int32 startIndex, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(string 'value', int32 startIndex, int32 count, valuetype System.StringComparison comparisonType)
		{
			ret
		}
		.method public hidebysig 
			instance string PadLeft(int32 totalWidth)
		{
			ret
		}
		.method public hidebysig 
			instance string PadLeft(int32 totalWidth, char paddingChar)
		{
			ret
		}
		.method public hidebysig 
			instance string PadRight(int32 totalWidth)
		{
			ret
		}
		.method public hidebysig 
			instance string PadRight(int32 totalWidth, char paddingChar)
		{
			ret
		}
		.method public hidebysig 
			instance bool StartsWith(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool StartsWith(string 'value', valuetype System.StringComparison comparisonType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance bool StartsWith(string 'value', bool ignoreCase, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public hidebysig 
			instance string ToLower()
		{
			ret
		}
		.method public hidebysig 
			instance string ToLower(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public hidebysig 
			instance string ToLowerInvariant()
		{
			ret
		}
		.method public hidebysig 
			instance string ToUpper()
		{
			ret
		}
		.method public hidebysig 
			instance string ToUpper(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public hidebysig 
			instance string ToUpperInvariant()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public hidebysig 
			instance string Trim()
		{
			ret
		}
		.method public hidebysig 
			instance string Insert(int32 startIndex, string 'value')
			internalcall 
		{
		}
		.method public hidebysig 
			instance string Replace(char oldChar, char newChar)
			internalcall 
		{
		}
		.method public hidebysig 
			instance string Replace(string oldValue, string newValue)
			internalcall 
		{
		}
		.method public hidebysig 
			instance string Remove(int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance string Remove(int32 startIndex)
		{
			ret
		}
		.method public static hidebysig 
			string Format(string format, object arg0)
		{
			ret
		}
		.method public static hidebysig 
			string Format(string format, object arg0, object arg1)
		{
			ret
		}
		.method public static hidebysig 
			string Format(string format, object arg0, object arg1, object arg2)
		{
			ret
		}
		.method public static hidebysig 
			string Format(string format, object[] args)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			string Format(class System.IFormatProvider provider, string format, object[] args)
		{
			.param [3]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			string Copy(string str)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(object arg0)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(object arg0, object arg1)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(object arg0, object arg1, object arg2)
		{
			ret
		}
		.method public static hidebysig 
			vararg string Concat(object arg0, object arg1, object arg2, object arg3)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			string Concat(object[] args)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			string Concat(string str0, string str1)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(string str0, string str1, string str2)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(string str0, string str1, string str2, string str3)
		{
			ret
		}
		.method public static hidebysig 
			string Concat(string[] values)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			string Intern(string str)
		{
			ret
		}
		.method public static hidebysig 
			string IsInterned(string str)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.method public hidebysig 
			instance class System.CharEnumerator GetEnumerator()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class 'System.Collections.Generic.IEnumerator`1'<char> 'System.Collections.Generic.IEnumerable<System.Char>.GetEnumerator'()
		{
			.override method instance class 'System.Collections.Generic.IEnumerator`1'<!0> class 'System.Collections.Generic.IEnumerable`1'<char>::GetEnumerator()
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.field static public initonly string Empty
		.property instance char Chars(int32)
		{
			.get instance char System.String::get_Chars(int32)
		}
		.property instance int32 Length()
		{
			.get instance int32 System.String::get_Length()
		}
	}
	.class public abstract serializable StringComparer
		extends System.Object
		implements System.Collections.IComparer, System.Collections.IEqualityComparer, class 'System.Collections.Generic.IComparer`1'<string>, class 'System.Collections.Generic.IEqualityComparer`1'<string>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			class System.StringComparer get_InvariantCulture()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.StringComparer get_InvariantCultureIgnoreCase()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.StringComparer get_CurrentCulture()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.StringComparer get_CurrentCultureIgnoreCase()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.StringComparer get_Ordinal()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.StringComparer get_OrdinalIgnoreCase()
		{
			ret
		}
		.method public static hidebysig 
			class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 Compare(object x, object y)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(object x, object y)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 GetHashCode(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 Compare(string x, string y)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(string x, string y)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode(string obj)
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class System.StringComparer CurrentCulture()
		{
			.get class System.StringComparer System.StringComparer::get_CurrentCulture()
		}
		.property class System.StringComparer CurrentCultureIgnoreCase()
		{
			.get class System.StringComparer System.StringComparer::get_CurrentCultureIgnoreCase()
		}
		.property class System.StringComparer InvariantCulture()
		{
			.get class System.StringComparer System.StringComparer::get_InvariantCulture()
		}
		.property class System.StringComparer InvariantCultureIgnoreCase()
		{
			.get class System.StringComparer System.StringComparer::get_InvariantCultureIgnoreCase()
		}
		.property class System.StringComparer Ordinal()
		{
			.get class System.StringComparer System.StringComparer::get_Ordinal()
		}
		.property class System.StringComparer OrdinalIgnoreCase()
		{
			.get class System.StringComparer System.StringComparer::get_OrdinalIgnoreCase()
		}
	}
	.class public sealed serializable StringComparison
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.StringComparison CurrentCulture = int32(0x00000000)
		.field static public literal valuetype System.StringComparison CurrentCultureIgnoreCase = int32(0x00000001)
		.field static public literal valuetype System.StringComparison InvariantCulture = int32(0x00000002)
		.field static public literal valuetype System.StringComparison InvariantCultureIgnoreCase = int32(0x00000003)
		.field static public literal valuetype System.StringComparison Ordinal = int32(0x00000004)
		.field static public literal valuetype System.StringComparison OrdinalIgnoreCase = int32(0x00000005)
	}
	.class public sealed StringSplitOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.StringSplitOptions None = int32(0x00000000)
		.field static public literal valuetype System.StringSplitOptions RemoveEmptyEntries = int32(0x00000001)
	}
	.class public serializable SystemException
		extends System.Exception
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable ThreadStaticAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sequential sealed serializable TimeSpan
		extends System.ValueType
		implements System.IComparable, class 'System.IComparable`1'<valuetype System.TimeSpan>, class 'System.IEquatable`1'<valuetype System.TimeSpan>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int64 ticks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 hours, int32 minutes, int32 seconds)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_Ticks()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Days()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Hours()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Milliseconds()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Minutes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Seconds()
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_TotalDays()
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_TotalHours()
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_TotalMilliseconds()
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_TotalMinutes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_TotalSeconds()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts)
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromDays(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.TimeSpan Duration()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(valuetype System.TimeSpan obj)
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromHours(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromMilliseconds(float64 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromMinutes(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.TimeSpan Negate()
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan Parse(string s)
		{
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] valuetype System.TimeSpan& result)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromSeconds(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan FromTicks(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t)
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2)
		{
			ret
		}
		.field static public literal int64 TicksPerMillisecond = int64(0x2710)
		.field static public literal int64 TicksPerSecond = int64(0x989680)
		.field static public literal int64 TicksPerMinute = int64(0x23C34600)
		.field static public literal int64 TicksPerHour = int64(0x861C46800)
		.field static public literal int64 TicksPerDay = int64(0xC92A69C000)
		.field static public initonly valuetype System.TimeSpan Zero
		.field static public initonly valuetype System.TimeSpan MaxValue
		.field static public initonly valuetype System.TimeSpan MinValue

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Days()
		{
			.get instance int32 System.TimeSpan::get_Days()
		}
		.property instance int32 Hours()
		{
			.get instance int32 System.TimeSpan::get_Hours()
		}
		.property instance int32 Milliseconds()
		{
			.get instance int32 System.TimeSpan::get_Milliseconds()
		}
		.property instance int32 Minutes()
		{
			.get instance int32 System.TimeSpan::get_Minutes()
		}
		.property instance int32 Seconds()
		{
			.get instance int32 System.TimeSpan::get_Seconds()
		}
		.property instance int64 Ticks()
		{
			.get instance int64 System.TimeSpan::get_Ticks()
		}
		.property instance float64 TotalDays()
		{
			.get instance float64 System.TimeSpan::get_TotalDays()
		}
		.property instance float64 TotalHours()
		{
			.get instance float64 System.TimeSpan::get_TotalHours()
		}
		.property instance float64 TotalMilliseconds()
		{
			.get instance float64 System.TimeSpan::get_TotalMilliseconds()
		}
		.property instance float64 TotalMinutes()
		{
			.get instance float64 System.TimeSpan::get_TotalMinutes()
		}
		.property instance float64 TotalSeconds()
		{
			.get instance float64 System.TimeSpan::get_TotalSeconds()
		}
	}
	.class public abstract serializable TimeZone
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.TimeZone get_CurrentTimeZone()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_StandardName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_DaylightName()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year)
		{
		}
		.method public virtual hidebysig newslot 
			instance bool IsDaylightSavingTime(valuetype System.DateTime time)
		{
			ret
		}
		.method public static hidebysig 
			bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes)
		{
			ret
		}
		.property class System.TimeZone CurrentTimeZone()
		{
			.get class System.TimeZone System.TimeZone::get_CurrentTimeZone()
		}
		.property instance string DaylightName()
		{
			.get instance string System.TimeZone::get_DaylightName()
		}
		.property instance string StandardName()
		{
			.get instance string System.TimeZone::get_StandardName()
		}
	}
	.class public serializable TimeoutException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract serializable Type
		extends System.Reflection.MemberInfo
		implements System.Runtime.InteropServices._Type, System.Reflection.IReflect
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 24 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 54 79 70 65 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_DeclaringMethod()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetType()
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase)
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetType(string typeName, bool throwOnError)
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetType(string typeName)
		{
			ret
		}
		.method public static hidebysig 
			class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type MakePointerType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.InteropServices.StructLayoutAttribute get_StructLayoutAttribute()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type MakeByRefType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type MakeArrayType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type MakeArrayType(int32 rank)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TypeCode GetTypeCode(class System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_GUID()
		{
		}
		.method public static hidebysig specialname 
			class System.Reflection.Binder get_DefaultBinder()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
		}
		.method public final virtual hidebysig newslot 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.Module get_Module()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
			internalcall 
		{
		}
		.method public static hidebysig 
			valuetype System.RuntimeTypeHandle GetTypeHandle(object o)
			internalcall 
		{
		}
		.method public static hidebysig 
			class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle)
			internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_FullName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Namespace()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_AssemblyQualifiedName()
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetArrayRank()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_BaseType()
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.ConstructorInfo[] GetConstructors()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Reflection.ConstructorInfo get_TypeInitializer()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethod(string name)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo[] GetMethods()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.FieldInfo GetField(string name)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.FieldInfo[] GetFields()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetInterface(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetInterfaces()
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter 'filter', object filterCriteria)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.EventInfo GetEvent(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo GetProperty(string name)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.PropertyInfo[] GetProperties()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type[] GetNestedTypes()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetNestedType(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] GetMember(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] GetMembers()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] GetDefaultMembers()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter 'filter', object filterCriteria)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsNested()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance valuetype System.Reflection.TypeAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsVisible()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNotPublic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPublic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedPublic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedPrivate()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedFamily()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedFamANDAssem()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNestedFamORAssem()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAutoLayout()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsLayoutSequential()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsExplicitLayout()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsClass()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsInterface()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsValueType()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAbstract()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSealed()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsEnum()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSpecialName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsImport()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSerializable()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAnsiClass()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsUnicodeClass()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAutoClass()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsArray()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsGenericType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsGenericTypeDefinition()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsGenericParameter()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_GenericParameterPosition()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_ContainsGenericParameters()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetGenericParameterConstraints()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsByRef()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPointer()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPrimitive()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsCOMObject()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_HasElementType()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsContextful()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsMarshalByRef()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool IsValueTypeImpl()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool IsArrayImpl()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool IsByRefImpl()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool IsPointerImpl()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool IsPrimitiveImpl()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool IsCOMObjectImpl()
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Type MakeGenericType(class System.Type[] typeArguments)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool IsContextfulImpl()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool IsMarshalByRefImpl()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetElementType()
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetGenericArguments()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetGenericTypeDefinition()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool HasElementTypeImpl()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
		}
		.method public virtual hidebysig newslot 
			instance bool IsSubclassOf(class System.Type c)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsInstanceOfType(object o)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsAssignableFrom(class System.Type c)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Type[] GetTypeArray(object[] args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(class System.Type o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._Type::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Type.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._Type::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._Type::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Type.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._Type::Invoke
			ret
		}
		.field static public initonly char Delimiter
		.field static public initonly class System.Type[] EmptyTypes
		.field static public initonly class System.Reflection.MemberFilter FilterAttribute
		.field static public initonly class System.Reflection.MemberFilter FilterName
		.field static public initonly class System.Reflection.MemberFilter FilterNameIgnoreCase
		.field static public initonly object Missing
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Type::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Type::get_AssemblyQualifiedName()
		}
		.property instance valuetype System.Reflection.TypeAttributes Attributes()
		{
			.get instance valuetype System.Reflection.TypeAttributes System.Type::get_Attributes()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Type::get_BaseType()
		}
		.property instance bool ContainsGenericParameters()
		{
			.get instance bool System.Type::get_ContainsGenericParameters()
		}
		.property instance class System.Reflection.MethodBase DeclaringMethod()
		{
			.get instance class System.Reflection.MethodBase System.Type::get_DeclaringMethod()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Type::get_DeclaringType()
		}
		.property class System.Reflection.Binder DefaultBinder()
		{
			.get class System.Reflection.Binder System.Type::get_DefaultBinder()
		}
		.property instance string FullName()
		{
			.get instance string System.Type::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Type::get_GUID()
		}
		.property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes()
		{
			.get instance valuetype System.Reflection.GenericParameterAttributes System.Type::get_GenericParameterAttributes()
		}
		.property instance int32 GenericParameterPosition()
		{
			.get instance int32 System.Type::get_GenericParameterPosition()
		}
		.property instance bool HasElementType()
		{
			.get instance bool System.Type::get_HasElementType()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Type::get_IsAbstract()
		}
		.property instance bool IsAnsiClass()
		{
			.get instance bool System.Type::get_IsAnsiClass()
		}
		.property instance bool IsArray()
		{
			.get instance bool System.Type::get_IsArray()
		}
		.property instance bool IsAutoClass()
		{
			.get instance bool System.Type::get_IsAutoClass()
		}
		.property instance bool IsAutoLayout()
		{
			.get instance bool System.Type::get_IsAutoLayout()
		}
		.property instance bool IsByRef()
		{
			.get instance bool System.Type::get_IsByRef()
		}
		.property instance bool IsCOMObject()
		{
			.get instance bool System.Type::get_IsCOMObject()
		}
		.property instance bool IsClass()
		{
			.get instance bool System.Type::get_IsClass()
		}
		.property instance bool IsContextful()
		{
			.get instance bool System.Type::get_IsContextful()
		}
		.property instance bool IsEnum()
		{
			.get instance bool System.Type::get_IsEnum()
		}
		.property instance bool IsExplicitLayout()
		{
			.get instance bool System.Type::get_IsExplicitLayout()
		}
		.property instance bool IsGenericParameter()
		{
			.get instance bool System.Type::get_IsGenericParameter()
		}
		.property instance bool IsGenericType()
		{
			.get instance bool System.Type::get_IsGenericType()
		}
		.property instance bool IsGenericTypeDefinition()
		{
			.get instance bool System.Type::get_IsGenericTypeDefinition()
		}
		.property instance bool IsImport()
		{
			.get instance bool System.Type::get_IsImport()
		}
		.property instance bool IsInterface()
		{
			.get instance bool System.Type::get_IsInterface()
		}
		.property instance bool IsLayoutSequential()
		{
			.get instance bool System.Type::get_IsLayoutSequential()
		}
		.property instance bool IsMarshalByRef()
		{
			.get instance bool System.Type::get_IsMarshalByRef()
		}
		.property instance bool IsNested()
		{
			.get instance bool System.Type::get_IsNested()
		}
		.property instance bool IsNestedAssembly()
		{
			.get instance bool System.Type::get_IsNestedAssembly()
		}
		.property instance bool IsNestedFamANDAssem()
		{
			.get instance bool System.Type::get_IsNestedFamANDAssem()
		}
		.property instance bool IsNestedFamORAssem()
		{
			.get instance bool System.Type::get_IsNestedFamORAssem()
		}
		.property instance bool IsNestedFamily()
		{
			.get instance bool System.Type::get_IsNestedFamily()
		}
		.property instance bool IsNestedPrivate()
		{
			.get instance bool System.Type::get_IsNestedPrivate()
		}
		.property instance bool IsNestedPublic()
		{
			.get instance bool System.Type::get_IsNestedPublic()
		}
		.property instance bool IsNotPublic()
		{
			.get instance bool System.Type::get_IsNotPublic()
		}
		.property instance bool IsPointer()
		{
			.get instance bool System.Type::get_IsPointer()
		}
		.property instance bool IsPrimitive()
		{
			.get instance bool System.Type::get_IsPrimitive()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Type::get_IsPublic()
		}
		.property instance bool IsSealed()
		{
			.get instance bool System.Type::get_IsSealed()
		}
		.property instance bool IsSerializable()
		{
			.get instance bool System.Type::get_IsSerializable()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Type::get_IsSpecialName()
		}
		.property instance bool IsUnicodeClass()
		{
			.get instance bool System.Type::get_IsUnicodeClass()
		}
		.property instance bool IsValueType()
		{
			.get instance bool System.Type::get_IsValueType()
		}
		.property instance bool IsVisible()
		{
			.get instance bool System.Type::get_IsVisible()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Type::get_MemberType()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Type::get_Module()
		}
		.property instance string Namespace()
		{
			.get instance string System.Type::get_Namespace()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Type::get_ReflectedType()
		}
		.property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute()
		{
			.get instance class System.Runtime.InteropServices.StructLayoutAttribute System.Type::get_StructLayoutAttribute()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Type::get_TypeHandle()
		}
		.property instance class System.Reflection.ConstructorInfo TypeInitializer()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance class System.Reflection.ConstructorInfo System.Type::get_TypeInitializer()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Type::get_UnderlyingSystemType()
		}
	}
	.class public sealed serializable TypeCode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.TypeCode Boolean = int32(0x00000003)
		.field static public literal valuetype System.TypeCode Byte = int32(0x00000006)
		.field static public literal valuetype System.TypeCode Char = int32(0x00000004)
		.field static public literal valuetype System.TypeCode DBNull = int32(0x00000002)
		.field static public literal valuetype System.TypeCode DateTime = int32(0x00000010)
		.field static public literal valuetype System.TypeCode Decimal = int32(0x0000000F)
		.field static public literal valuetype System.TypeCode Double = int32(0x0000000E)
		.field static public literal valuetype System.TypeCode Empty = int32(0x00000000)
		.field static public literal valuetype System.TypeCode Int16 = int32(0x00000007)
		.field static public literal valuetype System.TypeCode Int32 = int32(0x00000009)
		.field static public literal valuetype System.TypeCode Int64 = int32(0x0000000B)
		.field static public literal valuetype System.TypeCode Object = int32(0x00000001)
		.field static public literal valuetype System.TypeCode SByte = int32(0x00000005)
		.field static public literal valuetype System.TypeCode Single = int32(0x0000000D)
		.field static public literal valuetype System.TypeCode String = int32(0x00000012)
		.field static public literal valuetype System.TypeCode UInt16 = int32(0x00000008)
		.field static public literal valuetype System.TypeCode UInt32 = int32(0x0000000A)
		.field static public literal valuetype System.TypeCode UInt64 = int32(0x0000000C)
	}
	.class public sealed serializable TypeInitializationException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string fullTypeName, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string TypeName()
		{
			.get instance string System.TypeInitializationException::get_TypeName()
		}
	}
	.class public serializable TypeLoadException
		extends System.SystemException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string Message()
		{
			.get instance string System.TypeLoadException::get_Message()
		}
		.property instance string TypeName()
		{
			.get instance string System.TypeLoadException::get_TypeName()
		}
	}
	.class public serializable TypeUnloadedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sequential sealed TypedReference
		extends System.ValueType
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			typedref MakeTypedReference(object target, class System.Reflection.FieldInfo[] flds)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public static hidebysig 
			object ToObject(typedref 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetTargetType(typedref 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.RuntimeTypeHandle TargetTypeToken(typedref 'value')
		{
			ret
		}
		.method public static hidebysig 
			void SetTypedReference(typedref target, object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable UInt16
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<uint16>, class 'System.IEquatable`1'<uint16>
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(uint16 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(uint16 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint16 Parse(string s)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 Parse(string s, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] uint16& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] uint16& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal uint16 MaxValue = uint16(0xFFFF)
		.field static public literal uint16 MinValue = uint16(0x0000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable UInt32
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<uint32>, class 'System.IEquatable`1'<uint32>
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(uint32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(uint32 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint32 Parse(string s)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 Parse(string s, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] uint32& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] uint32& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal uint32 MaxValue = uint32(0xFFFFFFFF)
		.field static public literal uint32 MinValue = uint32(0x00000000)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable UInt64
		extends System.ValueType
		implements System.IComparable, System.IFormattable, System.IConvertible, class 'System.IComparable`1'<uint64>, class 'System.IEquatable`1'<uint64>
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(uint64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(uint64 obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(class System.IFormatProvider provider)
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(string format)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(string format, class System.IFormatProvider provider)
		{
			ret
		}
		.method public static hidebysig 
			uint64 Parse(string s)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 Parse(string s, valuetype System.Globalization.NumberStyles style)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 Parse(string s, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, [out] uint64& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] uint64& result)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TypeCode GetTypeCode()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToBoolean
			ret
		}
		.method private final virtual hidebysig newslot 
			instance char System.IConvertible.ToChar(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToChar
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint8 System.IConvertible.ToByte(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToByte
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint16 System.IConvertible.ToUInt16(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt16
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint32 System.IConvertible.ToUInt32(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt32
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance uint64 System.IConvertible.ToUInt64(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToUInt64
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToSingle
			ret
		}
		.method private final virtual hidebysig newslot 
			instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDouble
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDecimal
			ret
		}
		.method private final virtual hidebysig newslot 
			instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToDateTime
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.IConvertible.ToType(class System.Type 'type', class System.IFormatProvider provider)
		{
			.override System.IConvertible::ToType
			ret
		}
		.field static public literal uint64 MaxValue = uint64(0xFFFFFFFFFFFFFFFF)
		.field static public literal uint64 MinValue = uint64(0x0)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sequential sealed serializable UIntPtr
		extends System.ValueType
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(void* 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance uint32 ToUInt32()
		{
			ret
		}
		.method public hidebysig 
			instance uint64 ToUInt64()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig specialname 
			native uint op_Explicit(uint32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			native uint op_Explicit(uint64 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint32 op_Explicit(native uint 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			uint64 op_Explicit(native uint 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			native uint op_Explicit(void* 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			void* op_Explicit(native uint 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(native uint value1, native uint value2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(native uint value1, native uint value2)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_Size()
		{
			ret
		}
		.method public hidebysig 
			instance void* ToPointer()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.field static public initonly native uint Zero

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property int32 Size()
		{
			.get int32 System.UIntPtr::get_Size()
		}
	}
	.class public serializable UnauthorizedAccessException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable UnhandledExceptionEventArgs
		extends System.EventArgs
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object exception, bool isTerminating)
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_ExceptionObject()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsTerminating()
		{
			ret
		}
		.property instance object ExceptionObject()
		{
			.get instance object System.UnhandledExceptionEventArgs::get_ExceptionObject()
		}
		.property instance bool IsTerminating()
		{
			.get instance bool System.UnhandledExceptionEventArgs::get_IsTerminating()
		}
	}
	.class public sealed serializable UnhandledExceptionEventHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class System.UnhandledExceptionEventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.UnhandledExceptionEventArgs e, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract serializable ValueType
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
			internalcall 
		{
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable Version
		extends System.Object
		implements System.ICloneable, System.IComparable, class 'System.IComparable`1'<class System.Version>, class 'System.IEquatable`1'<class System.Version>
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 major, int32 minor, int32 build, int32 revision)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 major, int32 minor, int32 build)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 major, int32 minor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Major()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Minor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Build()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Revision()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int16 get_MajorRevision()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int16 get_MinorRevision()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(object version)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 CompareTo(class System.Version 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Equals(class System.Version obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(int32 fieldCount)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThan(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_LessThanOrEqual(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThan(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_GreaterThanOrEqual(class System.Version v1, class System.Version v2)
		{
			ret
		}
		.property instance int32 Build()
		{
			.get instance int32 System.Version::get_Build()
		}
		.property instance int32 Major()
		{
			.get instance int32 System.Version::get_Major()
		}
		.property instance int16 MajorRevision()
		{
			.get instance int16 System.Version::get_MajorRevision()
		}
		.property instance int32 Minor()
		{
			.get instance int32 System.Version::get_Minor()
		}
		.property instance int16 MinorRevision()
		{
			.get instance int16 System.Version::get_MinorRevision()
		}
		.property instance int32 Revision()
		{
			.get instance int32 System.Version::get_Revision()
		}
	}
	.class public sequential sealed serializable Void
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public serializable WeakReference
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object target)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object target, bool trackResurrection)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsAlive()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_TrackResurrection()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Target()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Target(object 'value')
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.property instance bool IsAlive()
		{
			.get instance bool System.WeakReference::get_IsAlive()
		}
		.property instance object Target()
		{
			.get instance object System.WeakReference::get_Target()
			.set instance void System.WeakReference::set_Target(object)
		}
		.property instance bool TrackResurrection()
		{
			.get instance bool System.WeakReference::get_TrackResurrection()
		}
	}
	.class public interface abstract _AppDomain
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 30 35 46 36 39 36 44 43 2D 32 42 32 39 2D 33 36 36 33 2D 41 44 38 42 2D 43 34 33 38 39 43 46 32 41 37 31 33 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object InitializeLifetimeService()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetLifetimeService()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Security.Policy.Evidence get_Evidence()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_DomainUnload(class System.EventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_DomainUnload(class System.EventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_AssemblyLoad(class System.AssemblyLoadEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_AssemblyLoad(class System.AssemblyLoadEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_ProcessExit(class System.EventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_ProcessExit(class System.EventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_TypeResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_TypeResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_ResourceResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_ResourceResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_AssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_AssemblyResolve(class System.ResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_UnhandledException(class System.UnhandledExceptionEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_UnhandledException(class System.UnhandledExceptionEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(string assemblyString)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 ExecuteAssembly(string assemblyFile)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_FriendlyName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_BaseDirectory()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_RelativeSearchPath()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_ShadowCopyFiles()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly[] GetAssemblies()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void AppendPrivatePath(string path)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void ClearPrivatePath()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetShadowCopyPath(string s)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void ClearShadowCopyPath()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetCachePath(string s)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetData(string name, object data)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetData(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetAppDomainPolicy(class System.Security.Policy.PolicyLevel domainPolicy)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetThreadPrincipal(class System.Security.Principal.IPrincipal principal)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetPrincipalPolicy(valuetype System.Security.Principal.PrincipalPolicy policy)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DoCallBack(class System.CrossAppDomainDelegate theDelegate)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_DynamicDirectory()
		{
		}
		.event System.AssemblyLoadEventHandler AssemblyLoad
		{
			.addon instance void System._AppDomain::add_AssemblyLoad(class System.AssemblyLoadEventHandler)
			.removeon instance void System._AppDomain::remove_AssemblyLoad(class System.AssemblyLoadEventHandler)
		}
		.event System.ResolveEventHandler AssemblyResolve
		{
			.addon instance void System._AppDomain::add_AssemblyResolve(class System.ResolveEventHandler)
			.removeon instance void System._AppDomain::remove_AssemblyResolve(class System.ResolveEventHandler)
		}
		.event System.EventHandler DomainUnload
		{
			.addon instance void System._AppDomain::add_DomainUnload(class System.EventHandler)
			.removeon instance void System._AppDomain::remove_DomainUnload(class System.EventHandler)
		}
		.event System.EventHandler ProcessExit
		{
			.addon instance void System._AppDomain::add_ProcessExit(class System.EventHandler)
			.removeon instance void System._AppDomain::remove_ProcessExit(class System.EventHandler)
		}
		.event System.ResolveEventHandler ResourceResolve
		{
			.addon instance void System._AppDomain::add_ResourceResolve(class System.ResolveEventHandler)
			.removeon instance void System._AppDomain::remove_ResourceResolve(class System.ResolveEventHandler)
		}
		.event System.ResolveEventHandler TypeResolve
		{
			.addon instance void System._AppDomain::add_TypeResolve(class System.ResolveEventHandler)
			.removeon instance void System._AppDomain::remove_TypeResolve(class System.ResolveEventHandler)
		}
		.event System.UnhandledExceptionEventHandler UnhandledException
		{
			.addon instance void System._AppDomain::add_UnhandledException(class System.UnhandledExceptionEventHandler)
			.removeon instance void System._AppDomain::remove_UnhandledException(class System.UnhandledExceptionEventHandler)
		}
		.property instance string BaseDirectory()
		{
			.get instance string System._AppDomain::get_BaseDirectory()
		}
		.property instance string DynamicDirectory()
		{
			.get instance string System._AppDomain::get_DynamicDirectory()
		}
		.property instance class System.Security.Policy.Evidence Evidence()
		{
			.get instance class System.Security.Policy.Evidence System._AppDomain::get_Evidence()
		}
		.property instance string FriendlyName()
		{
			.get instance string System._AppDomain::get_FriendlyName()
		}
		.property instance string RelativeSearchPath()
		{
			.get instance string System._AppDomain::get_RelativeSearchPath()
		}
		.property instance bool ShadowCopyFiles()
		{
			.get instance bool System._AppDomain::get_ShadowCopyFiles()
		}
	}
}
.namespace System.Collections
{
	.class public serializable ArrayList
		extends System.Object
		implements System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.ICollection c)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsFixedSize()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Item(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Item(int32 index, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.ArrayList Adapter(class System.Collections.IList list)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Add(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddRange(class System.Collections.ICollection c)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 BinarySearch(int32 index, int32 count, object 'value', class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 BinarySearch(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 BinarySearch(object 'value', class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object item)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 arrayIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(int32 index, class System.Array 'array', int32 arrayIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IList FixedSize(class System.Collections.IList list)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.ArrayList FixedSize(class System.Collections.ArrayList list)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator(int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(object 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(object 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Insert(int32 index, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void InsertRange(int32 index, class System.Collections.ICollection c)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(object 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(object 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IList ReadOnly(class System.Collections.IList list)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.ArrayList ReadOnly(class System.Collections.ArrayList list)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Remove(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveAt(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveRange(int32 index, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.ArrayList Repeat(object 'value', int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Reverse()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Reverse(int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetRange(int32 index, class System.Collections.ICollection c)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.ArrayList GetRange(int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Sort()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Sort(class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Sort(int32 index, int32 count, class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IList Synchronized(class System.Collections.IList list)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Collections.ArrayList Synchronized(class System.Collections.ArrayList list)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] ToArray()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Array ToArray(class System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void TrimToSize()
		{
			ret
		}
		.property instance int32 Capacity()
		{
			.get instance int32 System.Collections.ArrayList::get_Capacity()
			.set instance void System.Collections.ArrayList::set_Capacity(int32)
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.ArrayList::get_Count()
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Collections.ArrayList::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.ArrayList::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.ArrayList::get_IsSynchronized()
		}
		.property instance object Item(int32)
		{
			.get instance object System.Collections.ArrayList::get_Item(int32)
			.set instance void System.Collections.ArrayList::set_Item(int32, object)
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.ArrayList::get_SyncRoot()
		}
	}
	.class public sealed serializable BitArray
		extends System.Object
		implements System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 length, bool defaultValue)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] bytes)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool[] values)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32[] values)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.BitArray bits)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Item(int32 index)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Item(int32 index, bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool Get(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance void Set(int32 index, bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetAll(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.BitArray And(class System.Collections.BitArray 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.BitArray Or(class System.Collections.BitArray 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.BitArray Xor(class System.Collections.BitArray 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.BitArray Not()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Length()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Length(int32 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.BitArray::get_Count()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.BitArray::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.BitArray::get_IsSynchronized()
		}
		.property instance bool Item(int32)
		{
			.get instance bool System.Collections.BitArray::get_Item(int32)
			.set instance void System.Collections.BitArray::set_Item(int32, bool)
		}
		.property instance int32 Length()
		{
			.get instance int32 System.Collections.BitArray::get_Length()
			.set instance void System.Collections.BitArray::set_Length(int32)
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.BitArray::get_SyncRoot()
		}
	}
	.class public serializable CaseInsensitiveComparer
		extends System.Object
		implements System.Collections.IComparer
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Collections.CaseInsensitiveComparer get_Default()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Collections.CaseInsensitiveComparer get_DefaultInvariant()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 Compare(object a, object b)
		{
			ret
		}
		.property class System.Collections.CaseInsensitiveComparer Default()
		{
			.get class System.Collections.CaseInsensitiveComparer System.Collections.CaseInsensitiveComparer::get_Default()
		}
		.property class System.Collections.CaseInsensitiveComparer DefaultInvariant()
		{
			.get class System.Collections.CaseInsensitiveComparer System.Collections.CaseInsensitiveComparer::get_DefaultInvariant()
		}
	}
	.class public serializable CaseInsensitiveHashCodeProvider
		extends System.Object
		implements System.Collections.IHashCodeProvider
	{
		.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 22 50 6C 65 61 73 65 20 75 73 65 20 53 74 72 69 6E 67 43 6F 6D 70 61 72 65 72 20 69 6E 73 74 65 61 64 2E 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Collections.CaseInsensitiveHashCodeProvider get_Default()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Collections.CaseInsensitiveHashCodeProvider get_DefaultInvariant()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 GetHashCode(object obj)
		{
			ret
		}
		.property class System.Collections.CaseInsensitiveHashCodeProvider Default()
		{
			.get class System.Collections.CaseInsensitiveHashCodeProvider System.Collections.CaseInsensitiveHashCodeProvider::get_Default()
		}
		.property class System.Collections.CaseInsensitiveHashCodeProvider DefaultInvariant()
		{
			.get class System.Collections.CaseInsensitiveHashCodeProvider System.Collections.CaseInsensitiveHashCodeProvider::get_DefaultInvariant()
		}
	}
	.class public abstract serializable CollectionBase
		extends System.Object
		implements System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method family hidebysig specialname 
			instance class System.Collections.ArrayList get_InnerList()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class System.Collections.IList get_List()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RemoveAt(int32 index)
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsReadOnly()
		{
			.override System.Collections.IList::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsFixedSize()
		{
			.override System.Collections.IList::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IList.get_Item(int32 index)
		{
			.override System.Collections.IList::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IList.set_Item(int32 index, object 'value')
		{
			.override System.Collections.IList::set_Item
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IList.Contains(object 'value')
		{
			.override System.Collections.IList::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.Add(object 'value')
		{
			.override System.Collections.IList::Add
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Remove(object 'value')
		{
			.override System.Collections.IList::Remove
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.IndexOf(object 'value')
		{
			.override System.Collections.IList::IndexOf
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Insert(int32 index, object 'value')
		{
			.override System.Collections.IList::Insert
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnSet(int32 index, object oldValue, object newValue)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnInsert(int32 index, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnClear()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnRemove(int32 index, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnValidate(object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnSetComplete(int32 index, object oldValue, object newValue)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnInsertComplete(int32 index, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnClearComplete()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnRemoveComplete(int32 index, object 'value')
		{
			ret
		}
		.property instance int32 Capacity()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 System.Collections.CollectionBase::get_Capacity()
			.set instance void System.Collections.CollectionBase::set_Capacity(int32)
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.CollectionBase::get_Count()
		}
		.property instance class System.Collections.ArrayList InnerList()
		{
			.get instance class System.Collections.ArrayList System.Collections.CollectionBase::get_InnerList()
		}
		.property instance class System.Collections.IList List()
		{
			.get instance class System.Collections.IList System.Collections.CollectionBase::get_List()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool System.Collections.CollectionBase::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object System.Collections.CollectionBase::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IList.IsFixedSize()
		{
			.get instance bool System.Collections.CollectionBase::System.Collections.IList.get_IsFixedSize()
		}
		.property instance bool System.Collections.IList.IsReadOnly()
		{
			.get instance bool System.Collections.CollectionBase::System.Collections.IList.get_IsReadOnly()
		}
		.property instance object System.Collections.IList.Item(int32)
		{
			.get instance object System.Collections.CollectionBase::System.Collections.IList.get_Item(int32)
			.set instance void System.Collections.CollectionBase::System.Collections.IList.set_Item(int32, object)
		}
	}
	.class public sealed serializable Comparer
		extends System.Object
		implements System.Collections.IComparer, System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 Compare(object a, object b)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.field static public initonly class System.Collections.Comparer Default
		.field static public initonly class System.Collections.Comparer DefaultInvariant
	}
	.class public abstract serializable DictionaryBase
		extends System.Object
		implements System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance class System.Collections.Hashtable get_InnerHashtable()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class System.Collections.IDictionary get_Dictionary()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IDictionary.get_IsReadOnly()
		{
			.override System.Collections.IDictionary::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IDictionary.get_IsFixedSize()
		{
			.override System.Collections.IDictionary::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection System.Collections.IDictionary.get_Keys()
		{
			.override System.Collections.IDictionary::get_Keys
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection System.Collections.IDictionary.get_Values()
		{
			.override System.Collections.IDictionary::get_Values
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IDictionary.get_Item(object key)
		{
			.override System.Collections.IDictionary::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IDictionary.set_Item(object key, object 'value')
		{
			.override System.Collections.IDictionary::set_Item
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IDictionary.Contains(object key)
		{
			.override System.Collections.IDictionary::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IDictionary.Add(object key, object 'value')
		{
			.override System.Collections.IDictionary::Add
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IDictionary.Remove(object key)
		{
			.override System.Collections.IDictionary::Remove
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method family virtual hidebysig newslot 
			instance object OnGet(object key, object currentValue)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnSet(object key, object oldValue, object newValue)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnInsert(object key, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnClear()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnRemove(object key, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnValidate(object key, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnSetComplete(object key, object oldValue, object newValue)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnInsertComplete(object key, object 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnClearComplete()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void OnRemoveComplete(object key, object 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.DictionaryBase::get_Count()
		}
		.property instance class System.Collections.IDictionary Dictionary()
		{
			.get instance class System.Collections.IDictionary System.Collections.DictionaryBase::get_Dictionary()
		}
		.property instance class System.Collections.Hashtable InnerHashtable()
		{
			.get instance class System.Collections.Hashtable System.Collections.DictionaryBase::get_InnerHashtable()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool System.Collections.DictionaryBase::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object System.Collections.DictionaryBase::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IDictionary.IsFixedSize()
		{
			.get instance bool System.Collections.DictionaryBase::System.Collections.IDictionary.get_IsFixedSize()
		}
		.property instance bool System.Collections.IDictionary.IsReadOnly()
		{
			.get instance bool System.Collections.DictionaryBase::System.Collections.IDictionary.get_IsReadOnly()
		}
		.property instance object System.Collections.IDictionary.Item(object)
		{
			.get instance object System.Collections.DictionaryBase::System.Collections.IDictionary.get_Item(object)
			.set instance void System.Collections.DictionaryBase::System.Collections.IDictionary.set_Item(object, object)
		}
		.property instance class System.Collections.ICollection System.Collections.IDictionary.Keys()
		{
			.get instance class System.Collections.ICollection System.Collections.DictionaryBase::System.Collections.IDictionary.get_Keys()
		}
		.property instance class System.Collections.ICollection System.Collections.IDictionary.Values()
		{
			.get instance class System.Collections.ICollection System.Collections.DictionaryBase::System.Collections.IDictionary.get_Values()
		}
	}
	.class public sequential sealed serializable DictionaryEntry
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object key, object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Key()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Key(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(object 'value')
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance object Key()
		{
			.get instance object System.Collections.DictionaryEntry::get_Key()
			.set instance void System.Collections.DictionaryEntry::set_Key(object)
		}
		.property instance object Value()
		{
			.get instance object System.Collections.DictionaryEntry::get_Value()
			.set instance void System.Collections.DictionaryEntry::set_Value(object)
		}
	}
	.class public serializable Hashtable
		extends System.Object
		implements System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback, System.ICloneable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance class System.Collections.IHashCodeProvider get_hcp()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void set_hcp(class System.Collections.IHashCodeProvider 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance class System.Collections.IComparer get_comparer()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void set_comparer(class System.Collections.IComparer 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance class System.Collections.IEqualityComparer get_EqualityComparer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, float32 loadFactor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 3C 50 6C 65 61 73 65 20 75 73 65 20 48 61 73 68 74 61 62 6C 65 28 69 6E 74 2C 20 66 6C 6F 61 74 2C 20 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 29 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 30 50 6C 65 61 73 65 20 75 73 65 20 48 61 73 68 74 61 62 6C 65 28 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 29 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IEqualityComparer equalityComparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 35 50 6C 65 61 73 65 20 75 73 65 20 48 61 73 68 74 61 62 6C 65 28 69 6E 74 2C 20 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 29 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, class System.Collections.IEqualityComparer equalityComparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 3D 50 6C 65 61 73 65 20 75 73 65 20 48 61 73 68 74 61 62 6C 65 28 49 44 69 63 74 69 6F 6E 61 72 79 2C 20 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 29 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IEqualityComparer equalityComparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IHashCodeProvider hcp, class System.Collections.IComparer comparer)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 44 50 6C 65 61 73 65 20 75 73 65 20 48 61 73 68 74 61 62 6C 65 28 49 44 69 63 74 69 6F 6E 61 72 79 2C 20 66 6C 6F 61 74 2C 20 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 29 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, float32 loadFactor, class System.Collections.IEqualityComparer equalityComparer)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Add(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool ContainsKey(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool ContainsValue(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 arrayIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance int32 GetHash(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsFixedSize()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance bool KeyEquals(object item, object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Keys()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Values()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Remove(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.Hashtable Synchronized(class System.Collections.Hashtable table)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnDeserialization(object sender)
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.Hashtable::get_Count()
		}
		.property instance class System.Collections.IEqualityComparer EqualityComparer()
		{
			.get instance class System.Collections.IEqualityComparer System.Collections.Hashtable::get_EqualityComparer()
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Collections.Hashtable::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.Hashtable::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.Hashtable::get_IsSynchronized()
		}
		.property instance object Item(object)
		{
			.get instance object System.Collections.Hashtable::get_Item(object)
			.set instance void System.Collections.Hashtable::set_Item(object, object)
		}
		.property instance class System.Collections.ICollection Keys()
		{
			.get instance class System.Collections.ICollection System.Collections.Hashtable::get_Keys()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.Hashtable::get_SyncRoot()
		}
		.property instance class System.Collections.ICollection Values()
		{
			.get instance class System.Collections.ICollection System.Collections.Hashtable::get_Values()
		}
		.property instance class System.Collections.IComparer comparer()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 22 50 6C 65 61 73 65 20 75 73 65 20 4B 65 79 43 6F 6D 70 61 72 65 72 20 70 72 6F 70 65 72 74 69 65 73 2E 00 00)
			.get instance class System.Collections.IComparer System.Collections.Hashtable::get_comparer()
			.set instance void System.Collections.Hashtable::set_comparer(class System.Collections.IComparer)
		}
		.property instance class System.Collections.IHashCodeProvider hcp()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 25 50 6C 65 61 73 65 20 75 73 65 20 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 20 70 72 6F 70 65 72 74 79 2E 00 00)
			.get instance class System.Collections.IHashCodeProvider System.Collections.Hashtable::get_hcp()
			.set instance void System.Collections.Hashtable::set_hcp(class System.Collections.IHashCodeProvider)
		}
	}
	.class public interface abstract ICollection
		implements System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_Count()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_SyncRoot()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSynchronized()
		{
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.ICollection::get_Count()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.ICollection::get_IsSynchronized()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.ICollection::get_SyncRoot()
		}
	}
	.class public interface abstract IComparer
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 Compare(object x, object y)
		{
		}
	}
	.class public interface abstract IDictionary
		implements System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Item(object key)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(object key, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Collections.ICollection get_Keys()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Collections.ICollection get_Values()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Contains(object key)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Add(object key, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Clear()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsReadOnly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFixedSize()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Remove(object key)
		{
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Collections.IDictionary::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.IDictionary::get_IsReadOnly()
		}
		.property instance object Item(object)
		{
			.get instance object System.Collections.IDictionary::get_Item(object)
			.set instance void System.Collections.IDictionary::set_Item(object, object)
		}
		.property instance class System.Collections.ICollection Keys()
		{
			.get instance class System.Collections.ICollection System.Collections.IDictionary::get_Keys()
		}
		.property instance class System.Collections.ICollection Values()
		{
			.get instance class System.Collections.ICollection System.Collections.IDictionary::get_Values()
		}
	}
	.class public interface abstract IDictionaryEnumerator
		implements System.Collections.IEnumerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Key()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Value()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Collections.DictionaryEntry get_Entry()
		{
		}
		.property instance valuetype System.Collections.DictionaryEntry Entry()
		{
			.get instance valuetype System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator::get_Entry()
		}
		.property instance object Key()
		{
			.get instance object System.Collections.IDictionaryEnumerator::get_Key()
		}
		.property instance object Value()
		{
			.get instance object System.Collections.IDictionaryEnumerator::get_Value()
		}
	}
	.class public interface abstract IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 34 39 36 42 30 41 42 45 2D 43 44 45 45 2D 31 31 64 33 2D 38 38 45 38 2D 30 30 39 30 32 37 35 34 43 34 33 41 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			.custom instance void System.Runtime.InteropServices.DispIdAttribute::.ctor(int32) = (01 00 FC FF FF FF 00 00)
		}
	}
	.class public interface abstract IEnumerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 34 39 36 42 30 41 42 46 2D 43 44 45 45 2D 31 31 64 33 2D 38 38 45 38 2D 30 30 39 30 32 37 35 34 43 34 33 41 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool MoveNext()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Current()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Reset()
		{
		}
		.property instance object Current()
		{
			.get instance object System.Collections.IEnumerator::get_Current()
		}
	}
	.class public interface abstract IEqualityComparer
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object x, object y)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode(object obj)
		{
		}
	}
	.class public interface abstract IHashCodeProvider
	{
		.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 25 50 6C 65 61 73 65 20 75 73 65 20 49 45 71 75 61 6C 69 74 79 43 6F 6D 70 61 72 65 72 20 69 6E 73 74 65 61 64 2E 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode(object obj)
		{
		}
	}
	.class public interface abstract IList
		implements System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Item(int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(int32 index, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 Add(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Contains(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Clear()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsReadOnly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFixedSize()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 IndexOf(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Insert(int32 index, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Remove(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveAt(int32 index)
		{
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Collections.IList::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.IList::get_IsReadOnly()
		}
		.property instance object Item(int32)
		{
			.get instance object System.Collections.IList::get_Item(int32)
			.set instance void System.Collections.IList::set_Item(int32, object)
		}
	}
	.class public serializable Queue
		extends System.Object
		implements System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, float32 growFactor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.ICollection col)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Enqueue(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Dequeue()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Peek()
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.Queue Synchronized(class System.Collections.Queue queue)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] ToArray()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void TrimToSize()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.Queue::get_Count()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.Queue::get_IsSynchronized()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.Queue::get_SyncRoot()
		}
	}
	.class public abstract serializable ReadOnlyCollectionBase
		extends System.Object
		implements System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance class System.Collections.ArrayList get_InnerList()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.ReadOnlyCollectionBase::get_Count()
		}
		.property instance class System.Collections.ArrayList InnerList()
		{
			.get instance class System.Collections.ArrayList System.Collections.ReadOnlyCollectionBase::get_InnerList()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool System.Collections.ReadOnlyCollectionBase::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object System.Collections.ReadOnlyCollectionBase::System.Collections.ICollection.get_SyncRoot()
		}
	}
	.class public serializable SortedList
		extends System.Object
		implements System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 initialCapacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IComparer comparer, int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Add(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Keys()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Values()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsFixedSize()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool ContainsKey(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool ContainsValue(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 arrayIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetByIndex(int32 index)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetKey(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IList GetKeyList()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IList GetValueList()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOfKey(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOfValue(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveAt(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Remove(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetByIndex(int32 index, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.SortedList Synchronized(class System.Collections.SortedList list)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void TrimToSize()
		{
			ret
		}
		.property instance int32 Capacity()
		{
			.get instance int32 System.Collections.SortedList::get_Capacity()
			.set instance void System.Collections.SortedList::set_Capacity(int32)
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.SortedList::get_Count()
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Collections.SortedList::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Collections.SortedList::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.SortedList::get_IsSynchronized()
		}
		.property instance object Item(object)
		{
			.get instance object System.Collections.SortedList::get_Item(object)
			.set instance void System.Collections.SortedList::set_Item(object, object)
		}
		.property instance class System.Collections.ICollection Keys()
		{
			.get instance class System.Collections.ICollection System.Collections.SortedList::get_Keys()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.SortedList::get_SyncRoot()
		}
		.property instance class System.Collections.ICollection Values()
		{
			.get instance class System.Collections.ICollection System.Collections.SortedList::get_Values()
		}
	}
	.class public serializable Stack
		extends System.Object
		implements System.Collections.ICollection, System.Collections.IEnumerable, System.ICloneable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 initialCapacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Collections.ICollection col)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Peek()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Pop()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Push(object obj)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.Stack Synchronized(class System.Collections.Stack stack)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] ToArray()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Collections.Stack::get_Count()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Collections.Stack::get_IsSynchronized()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Collections.Stack::get_SyncRoot()
		}
	}
}
.namespace System.Collections.Generic
{
	.class public abstract serializable 'Comparer`1'<T>
		extends System.Object
		implements System.Collections.IComparer, class 'System.Collections.Generic.IComparer`1'<!0>
	{
		.method public static hidebysig specialname 
			class 'System.Collections.Generic.Comparer`1'<!0> get_Default()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 Compare(!0 x, !0 y)
		{
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IComparer.Compare(object x, object y)
		{
			.override System.Collections.IComparer::Compare
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class 'System.Collections.Generic.Comparer`1'<!0> Default()
		{
			.get class 'System.Collections.Generic.Comparer`1'<!0> 'System.Collections.Generic.Comparer`1'::get_Default()
		}
	}
	.class public serializable 'Dictionary`2'<TKey, TValue>
		extends System.Object
		implements class 'System.Collections.Generic.IDictionary`2'<!0,!1>, class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>, class 'System.Collections.Generic.IEnumerable`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.class nested public sequential sealed serializable Enumerator<TKey, TValue>
			extends System.ValueType
			implements class 'System.Collections.Generic.IEnumerator`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>, System.IDisposable, System.Collections.IDictionaryEnumerator, System.Collections.IEnumerator
		{
			.method public final virtual hidebysig newslot 
				instance bool MoveNext()
			{
				ret
			}
			.method public final virtual hidebysig newslot specialname 
				instance valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> get_Current()
			{
				ret
			}
			.method public final virtual hidebysig newslot 
				instance void Dispose()
			{
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.IEnumerator.get_Current()
			{
				.override System.Collections.IEnumerator::get_Current
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void System.Collections.IEnumerator.Reset()
			{
				.override System.Collections.IEnumerator::Reset
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance valuetype System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry()
			{
				.override System.Collections.IDictionaryEnumerator::get_Entry
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.IDictionaryEnumerator.get_Key()
			{
				.override System.Collections.IDictionaryEnumerator::get_Key
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.IDictionaryEnumerator.get_Value()
			{
				.override System.Collections.IDictionaryEnumerator::get_Value
				ret
			}

			//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
			.field private int32 __Asmmeta_Private_Field
			.property instance valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> Current()
			{
				.get instance valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> 'System.Collections.Generic.Dictionary`2'/Enumerator::get_Current()
			}
			.property instance valuetype System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry()
			{
				.get instance valuetype System.Collections.DictionaryEntry 'System.Collections.Generic.Dictionary`2'/Enumerator::System.Collections.IDictionaryEnumerator.get_Entry()
			}
			.property instance object System.Collections.IDictionaryEnumerator.Key()
			{
				.get instance object 'System.Collections.Generic.Dictionary`2'/Enumerator::System.Collections.IDictionaryEnumerator.get_Key()
			}
			.property instance object System.Collections.IDictionaryEnumerator.Value()
			{
				.get instance object 'System.Collections.Generic.Dictionary`2'/Enumerator::System.Collections.IDictionaryEnumerator.get_Value()
			}
			.property instance object System.Collections.IEnumerator.Current()
			{
				.get instance object 'System.Collections.Generic.Dictionary`2'/Enumerator::System.Collections.IEnumerator.get_Current()
			}
		}
		.class nested public sealed serializable KeyCollection<TKey, TValue>
			extends System.Object
			implements class 'System.Collections.Generic.ICollection`1'<!0>, class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.ICollection, System.Collections.IEnumerable
		{
			.class nested public sequential sealed serializable Enumerator<TKey, TValue>
				extends System.ValueType
				implements class 'System.Collections.Generic.IEnumerator`1'<!0>, System.IDisposable, System.Collections.IEnumerator
			{
				.method public final virtual hidebysig newslot 
					instance void Dispose()
				{
					ret
				}
				.method public final virtual hidebysig newslot 
					instance bool MoveNext()
				{
					ret
				}
				.method public final virtual hidebysig newslot specialname 
					instance !0 get_Current()
				{
					ret
				}
				.method private final virtual hidebysig newslot specialname 
					instance object System.Collections.IEnumerator.get_Current()
				{
					.override System.Collections.IEnumerator::get_Current
					ret
				}
				.method private final virtual hidebysig newslot 
					instance void System.Collections.IEnumerator.Reset()
				{
					.override System.Collections.IEnumerator::Reset
					ret
				}

				//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
				.field private int32 __Asmmeta_Private_Field
				.property instance !0 Current()
				{
					.get instance !0 'System.Collections.Generic.Dictionary`2'/KeyCollection/Enumerator::get_Current()
				}
				.property instance object System.Collections.IEnumerator.Current()
				{
					.get instance object 'System.Collections.Generic.Dictionary`2'/KeyCollection/Enumerator::System.Collections.IEnumerator.get_Current()
				}
			}
			.method public hidebysig specialname 
				instance void .ctor(class 'System.Collections.Generic.Dictionary`2'<!0,!1> dictionary)
			{
				ret
			}
			.method public hidebysig 
				instance valuetype 'System.Collections.Generic.Dictionary`2'/KeyCollection/Enumerator<!0,!1> GetEnumerator()
			{
				ret
			}
			.method public final virtual hidebysig newslot 
				instance void CopyTo(!0[] 'array', int32 index)
			{
				ret
			}
			.method public final virtual hidebysig newslot specialname 
				instance int32 get_Count()
			{
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance bool 'System.Collections.Generic.ICollection<TKey>.get_IsReadOnly'()
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::get_IsReadOnly()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void 'System.Collections.Generic.ICollection<TKey>.Add'(!0 item)
			{
				.override method instance void class 'System.Collections.Generic.ICollection`1'<!0>::Add(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void 'System.Collections.Generic.ICollection<TKey>.Clear'()
			{
				.override method instance void class 'System.Collections.Generic.ICollection`1'<!0>::Clear()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance bool 'System.Collections.Generic.ICollection<TKey>.Contains'(!0 item)
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::Contains(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance bool 'System.Collections.Generic.ICollection<TKey>.Remove'(!0 item)
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::Remove(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance class 'System.Collections.Generic.IEnumerator`1'<!0> 'System.Collections.Generic.IEnumerable<TKey>.GetEnumerator'()
			{
				.override method instance class 'System.Collections.Generic.IEnumerator`1'<!0> class 'System.Collections.Generic.IEnumerable`1'<!0>::GetEnumerator()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				.override System.Collections.IEnumerable::GetEnumerator
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
			{
				.override System.Collections.ICollection::CopyTo
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance bool System.Collections.ICollection.get_IsSynchronized()
			{
				.override System.Collections.ICollection::get_IsSynchronized
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.ICollection.get_SyncRoot()
			{
				.override System.Collections.ICollection::get_SyncRoot
				ret
			}
			.property instance int32 Count()
			{
				.get instance int32 'System.Collections.Generic.Dictionary`2'/KeyCollection::get_Count()
			}
			.property instance bool 'System.Collections.Generic.ICollection<TKey>.IsReadOnly'()
			{
				.get instance bool 'System.Collections.Generic.Dictionary`2'/KeyCollection::'System.Collections.Generic.ICollection<TKey>.get_IsReadOnly'()
			}
			.property instance bool System.Collections.ICollection.IsSynchronized()
			{
				.get instance bool 'System.Collections.Generic.Dictionary`2'/KeyCollection::System.Collections.ICollection.get_IsSynchronized()
			}
			.property instance object System.Collections.ICollection.SyncRoot()
			{
				.get instance object 'System.Collections.Generic.Dictionary`2'/KeyCollection::System.Collections.ICollection.get_SyncRoot()
			}
		}
		.class nested public sealed serializable ValueCollection<TKey, TValue>
			extends System.Object
			implements class 'System.Collections.Generic.ICollection`1'<!1>, class 'System.Collections.Generic.IEnumerable`1'<!1>, System.Collections.ICollection, System.Collections.IEnumerable
		{
			.class nested public sequential sealed serializable Enumerator<TKey, TValue>
				extends System.ValueType
				implements class 'System.Collections.Generic.IEnumerator`1'<!1>, System.IDisposable, System.Collections.IEnumerator
			{
				.method public final virtual hidebysig newslot 
					instance void Dispose()
				{
					ret
				}
				.method public final virtual hidebysig newslot 
					instance bool MoveNext()
				{
					ret
				}
				.method public final virtual hidebysig newslot specialname 
					instance !1 get_Current()
				{
					ret
				}
				.method private final virtual hidebysig newslot specialname 
					instance object System.Collections.IEnumerator.get_Current()
				{
					.override System.Collections.IEnumerator::get_Current
					ret
				}
				.method private final virtual hidebysig newslot 
					instance void System.Collections.IEnumerator.Reset()
				{
					.override System.Collections.IEnumerator::Reset
					ret
				}

				//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
				.field private int32 __Asmmeta_Private_Field
				.property instance !1 Current()
				{
					.get instance !1 'System.Collections.Generic.Dictionary`2'/ValueCollection/Enumerator::get_Current()
				}
				.property instance object System.Collections.IEnumerator.Current()
				{
					.get instance object 'System.Collections.Generic.Dictionary`2'/ValueCollection/Enumerator::System.Collections.IEnumerator.get_Current()
				}
			}
			.method public hidebysig specialname 
				instance void .ctor(class 'System.Collections.Generic.Dictionary`2'<!0,!1> dictionary)
			{
				ret
			}
			.method public hidebysig 
				instance valuetype 'System.Collections.Generic.Dictionary`2'/ValueCollection/Enumerator<!0,!1> GetEnumerator()
			{
				ret
			}
			.method public final virtual hidebysig newslot 
				instance void CopyTo(!1[] 'array', int32 index)
			{
				ret
			}
			.method public final virtual hidebysig newslot specialname 
				instance int32 get_Count()
			{
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance bool 'System.Collections.Generic.ICollection<TValue>.get_IsReadOnly'()
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!1>::get_IsReadOnly()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void 'System.Collections.Generic.ICollection<TValue>.Add'(!1 item)
			{
				.override method instance void class 'System.Collections.Generic.ICollection`1'<!1>::Add(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance bool 'System.Collections.Generic.ICollection<TValue>.Remove'(!1 item)
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!1>::Remove(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void 'System.Collections.Generic.ICollection<TValue>.Clear'()
			{
				.override method instance void class 'System.Collections.Generic.ICollection`1'<!1>::Clear()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance bool 'System.Collections.Generic.ICollection<TValue>.Contains'(!1 item)
			{
				.override method instance bool class 'System.Collections.Generic.ICollection`1'<!1>::Contains(!0)
				ret
			}
			.method private final virtual hidebysig newslot 
				instance class 'System.Collections.Generic.IEnumerator`1'<!1> 'System.Collections.Generic.IEnumerable<TValue>.GetEnumerator'()
			{
				.override method instance class 'System.Collections.Generic.IEnumerator`1'<!0> class 'System.Collections.Generic.IEnumerable`1'<!1>::GetEnumerator()
				ret
			}
			.method private final virtual hidebysig newslot 
				instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				.override System.Collections.IEnumerable::GetEnumerator
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
			{
				.override System.Collections.ICollection::CopyTo
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance bool System.Collections.ICollection.get_IsSynchronized()
			{
				.override System.Collections.ICollection::get_IsSynchronized
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.ICollection.get_SyncRoot()
			{
				.override System.Collections.ICollection::get_SyncRoot
				ret
			}
			.property instance int32 Count()
			{
				.get instance int32 'System.Collections.Generic.Dictionary`2'/ValueCollection::get_Count()
			}
			.property instance bool 'System.Collections.Generic.ICollection<TValue>.IsReadOnly'()
			{
				.get instance bool 'System.Collections.Generic.Dictionary`2'/ValueCollection::'System.Collections.Generic.ICollection<TValue>.get_IsReadOnly'()
			}
			.property instance bool System.Collections.ICollection.IsSynchronized()
			{
				.get instance bool 'System.Collections.Generic.Dictionary`2'/ValueCollection::System.Collections.ICollection.get_IsSynchronized()
			}
			.property instance object System.Collections.ICollection.SyncRoot()
			{
				.get instance object 'System.Collections.Generic.Dictionary`2'/ValueCollection::System.Collections.ICollection.get_SyncRoot()
			}
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IEqualityComparer`1'<!0> comparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, class 'System.Collections.Generic.IEqualityComparer`1'<!0> comparer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IDictionary`2'<!0,!1> dictionary)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IDictionary`2'<!0,!1> dictionary, class 'System.Collections.Generic.IEqualityComparer`1'<!0> comparer)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> get_Comparer()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.Dictionary`2'/KeyCollection<!0,!1> get_Keys()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class 'System.Collections.Generic.ICollection`1'<!0> 'System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys'()
		{
			.override method instance class 'System.Collections.Generic.ICollection`1'<!0> class 'System.Collections.Generic.IDictionary`2'<!0,!1>::get_Keys()
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.Dictionary`2'/ValueCollection<!0,!1> get_Values()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class 'System.Collections.Generic.ICollection`1'<!1> 'System.Collections.Generic.IDictionary<TKey,TValue>.get_Values'()
		{
			.override method instance class 'System.Collections.Generic.ICollection`1'<!1> class 'System.Collections.Generic.IDictionary`2'<!0,!1>::get_Values()
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance !1 get_Item(!0 key)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Item(!0 key, !1 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Add(!0 key, !1 'value')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add'(valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> keyValuePair)
		{
			.override method instance void class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::Add(!0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains'(valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> keyValuePair)
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::Contains(!0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove'(valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1> keyValuePair)
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::Remove(!0)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool ContainsKey(!0 key)
		{
			ret
		}
		.method public hidebysig 
			instance bool ContainsValue(!1 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'System.Collections.Generic.Dictionary`2'/Enumerator<!0,!1> GetEnumerator()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class 'System.Collections.Generic.IEnumerator`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>> 'System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator'()
		{
			.override method instance class 'System.Collections.Generic.IEnumerator`1'<!0> class 'System.Collections.Generic.IEnumerable`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::GetEnumerator()
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnDeserialization(object sender)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Remove(!0 key)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool TryGetValue(!0 key, [out] !1& 'value')
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly'()
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::get_IsReadOnly()
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo'(valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>[] 'array', int32 index)
		{
			.override method instance void class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>::CopyTo(!0[], int32)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IDictionary.get_IsFixedSize()
		{
			.override System.Collections.IDictionary::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IDictionary.get_IsReadOnly()
		{
			.override System.Collections.IDictionary::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection System.Collections.IDictionary.get_Keys()
		{
			.override System.Collections.IDictionary::get_Keys
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection System.Collections.IDictionary.get_Values()
		{
			.override System.Collections.IDictionary::get_Values
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IDictionary.get_Item(object key)
		{
			.override System.Collections.IDictionary::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IDictionary.set_Item(object key, object 'value')
		{
			.override System.Collections.IDictionary::set_Item
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IDictionary.Add(object key, object 'value')
		{
			.override System.Collections.IDictionary::Add
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IDictionary.Contains(object key)
		{
			.override System.Collections.IDictionary::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
		{
			.override System.Collections.IDictionary::GetEnumerator
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IDictionary.Remove(object key)
		{
			.override System.Collections.IDictionary::Remove
			ret
		}
		.property instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> Comparer()
		{
			.get instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> 'System.Collections.Generic.Dictionary`2'::get_Comparer()
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.Collections.Generic.Dictionary`2'::get_Count()
		}
		.property instance !1 Item(!0)
		{
			.get instance !1 'System.Collections.Generic.Dictionary`2'::get_Item(!0)
			.set instance void 'System.Collections.Generic.Dictionary`2'::set_Item(!0, !1)
		}
		.property instance class 'System.Collections.Generic.Dictionary`2'/KeyCollection<!0,!1> Keys()
		{
			.get instance class 'System.Collections.Generic.Dictionary`2'/KeyCollection<!0,!1> 'System.Collections.Generic.Dictionary`2'::get_Keys()
		}
		.property instance bool 'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly'()
		{
			.get instance bool 'System.Collections.Generic.Dictionary`2'::'System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly'()
		}
		.property instance class 'System.Collections.Generic.ICollection`1'<!0> 'System.Collections.Generic.IDictionary<TKey,TValue>.Keys'()
		{
			.get instance class 'System.Collections.Generic.ICollection`1'<!0> 'System.Collections.Generic.Dictionary`2'::'System.Collections.Generic.IDictionary<TKey,TValue>.get_Keys'()
		}
		.property instance class 'System.Collections.Generic.ICollection`1'<!1> 'System.Collections.Generic.IDictionary<TKey,TValue>.Values'()
		{
			.get instance class 'System.Collections.Generic.ICollection`1'<!1> 'System.Collections.Generic.Dictionary`2'::'System.Collections.Generic.IDictionary<TKey,TValue>.get_Values'()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool 'System.Collections.Generic.Dictionary`2'::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object 'System.Collections.Generic.Dictionary`2'::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IDictionary.IsFixedSize()
		{
			.get instance bool 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.get_IsFixedSize()
		}
		.property instance bool System.Collections.IDictionary.IsReadOnly()
		{
			.get instance bool 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.get_IsReadOnly()
		}
		.property instance object System.Collections.IDictionary.Item(object)
		{
			.get instance object 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.get_Item(object)
			.set instance void 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.set_Item(object, object)
		}
		.property instance class System.Collections.ICollection System.Collections.IDictionary.Keys()
		{
			.get instance class System.Collections.ICollection 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.get_Keys()
		}
		.property instance class System.Collections.ICollection System.Collections.IDictionary.Values()
		{
			.get instance class System.Collections.ICollection 'System.Collections.Generic.Dictionary`2'::System.Collections.IDictionary.get_Values()
		}
		.property instance class 'System.Collections.Generic.Dictionary`2'/ValueCollection<!0,!1> Values()
		{
			.get instance class 'System.Collections.Generic.Dictionary`2'/ValueCollection<!0,!1> 'System.Collections.Generic.Dictionary`2'::get_Values()
		}
	}
	.class public abstract serializable 'EqualityComparer`1'<T>
		extends System.Object
		implements System.Collections.IEqualityComparer, class 'System.Collections.Generic.IEqualityComparer`1'<!0>
	{
		.method public static hidebysig specialname 
			class 'System.Collections.Generic.EqualityComparer`1'<!0> get_Default()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(!0 x, !0 y)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode(!0 obj)
		{
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj)
		{
			.override System.Collections.IEqualityComparer::GetHashCode
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IEqualityComparer.Equals(object x, object y)
		{
			.override System.Collections.IEqualityComparer::Equals
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class 'System.Collections.Generic.EqualityComparer`1'<!0> Default()
		{
			.get class 'System.Collections.Generic.EqualityComparer`1'<!0> 'System.Collections.Generic.EqualityComparer`1'::get_Default()
		}
	}
	.class public interface abstract 'ICollection`1'<T>
		implements class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.IEnumerable
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_Count()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsReadOnly()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Add(!0 item)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Clear()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Contains(!0 item)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CopyTo(!0[] 'array', int32 arrayIndex)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Remove(!0 item)
		{
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.Collections.Generic.ICollection`1'::get_Count()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool 'System.Collections.Generic.ICollection`1'::get_IsReadOnly()
		}
	}
	.class public interface abstract 'IComparer`1'<T>
	{
		.method public virtual hidebysig newslot abstract 
			instance int32 Compare(!0 x, !0 y)
		{
		}
	}
	.class public interface abstract 'IDictionary`2'<TKey, TValue>
		implements class 'System.Collections.Generic.ICollection`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>, class 'System.Collections.Generic.IEnumerable`1'<valuetype 'System.Collections.Generic.KeyValuePair`2'<!0,!1>>, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance !1 get_Item(!0 key)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(!0 key, !1 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'System.Collections.Generic.ICollection`1'<!0> get_Keys()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'System.Collections.Generic.ICollection`1'<!1> get_Values()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool ContainsKey(!0 key)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Add(!0 key, !1 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Remove(!0 key)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool TryGetValue(!0 key, [out] !1& 'value')
		{
		}
		.property instance !1 Item(!0)
		{
			.get instance !1 'System.Collections.Generic.IDictionary`2'::get_Item(!0)
			.set instance void 'System.Collections.Generic.IDictionary`2'::set_Item(!0, !1)
		}
		.property instance class 'System.Collections.Generic.ICollection`1'<!0> Keys()
		{
			.get instance class 'System.Collections.Generic.ICollection`1'<!0> 'System.Collections.Generic.IDictionary`2'::get_Keys()
		}
		.property instance class 'System.Collections.Generic.ICollection`1'<!1> Values()
		{
			.get instance class 'System.Collections.Generic.ICollection`1'<!1> 'System.Collections.Generic.IDictionary`2'::get_Values()
		}
	}
	.class public interface abstract 'IEnumerable`1'<T>
		implements System.Collections.IEnumerable
	{
		.method public virtual hidebysig newslot abstract 
			instance class 'System.Collections.Generic.IEnumerator`1'<!0> GetEnumerator()
		{
		}
	}
	.class public interface abstract 'IEnumerator`1'<T>
		implements System.IDisposable, System.Collections.IEnumerator
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance !0 get_Current()
		{
		}
		.property instance !0 Current()
		{
			.get instance !0 'System.Collections.Generic.IEnumerator`1'::get_Current()
		}
	}
	.class public interface abstract 'IEqualityComparer`1'<T>
	{
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(!0 x, !0 y)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode(!0 obj)
		{
		}
	}
	.class public interface abstract 'IList`1'<T>
		implements class 'System.Collections.Generic.ICollection`1'<!0>, class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance !0 get_Item(int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(int32 index, !0 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 IndexOf(!0 item)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Insert(int32 index, !0 item)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveAt(int32 index)
		{
		}
		.property instance !0 Item(int32)
		{
			.get instance !0 'System.Collections.Generic.IList`1'::get_Item(int32)
			.set instance void 'System.Collections.Generic.IList`1'::set_Item(int32, !0)
		}
	}
	.class public serializable KeyNotFoundException
		extends System.SystemException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sequential sealed serializable 'KeyValuePair`2'<TKey, TValue>
		extends System.ValueType
	{
		.method public hidebysig specialname 
			instance void .ctor(!0 key, !1 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance !0 get_Key()
		{
			ret
		}
		.method public hidebysig specialname 
			instance !1 get_Value()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance !0 Key()
		{
			.get instance !0 'System.Collections.Generic.KeyValuePair`2'::get_Key()
		}
		.property instance !1 Value()
		{
			.get instance !1 'System.Collections.Generic.KeyValuePair`2'::get_Value()
		}
	}
	.class public serializable 'List`1'<T>
		extends System.Object
		implements class 'System.Collections.Generic.IList`1'<!0>, class 'System.Collections.Generic.ICollection`1'<!0>, class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.class nested public sequential sealed serializable Enumerator<T>
			extends System.ValueType
			implements class 'System.Collections.Generic.IEnumerator`1'<!0>, System.IDisposable, System.Collections.IEnumerator
		{
			.method public final virtual hidebysig newslot 
				instance void Dispose()
			{
				ret
			}
			.method public final virtual hidebysig newslot 
				instance bool MoveNext()
			{
				ret
			}
			.method public final virtual hidebysig newslot specialname 
				instance !0 get_Current()
			{
				ret
			}
			.method private final virtual hidebysig newslot specialname 
				instance object System.Collections.IEnumerator.get_Current()
			{
				.override System.Collections.IEnumerator::get_Current
				ret
			}
			.method private final virtual hidebysig newslot 
				instance void System.Collections.IEnumerator.Reset()
			{
				.override System.Collections.IEnumerator::Reset
				ret
			}

			//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
			.field private int32 __Asmmeta_Private_Field
			.property instance !0 Current()
			{
				.get instance !0 'System.Collections.Generic.List`1'/Enumerator::get_Current()
			}
			.property instance object System.Collections.IEnumerator.Current()
			{
				.get instance object 'System.Collections.Generic.List`1'/Enumerator::System.Collections.IEnumerator.get_Current()
			}
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IEnumerable`1'<!0> collection)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsFixedSize()
		{
			.override System.Collections.IList::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool 'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::get_IsReadOnly()
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsReadOnly()
		{
			.override System.Collections.IList::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance !0 get_Item(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Item(int32 index, !0 'value')
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IList.get_Item(int32 index)
		{
			.override System.Collections.IList::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IList.set_Item(int32 index, object 'value')
		{
			.override System.Collections.IList::set_Item
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Add(!0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.Add(object item)
		{
			.override System.Collections.IList::Add
			ret
		}
		.method public hidebysig 
			instance void AddRange(class 'System.Collections.Generic.IEnumerable`1'<!0> collection)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.Collections.ObjectModel.ReadOnlyCollection`1'<!0> AsReadOnly()
		{
			ret
		}
		.method public hidebysig 
			instance int32 BinarySearch(int32 index, int32 count, !0 item, class 'System.Collections.Generic.IComparer`1'<!0> comparer)
		{
			ret
		}
		.method public hidebysig 
			instance int32 BinarySearch(!0 item)
		{
			ret
		}
		.method public hidebysig 
			instance int32 BinarySearch(!0 item, class 'System.Collections.Generic.IComparer`1'<!0> comparer)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Contains(!0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IList.Contains(object item)
		{
			.override System.Collections.IList::Contains
			ret
		}
		.method public hidebysig 
			instance class 'System.Collections.Generic.List`1'<!!0> ConvertAll<TOutput>(class 'System.Converter`2'<!0,!!0> converter)
		{
			ret
		}
		.method public hidebysig 
			instance void CopyTo(!0[] 'array')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 arrayIndex)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method public hidebysig 
			instance void CopyTo(int32 index, !0[] 'array', int32 arrayIndex, int32 count)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(!0[] 'array', int32 arrayIndex)
		{
			ret
		}
		.method public hidebysig 
			instance bool Exists(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance !0 Find(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.Collections.Generic.List`1'<!0> FindAll(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindIndex(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindIndex(int32 startIndex, class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindIndex(int32 startIndex, int32 count, class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance !0 FindLast(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindLastIndex(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindLastIndex(int32 startIndex, class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance int32 FindLastIndex(int32 startIndex, int32 count, class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public hidebysig 
			instance void ForEach(class 'System.Action`1'<!0> action)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype 'System.Collections.Generic.List`1'/Enumerator<!0> GetEnumerator()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class 'System.Collections.Generic.IEnumerator`1'<!0> 'System.Collections.Generic.IEnumerable<T>.GetEnumerator'()
		{
			.override method instance class 'System.Collections.Generic.IEnumerator`1'<!0> class 'System.Collections.Generic.IEnumerable`1'<!0>::GetEnumerator()
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method public hidebysig 
			instance class 'System.Collections.Generic.List`1'<!0> GetRange(int32 index, int32 count)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 IndexOf(!0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.IndexOf(object item)
		{
			.override System.Collections.IList::IndexOf
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(!0 item, int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance int32 IndexOf(!0 item, int32 index, int32 count)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Insert(int32 index, !0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Insert(int32 index, object item)
		{
			.override System.Collections.IList::Insert
			ret
		}
		.method public hidebysig 
			instance void InsertRange(int32 index, class 'System.Collections.Generic.IEnumerable`1'<!0> collection)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(!0 item)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(!0 item, int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LastIndexOf(!0 item, int32 index, int32 count)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Remove(!0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Remove(object item)
		{
			.override System.Collections.IList::Remove
			ret
		}
		.method public hidebysig 
			instance int32 RemoveAll(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RemoveAt(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveRange(int32 index, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance void Reverse()
		{
			ret
		}
		.method public hidebysig 
			instance void Reverse(int32 index, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance void Sort()
		{
			ret
		}
		.method public hidebysig 
			instance void Sort(class 'System.Collections.Generic.IComparer`1'<!0> comparer)
		{
			ret
		}
		.method public hidebysig 
			instance void Sort(int32 index, int32 count, class 'System.Collections.Generic.IComparer`1'<!0> comparer)
		{
			ret
		}
		.method public hidebysig 
			instance void Sort(class 'System.Comparison`1'<!0> comparison)
		{
			ret
		}
		.method public hidebysig 
			instance !0[] ToArray()
		{
			ret
		}
		.method public hidebysig 
			instance void TrimExcess()
		{
			ret
		}
		.method public hidebysig 
			instance bool TrueForAll(class 'System.Predicate`1'<!0> match)
		{
			ret
		}
		.property instance int32 Capacity()
		{
			.get instance int32 'System.Collections.Generic.List`1'::get_Capacity()
			.set instance void 'System.Collections.Generic.List`1'::set_Capacity(int32)
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.Collections.Generic.List`1'::get_Count()
		}
		.property instance !0 Item(int32)
		{
			.get instance !0 'System.Collections.Generic.List`1'::get_Item(int32)
			.set instance void 'System.Collections.Generic.List`1'::set_Item(int32, !0)
		}
		.property instance bool 'System.Collections.Generic.ICollection<T>.IsReadOnly'()
		{
			.get instance bool 'System.Collections.Generic.List`1'::'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool 'System.Collections.Generic.List`1'::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object 'System.Collections.Generic.List`1'::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IList.IsFixedSize()
		{
			.get instance bool 'System.Collections.Generic.List`1'::System.Collections.IList.get_IsFixedSize()
		}
		.property instance bool System.Collections.IList.IsReadOnly()
		{
			.get instance bool 'System.Collections.Generic.List`1'::System.Collections.IList.get_IsReadOnly()
		}
		.property instance object System.Collections.IList.Item(int32)
		{
			.get instance object 'System.Collections.Generic.List`1'::System.Collections.IList.get_Item(int32)
			.set instance void 'System.Collections.Generic.List`1'::System.Collections.IList.set_Item(int32, object)
		}
	}
}
.namespace System.Collections.ObjectModel
{
	.class public serializable 'Collection`1'<T>
		extends System.Object
		implements class 'System.Collections.Generic.IList`1'<!0>, class 'System.Collections.Generic.ICollection`1'<!0>, class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IList`1'<!0> list)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<!0> get_Items()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance !0 get_Item(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Item(int32 index, !0 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Add(!0 item)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(!0[] 'array', int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Contains(!0 item)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class 'System.Collections.Generic.IEnumerator`1'<!0> GetEnumerator()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 IndexOf(!0 item)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Insert(int32 index, !0 item)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Remove(!0 item)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RemoveAt(int32 index)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ClearItems()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void InsertItem(int32 index, !0 item)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void RemoveItem(int32 index)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetItem(int32 index, !0 item)
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool 'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::get_IsReadOnly()
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IList.get_Item(int32 index)
		{
			.override System.Collections.IList::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IList.set_Item(int32 index, object 'value')
		{
			.override System.Collections.IList::set_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsReadOnly()
		{
			.override System.Collections.IList::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsFixedSize()
		{
			.override System.Collections.IList::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.Add(object 'value')
		{
			.override System.Collections.IList::Add
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IList.Contains(object 'value')
		{
			.override System.Collections.IList::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.IndexOf(object 'value')
		{
			.override System.Collections.IList::IndexOf
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Insert(int32 index, object 'value')
		{
			.override System.Collections.IList::Insert
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Remove(object 'value')
		{
			.override System.Collections.IList::Remove
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.Collections.ObjectModel.Collection`1'::get_Count()
		}
		.property instance !0 Item(int32)
		{
			.get instance !0 'System.Collections.ObjectModel.Collection`1'::get_Item(int32)
			.set instance void 'System.Collections.ObjectModel.Collection`1'::set_Item(int32, !0)
		}
		.property instance class 'System.Collections.Generic.IList`1'<!0> Items()
		{
			.get instance class 'System.Collections.Generic.IList`1'<!0> 'System.Collections.ObjectModel.Collection`1'::get_Items()
		}
		.property instance bool 'System.Collections.Generic.ICollection<T>.IsReadOnly'()
		{
			.get instance bool 'System.Collections.ObjectModel.Collection`1'::'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool 'System.Collections.ObjectModel.Collection`1'::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object 'System.Collections.ObjectModel.Collection`1'::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IList.IsFixedSize()
		{
			.get instance bool 'System.Collections.ObjectModel.Collection`1'::System.Collections.IList.get_IsFixedSize()
		}
		.property instance bool System.Collections.IList.IsReadOnly()
		{
			.get instance bool 'System.Collections.ObjectModel.Collection`1'::System.Collections.IList.get_IsReadOnly()
		}
		.property instance object System.Collections.IList.Item(int32)
		{
			.get instance object 'System.Collections.ObjectModel.Collection`1'::System.Collections.IList.get_Item(int32)
			.set instance void 'System.Collections.ObjectModel.Collection`1'::System.Collections.IList.set_Item(int32, object)
		}
	}
	.class public abstract serializable 'KeyedCollection`2'<TKey, TItem>
		extends class 'System.Collections.ObjectModel.Collection`1'<!1>
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IEqualityComparer`1'<!0> comparer)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IEqualityComparer`1'<!0> comparer, int32 dictionaryCreationThreshold)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> get_Comparer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance !1 get_Item(!0 key)
		{
			ret
		}
		.method public hidebysig 
			instance bool Contains(!0 key)
		{
			ret
		}
		.method public hidebysig 
			instance bool Remove(!0 key)
		{
			ret
		}
		.method family hidebysig specialname 
			instance class 'System.Collections.Generic.IDictionary`2'<!0,!1> get_Dictionary()
		{
			ret
		}
		.method family hidebysig 
			instance void ChangeItemKey(!1 item, !0 newKey)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void ClearItems()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance !0 GetKeyForItem(!1 item)
		{
		}
		.method family virtual hidebysig 
			instance void InsertItem(int32 index, !1 item)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void RemoveItem(int32 index)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void SetItem(int32 index, !1 item)
		{
			ret
		}
		.property instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> Comparer()
		{
			.get instance class 'System.Collections.Generic.IEqualityComparer`1'<!0> 'System.Collections.ObjectModel.KeyedCollection`2'::get_Comparer()
		}
		.property instance class 'System.Collections.Generic.IDictionary`2'<!0,!1> Dictionary()
		{
			.get instance class 'System.Collections.Generic.IDictionary`2'<!0,!1> 'System.Collections.ObjectModel.KeyedCollection`2'::get_Dictionary()
		}
		.property instance !1 Item(!0)
		{
			.get instance !1 'System.Collections.ObjectModel.KeyedCollection`2'::get_Item(!0)
		}
	}
	.class public serializable 'ReadOnlyCollection`1'<T>
		extends System.Object
		implements class 'System.Collections.Generic.IList`1'<!0>, class 'System.Collections.Generic.ICollection`1'<!0>, class 'System.Collections.Generic.IEnumerable`1'<!0>, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.Collections.Generic.IList`1'<!0> list)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public hidebysig specialname 
			instance !0 get_Item(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Contains(!0 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(!0[] 'array', int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class 'System.Collections.Generic.IEnumerator`1'<!0> GetEnumerator()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 IndexOf(!0 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<!0> get_Items()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool 'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::get_IsReadOnly()
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance !0 'System.Collections.Generic.IList<T>.get_Item'(int32 index)
		{
			.override method instance !0 class 'System.Collections.Generic.IList`1'<!0>::get_Item(int32)
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void 'System.Collections.Generic.IList<T>.set_Item'(int32 index, !0 'value')
		{
			.override method instance void class 'System.Collections.Generic.IList`1'<!0>::set_Item(int32, !0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.ICollection<T>.Add'(!0 'value')
		{
			.override method instance void class 'System.Collections.Generic.ICollection`1'<!0>::Add(!0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.ICollection<T>.Clear'()
		{
			.override method instance void class 'System.Collections.Generic.ICollection`1'<!0>::Clear()
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.IList<T>.Insert'(int32 index, !0 'value')
		{
			.override method instance void class 'System.Collections.Generic.IList`1'<!0>::Insert(int32, !0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool 'System.Collections.Generic.ICollection<T>.Remove'(!0 'value')
		{
			.override method instance bool class 'System.Collections.Generic.ICollection`1'<!0>::Remove(!0)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void 'System.Collections.Generic.IList<T>.RemoveAt'(int32 index)
		{
			.override method instance void class 'System.Collections.Generic.IList`1'<!0>::RemoveAt(int32)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.ICollection.get_IsSynchronized()
		{
			.override System.Collections.ICollection::get_IsSynchronized
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.ICollection.get_SyncRoot()
		{
			.override System.Collections.ICollection::get_SyncRoot
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.ICollection.CopyTo(class System.Array 'array', int32 index)
		{
			.override System.Collections.ICollection::CopyTo
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsFixedSize()
		{
			.override System.Collections.IList::get_IsFixedSize
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Collections.IList.get_IsReadOnly()
		{
			.override System.Collections.IList::get_IsReadOnly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IList.get_Item(int32 index)
		{
			.override System.Collections.IList::get_Item
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance void System.Collections.IList.set_Item(int32 index, object 'value')
		{
			.override System.Collections.IList::set_Item
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.Add(object 'value')
		{
			.override System.Collections.IList::Add
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Clear()
		{
			.override System.Collections.IList::Clear
			ret
		}
		.method private final virtual hidebysig newslot 
			instance bool System.Collections.IList.Contains(object 'value')
		{
			.override System.Collections.IList::Contains
			ret
		}
		.method private final virtual hidebysig newslot 
			instance int32 System.Collections.IList.IndexOf(object 'value')
		{
			.override System.Collections.IList::IndexOf
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Insert(int32 index, object 'value')
		{
			.override System.Collections.IList::Insert
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.Remove(object 'value')
		{
			.override System.Collections.IList::Remove
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Collections.IList.RemoveAt(int32 index)
		{
			.override System.Collections.IList::RemoveAt
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 'System.Collections.ObjectModel.ReadOnlyCollection`1'::get_Count()
		}
		.property instance !0 Item(int32)
		{
			.get instance !0 'System.Collections.ObjectModel.ReadOnlyCollection`1'::get_Item(int32)
		}
		.property instance class 'System.Collections.Generic.IList`1'<!0> Items()
		{
			.get instance class 'System.Collections.Generic.IList`1'<!0> 'System.Collections.ObjectModel.ReadOnlyCollection`1'::get_Items()
		}
		.property instance bool 'System.Collections.Generic.ICollection<T>.IsReadOnly'()
		{
			.get instance bool 'System.Collections.ObjectModel.ReadOnlyCollection`1'::'System.Collections.Generic.ICollection<T>.get_IsReadOnly'()
		}
		.property instance !0 'System.Collections.Generic.IList<T>.Item'(int32)
		{
			.get instance !0 'System.Collections.ObjectModel.ReadOnlyCollection`1'::'System.Collections.Generic.IList<T>.get_Item'(int32)
			.set instance void 'System.Collections.ObjectModel.ReadOnlyCollection`1'::'System.Collections.Generic.IList<T>.set_Item'(int32, !0)
		}
		.property instance bool System.Collections.ICollection.IsSynchronized()
		{
			.get instance bool 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.ICollection.get_IsSynchronized()
		}
		.property instance object System.Collections.ICollection.SyncRoot()
		{
			.get instance object 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.ICollection.get_SyncRoot()
		}
		.property instance bool System.Collections.IList.IsFixedSize()
		{
			.get instance bool 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.IList.get_IsFixedSize()
		}
		.property instance bool System.Collections.IList.IsReadOnly()
		{
			.get instance bool 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.IList.get_IsReadOnly()
		}
		.property instance object System.Collections.IList.Item(int32)
		{
			.get instance object 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.IList.get_Item(int32)
			.set instance void 'System.Collections.ObjectModel.ReadOnlyCollection`1'::System.Collections.IList.set_Item(int32, object)
		}
	}
}
.namespace System.Configuration.Assemblies
{
	.class public sequential sealed serializable AssemblyHash
		extends System.ValueType
		implements System.ICloneable
	{
		.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8[] 'value')
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm 'algorithm', uint8[] 'value')
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm get_Algorithm()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Algorithm(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm 'value')
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetValue()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetValue(uint8[] 'value')
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.field static public initonly valuetype System.Configuration.Assemblies.AssemblyHash Empty
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm Algorithm()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 58 54 68 65 20 41 73 73 65 6D 62 6C 79 48 61 73 68 20 63 6C 61 73 73 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm System.Configuration.Assemblies.AssemblyHash::get_Algorithm()
			.set instance void System.Configuration.Assemblies.AssemblyHash::set_Algorithm(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm)
		}
	}
	.class public sealed serializable AssemblyHashAlgorithm
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm MD5 = int32(0x00008003)
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm None = int32(0x00000000)
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm 'SHA1' = int32(0x00008004)
	}
	.class public sealed serializable AssemblyVersionCompatibility
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility SameDomain = int32(0x00000003)
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility SameMachine = int32(0x00000001)
		.field static public literal valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility SameProcess = int32(0x00000002)
	}
}
.namespace System.Diagnostics
{
	.class public sealed serializable ConditionalAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 44 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string conditionString)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ConditionString()
		{
			ret
		}
		.property instance string ConditionString()
		{
			.get instance string System.Diagnostics.ConditionalAttribute::get_ConditionString()
		}
	}
	.class public sealed DebuggableAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 03 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.class nested public sealed DebuggingModes
			extends System.Enum
		{
			.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes Default = int32(0x00000001)
			.field static public literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes DisableOptimizations = int32(0x00000100)
			.field static public literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes EnableEditAndContinue = int32(0x00000004)
			.field static public literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes IgnoreSymbolStoreSequencePoints = int32(0x00000002)
			.field static public literal valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes None = int32(0x00000000)
		}
		.method public hidebysig specialname 
			instance void .ctor(bool isJITTrackingEnabled, bool isJITOptimizerDisabled)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes modes)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsJITTrackingEnabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsJITOptimizerDisabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes get_DebuggingFlags()
		{
			ret
		}
		.property instance valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes DebuggingFlags()
		{
			.get instance valuetype System.Diagnostics.DebuggableAttribute/DebuggingModes System.Diagnostics.DebuggableAttribute::get_DebuggingFlags()
		}
		.property instance bool IsJITOptimizerDisabled()
		{
			.get instance bool System.Diagnostics.DebuggableAttribute::get_IsJITOptimizerDisabled()
		}
		.property instance bool IsJITTrackingEnabled()
		{
			.get instance bool System.Diagnostics.DebuggableAttribute::get_IsJITTrackingEnabled()
		}
	}
	.class public sealed Debugger
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void Break()
		{
			ret
		}
		.method public static hidebysig 
			bool Launch()
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_IsAttached()
		{
			ret
		}
		.method public static hidebysig 
			void Log(int32 level, string category, string message)
			internalcall 
		{
		}
		.method public static hidebysig 
			bool IsLogging()
			internalcall 
		{
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly string DefaultCategory
		.property bool IsAttached()
		{
			.get bool System.Diagnostics.Debugger::get_IsAttached()
		}
	}
	.class public sealed DebuggerBrowsableAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 80 01 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Diagnostics.DebuggerBrowsableState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Diagnostics.DebuggerBrowsableState get_State()
		{
			ret
		}
		.property instance valuetype System.Diagnostics.DebuggerBrowsableState State()
		{
			.get instance valuetype System.Diagnostics.DebuggerBrowsableState System.Diagnostics.DebuggerBrowsableAttribute::get_State()
		}
	}
	.class public sealed DebuggerBrowsableState
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Diagnostics.DebuggerBrowsableState Collapsed = int32(0x00000002)
		.field static public literal valuetype System.Diagnostics.DebuggerBrowsableState Never = int32(0x00000000)
		.field static public literal valuetype System.Diagnostics.DebuggerBrowsableState RootHidden = int32(0x00000003)
	}
	.class public sealed DebuggerDisplayAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 9D 11 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Type()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Type(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Target(class System.Type 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TargetTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TargetTypeName(string 'value')
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Diagnostics.DebuggerDisplayAttribute::get_Name()
			.set instance void System.Diagnostics.DebuggerDisplayAttribute::set_Name(string)
		}
		.property instance class System.Type Target()
		{
			.get instance class System.Type System.Diagnostics.DebuggerDisplayAttribute::get_Target()
			.set instance void System.Diagnostics.DebuggerDisplayAttribute::set_Target(class System.Type)
		}
		.property instance string TargetTypeName()
		{
			.get instance string System.Diagnostics.DebuggerDisplayAttribute::get_TargetTypeName()
			.set instance void System.Diagnostics.DebuggerDisplayAttribute::set_TargetTypeName(string)
		}
		.property instance string Type()
		{
			.get instance string System.Diagnostics.DebuggerDisplayAttribute::get_Type()
			.set instance void System.Diagnostics.DebuggerDisplayAttribute::set_Type(string)
		}
		.property instance string Value()
		{
			.get instance string System.Diagnostics.DebuggerDisplayAttribute::get_Value()
		}
	}
	.class public sealed serializable DebuggerHiddenAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 E0 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable DebuggerNonUserCodeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 EC 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable DebuggerStepThroughAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6C 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable DebuggerStepperBoundaryAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 60 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed DebuggerTypeProxyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 0D 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string typeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ProxyTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Target(class System.Type 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TargetTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TargetTypeName(string 'value')
		{
			ret
		}
		.property instance string ProxyTypeName()
		{
			.get instance string System.Diagnostics.DebuggerTypeProxyAttribute::get_ProxyTypeName()
		}
		.property instance class System.Type Target()
		{
			.get instance class System.Type System.Diagnostics.DebuggerTypeProxyAttribute::get_Target()
			.set instance void System.Diagnostics.DebuggerTypeProxyAttribute::set_Target(class System.Type)
		}
		.property instance string TargetTypeName()
		{
			.get instance string System.Diagnostics.DebuggerTypeProxyAttribute::get_TargetTypeName()
			.set instance void System.Diagnostics.DebuggerTypeProxyAttribute::set_TargetTypeName(string)
		}
	}
	.class public sealed DebuggerVisualizerAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 0D 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string visualizerTypeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string visualizerTypeName, string visualizerObjectSourceTypeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string visualizerTypeName, class System.Type visualizerObjectSource)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type visualizer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type visualizer, class System.Type visualizerObjectSource)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type visualizer, string visualizerObjectSourceTypeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_VisualizerObjectSourceTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_VisualizerTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Description(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Target(class System.Type 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TargetTypeName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TargetTypeName()
		{
			ret
		}
		.property instance string Description()
		{
			.get instance string System.Diagnostics.DebuggerVisualizerAttribute::get_Description()
			.set instance void System.Diagnostics.DebuggerVisualizerAttribute::set_Description(string)
		}
		.property instance class System.Type Target()
		{
			.get instance class System.Type System.Diagnostics.DebuggerVisualizerAttribute::get_Target()
			.set instance void System.Diagnostics.DebuggerVisualizerAttribute::set_Target(class System.Type)
		}
		.property instance string TargetTypeName()
		{
			.get instance string System.Diagnostics.DebuggerVisualizerAttribute::get_TargetTypeName()
			.set instance void System.Diagnostics.DebuggerVisualizerAttribute::set_TargetTypeName(string)
		}
		.property instance string VisualizerObjectSourceTypeName()
		{
			.get instance string System.Diagnostics.DebuggerVisualizerAttribute::get_VisualizerObjectSourceTypeName()
		}
		.property instance string VisualizerTypeName()
		{
			.get instance string System.Diagnostics.DebuggerVisualizerAttribute::get_VisualizerTypeName()
		}
	}
	.class public serializable StackFrame
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 skipFrames)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 skipFrames, bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string fileName, int32 lineNumber)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string fileName, int32 lineNumber, int32 colNumber)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MethodBase GetMethod()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetNativeOffset()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetILOffset()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetFileName()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetFileLineNumber()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetFileColumnNumber()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.field static public literal int32 'OFFSET_UNKNOWN' = int32(0xFFFFFFFF)
	}
	.class public serializable StackTrace
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 skipFrames)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 skipFrames, bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception e)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception e, bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception e, int32 skipFrames)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception e, int32 skipFrames, bool fNeedFileInfo)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Diagnostics.StackFrame frame)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.Thread targetThread, bool needFileInfo)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_FrameCount()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Diagnostics.StackFrame GetFrame(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Diagnostics.StackFrame[] GetFrames()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.field static public literal int32 'METHODS_TO_SKIP' = int32(0x00000000)
		.property instance int32 FrameCount()
		{
			.get instance int32 System.Diagnostics.StackTrace::get_FrameCount()
		}
	}
}
.namespace System.Diagnostics.CodeAnalysis
{
	.class public sealed SuppressMessageAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 7F 00 00 02 00 54 02 09 49 6E 68 65 72 69 74 65 64 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 0D 43 4F 44 45 5F 41 4E 41 4C 59 53 49 53 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string category, string checkId)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Category()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CheckId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Scope()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Scope(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Target(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_MessageId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MessageId(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Justification()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Justification(string 'value')
		{
			ret
		}
		.property instance string Category()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_Category()
		}
		.property instance string CheckId()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_CheckId()
		}
		.property instance string Justification()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_Justification()
			.set instance void System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::set_Justification(string)
		}
		.property instance string MessageId()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_MessageId()
			.set instance void System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::set_MessageId(string)
		}
		.property instance string Scope()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_Scope()
			.set instance void System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::set_Scope(string)
		}
		.property instance string Target()
		{
			.get instance string System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::get_Target()
			.set instance void System.Diagnostics.CodeAnalysis.SuppressMessageAttribute::set_Target(string)
		}
	}
}
.namespace System.Diagnostics.SymbolStore
{
	.class public interface abstract ISymbolBinder
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolReader GetReader(int32 importer, string filename, string searchPath)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 81 03 54 68 65 20 72 65 63 6F 6D 6D 65 6E 64 65 64 20 61 6C 74 65 72 6E 61 74 69 76 65 20 69 73 20 49 53 79 6D 62 6F 6C 42 69 6E 64 65 72 31 2E 47 65 74 52 65 61 64 65 72 2E 20 49 53 79 6D 62 6F 6C 42 69 6E 64 65 72 31 2E 47 65 74 52 65 61 64 65 72 20 74 61 6B 65 73 20 74 68 65 20 69 6D 70 6F 72 74 65 72 20 69 6E 74 65 72 66 61 63 65 20 70 6F 69 6E 74 65 72 20 61 73 20 61 6E 20 49 6E 74 50 74 72 20 69 6E 73 74 65 61 64 20 6F 66 20 61 6E 20 49 6E 74 33 32 2C 20 61 6E 64 20 74 68 75 73 20 77 6F 72 6B 73 20 6F 6E 20 62 6F 74 68 20 33 32 2D 62 69 74 20 61 6E 64 20 36 34 2D 62 69 74 20 61 72 63 68 69 74 65 63 74 75 72 65 73 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 3D 31 34 32 30 32 00 00)
		}
	}
	.class public interface abstract ISymbolBinder1
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolReader GetReader(native int importer, string filename, string searchPath)
		{
		}
	}
	.class public interface abstract ISymbolDocument
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_URL()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_DocumentType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_Language()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_LanguageVendor()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_CheckSumAlgorithmId()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8[] GetCheckSum()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 FindClosestLine(int32 line)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_HasEmbeddedSource()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_SourceLength()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8[] GetSourceRange(int32 startLine, int32 startColumn, int32 endLine, int32 endColumn)
		{
		}
		.property instance valuetype System.Guid CheckSumAlgorithmId()
		{
			.get instance valuetype System.Guid System.Diagnostics.SymbolStore.ISymbolDocument::get_CheckSumAlgorithmId()
		}
		.property instance valuetype System.Guid DocumentType()
		{
			.get instance valuetype System.Guid System.Diagnostics.SymbolStore.ISymbolDocument::get_DocumentType()
		}
		.property instance bool HasEmbeddedSource()
		{
			.get instance bool System.Diagnostics.SymbolStore.ISymbolDocument::get_HasEmbeddedSource()
		}
		.property instance valuetype System.Guid Language()
		{
			.get instance valuetype System.Guid System.Diagnostics.SymbolStore.ISymbolDocument::get_Language()
		}
		.property instance valuetype System.Guid LanguageVendor()
		{
			.get instance valuetype System.Guid System.Diagnostics.SymbolStore.ISymbolDocument::get_LanguageVendor()
		}
		.property instance int32 SourceLength()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolDocument::get_SourceLength()
		}
		.property instance string URL()
		{
			.get instance string System.Diagnostics.SymbolStore.ISymbolDocument::get_URL()
		}
	}
	.class public interface abstract ISymbolDocumentWriter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void SetSource(uint8[] source)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetCheckSum(valuetype System.Guid algorithmId, uint8[] checkSum)
		{
		}
	}
	.class public interface abstract ISymbolMethod
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Diagnostics.SymbolStore.SymbolToken get_Token()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_SequencePointCount()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetSequencePoints(int32[] offsets, class System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int32[] lines, int32[] columns, int32[] endLines, int32[] endColumns)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Diagnostics.SymbolStore.ISymbolScope get_RootScope()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolScope GetScope(int32 offset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetOffset(class System.Diagnostics.SymbolStore.ISymbolDocument document, int32 line, int32 column)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32[] GetRanges(class System.Diagnostics.SymbolStore.ISymbolDocument document, int32 line, int32 column)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool GetSourceStartEnd(class System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int32[] lines, int32[] columns)
		{
		}
		.property instance class System.Diagnostics.SymbolStore.ISymbolScope RootScope()
		{
			.get instance class System.Diagnostics.SymbolStore.ISymbolScope System.Diagnostics.SymbolStore.ISymbolMethod::get_RootScope()
		}
		.property instance int32 SequencePointCount()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolMethod::get_SequencePointCount()
		}
		.property instance valuetype System.Diagnostics.SymbolStore.SymbolToken Token()
		{
			.get instance valuetype System.Diagnostics.SymbolStore.SymbolToken System.Diagnostics.SymbolStore.ISymbolMethod::get_Token()
		}
	}
	.class public interface abstract ISymbolNamespace
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables()
		{
		}
		.property instance string Name()
		{
			.get instance string System.Diagnostics.SymbolStore.ISymbolNamespace::get_Name()
		}
	}
	.class public interface abstract ISymbolReader
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolDocument GetDocument(string url, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolDocument[] GetDocuments()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Diagnostics.SymbolStore.SymbolToken get_UserEntryPoint()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolMethod GetMethod(valuetype System.Diagnostics.SymbolStore.SymbolToken 'method')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolMethod GetMethod(valuetype System.Diagnostics.SymbolStore.SymbolToken 'method', int32 version)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables(valuetype System.Diagnostics.SymbolStore.SymbolToken parent)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetGlobalVariables()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolMethod GetMethodFromDocumentPosition(class System.Diagnostics.SymbolStore.ISymbolDocument document, int32 line, int32 column)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8[] GetSymAttribute(valuetype System.Diagnostics.SymbolStore.SymbolToken parent, string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces()
		{
		}
		.property instance valuetype System.Diagnostics.SymbolStore.SymbolToken UserEntryPoint()
		{
			.get instance valuetype System.Diagnostics.SymbolStore.SymbolToken System.Diagnostics.SymbolStore.ISymbolReader::get_UserEntryPoint()
		}
	}
	.class public interface abstract ISymbolScope
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Diagnostics.SymbolStore.ISymbolMethod get_Method()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Diagnostics.SymbolStore.ISymbolScope get_Parent()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_StartOffset()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_EndOffset()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces()
		{
		}
		.property instance int32 EndOffset()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolScope::get_EndOffset()
		}
		.property instance class System.Diagnostics.SymbolStore.ISymbolMethod Method()
		{
			.get instance class System.Diagnostics.SymbolStore.ISymbolMethod System.Diagnostics.SymbolStore.ISymbolScope::get_Method()
		}
		.property instance class System.Diagnostics.SymbolStore.ISymbolScope Parent()
		{
			.get instance class System.Diagnostics.SymbolStore.ISymbolScope System.Diagnostics.SymbolStore.ISymbolScope::get_Parent()
		}
		.property instance int32 StartOffset()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolScope::get_StartOffset()
		}
	}
	.class public interface abstract ISymbolVariable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8[] GetSignature()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Diagnostics.SymbolStore.SymAddressKind get_AddressKind()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_AddressField1()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_AddressField2()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_AddressField3()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_StartOffset()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_EndOffset()
		{
		}
		.property instance int32 AddressField1()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolVariable::get_AddressField1()
		}
		.property instance int32 AddressField2()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolVariable::get_AddressField2()
		}
		.property instance int32 AddressField3()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolVariable::get_AddressField3()
		}
		.property instance valuetype System.Diagnostics.SymbolStore.SymAddressKind AddressKind()
		{
			.get instance valuetype System.Diagnostics.SymbolStore.SymAddressKind System.Diagnostics.SymbolStore.ISymbolVariable::get_AddressKind()
		}
		.property instance object Attributes()
		{
			.get instance object System.Diagnostics.SymbolStore.ISymbolVariable::get_Attributes()
		}
		.property instance int32 EndOffset()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolVariable::get_EndOffset()
		}
		.property instance string Name()
		{
			.get instance string System.Diagnostics.SymbolStore.ISymbolVariable::get_Name()
		}
		.property instance int32 StartOffset()
		{
			.get instance int32 System.Diagnostics.SymbolStore.ISymbolVariable::get_StartOffset()
		}
	}
	.class public interface abstract ISymbolWriter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Initialize(native int emitter, string filename, bool fFullBuild)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument(string url, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetUserEntryPoint(valuetype System.Diagnostics.SymbolStore.SymbolToken entryMethod)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void OpenMethod(valuetype System.Diagnostics.SymbolStore.SymbolToken 'method')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CloseMethod()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DefineSequencePoints(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int32[] offsets, int32[] lines, int32[] columns, int32[] endLines, int32[] endColumns)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 OpenScope(int32 startOffset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CloseScope(int32 endOffset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetScopeRange(int32 scopeID, int32 startOffset, int32 endOffset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DefineLocalVariable(string name, valuetype System.Reflection.FieldAttributes attributes, uint8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3, int32 startOffset, int32 endOffset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DefineParameter(string name, valuetype System.Reflection.ParameterAttributes attributes, int32 sequence, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DefineField(valuetype System.Diagnostics.SymbolStore.SymbolToken parent, string name, valuetype System.Reflection.FieldAttributes attributes, uint8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void DefineGlobalVariable(string name, valuetype System.Reflection.FieldAttributes attributes, uint8[] signature, valuetype System.Diagnostics.SymbolStore.SymAddressKind addrKind, int32 addr1, int32 addr2, int32 addr3)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Close()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetSymAttribute(valuetype System.Diagnostics.SymbolStore.SymbolToken parent, string name, uint8[] data)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void OpenNamespace(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CloseNamespace()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void UsingNamespace(string fullName)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetMethodSourceRange(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter startDoc, int32 startLine, int32 startColumn, class System.Diagnostics.SymbolStore.ISymbolDocumentWriter endDoc, int32 endLine, int32 endColumn)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetUnderlyingWriter(native int underlyingWriter)
		{
		}
	}
	.class public sealed serializable SymAddressKind
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind BitField = int32(0x00000009)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind ILOffset = int32(0x00000001)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeOffset = int32(0x00000005)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRVA = int32(0x00000002)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegister = int32(0x00000003)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterRegister = int32(0x00000006)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterRelative = int32(0x00000004)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeRegisterStack = int32(0x00000007)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeSectionOffset = int32(0x0000000A)
		.field static public literal valuetype System.Diagnostics.SymbolStore.SymAddressKind NativeStackRegister = int32(0x00000008)
	}
	.class public SymDocumentType
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly valuetype System.Guid Text
	}
	.class public SymLanguageType
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly valuetype System.Guid Basic
		.field static public initonly valuetype System.Guid C
		.field static public initonly valuetype System.Guid CPlusPlus
		.field static public initonly valuetype System.Guid CSharp
		.field static public initonly valuetype System.Guid Cobol
		.field static public initonly valuetype System.Guid ILAssembly
		.field static public initonly valuetype System.Guid JScript
		.field static public initonly valuetype System.Guid Java
		.field static public initonly valuetype System.Guid MCPlusPlus
		.field static public initonly valuetype System.Guid Pascal
		.field static public initonly valuetype System.Guid SMC
	}
	.class public SymLanguageVendor
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly valuetype System.Guid Microsoft
	}
	.class public sequential sealed SymbolToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 val)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetToken()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Diagnostics.SymbolStore.SymbolToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Diagnostics.SymbolStore.SymbolToken a, valuetype System.Diagnostics.SymbolStore.SymbolToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Diagnostics.SymbolStore.SymbolToken a, valuetype System.Diagnostics.SymbolStore.SymbolToken b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
}
.namespace System.Globalization
{
	.class public abstract serializable Calendar
		extends System.Object
		implements System.ICloneable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Globalization.Calendar ReadOnly(class System.Globalization.Calendar calendar)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddMilliseconds(valuetype System.DateTime time, float64 milliseconds)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddDays(valuetype System.DateTime time, int32 days)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddHours(valuetype System.DateTime time, int32 hours)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddMinutes(valuetype System.DateTime time, int32 minutes)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddSeconds(valuetype System.DateTime time, int32 seconds)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime AddWeeks(valuetype System.DateTime time, int32 weeks)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetDaysInMonth(int32 year, int32 month)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetDaysInYear(int32 year)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetEra(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32[] get_Eras()
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetHour(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance float64 GetMilliseconds(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetMinute(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetMonthsInYear(int32 year)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetSecond(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetYear(valuetype System.DateTime time)
		{
		}
		.method public virtual hidebysig newslot 
			instance bool IsLeapDay(int32 year, int32 month, int32 day)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
		}
		.method public virtual hidebysig newslot 
			instance bool IsLeapMonth(int32 year, int32 month)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetLeapMonth(int32 year)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsLeapYear(int32 year)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsLeapYear(int32 year, int32 era)
		{
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public literal int32 CurrentEra = int32(0x00000000)
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.Calendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.Calendar::get_Eras()
		}
		.property instance bool IsReadOnly()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Globalization.Calendar::get_IsReadOnly()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.Calendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.Calendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.Calendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.Calendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public sealed CalendarAlgorithmType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.CalendarAlgorithmType LunarCalendar = int32(0x00000002)
		.field static public literal valuetype System.Globalization.CalendarAlgorithmType LunisolarCalendar = int32(0x00000003)
		.field static public literal valuetype System.Globalization.CalendarAlgorithmType SolarCalendar = int32(0x00000001)
		.field static public literal valuetype System.Globalization.CalendarAlgorithmType Unknown = int32(0x00000000)
	}
	.class public sealed serializable CalendarWeekRule
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.CalendarWeekRule FirstDay = int32(0x00000000)
		.field static public literal valuetype System.Globalization.CalendarWeekRule FirstFourDayWeek = int32(0x00000002)
		.field static public literal valuetype System.Globalization.CalendarWeekRule FirstFullWeek = int32(0x00000001)
	}
	.class public sealed CharUnicodeInfo
		extends System.Object
	{
		.method public static hidebysig 
			float64 GetNumericValue(char ch)
		{
			ret
		}
		.method public static hidebysig 
			float64 GetNumericValue(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDecimalDigitValue(char ch)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDecimalDigitValue(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDigitValue(char ch)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDigitValue(string s, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char ch)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index)
		{
			ret
		}
	}
	.class public serializable ChineseLunisolarCalendar
		extends System.Globalization.EastAsianLunisolarCalendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.field static public literal int32 ChineseEra = int32(0x00000001)
		.property instance int32[] Eras()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32[] System.Globalization.ChineseLunisolarCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.ChineseLunisolarCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.ChineseLunisolarCalendar::get_MinSupportedDateTime()
		}
	}
	.class public serializable CompareInfo
		extends System.Object
		implements System.Runtime.Serialization.IDeserializationCallback
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CompareInfo GetCompareInfo(int32 culture)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CompareInfo GetCompareInfo(string name)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSortable(char ch)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool IsSortable(string text)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, string string2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsPrefix(string source, string prefix)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsSuffix(string source, string suffix)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value', valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value', valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value', int32 startIndex, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value', int32 startIndex, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, char 'value', int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(string source, string 'value', int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value', valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value', valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value', int32 startIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value', int32 startIndex, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value', int32 startIndex, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, char 'value', int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 LastIndexOf(string source, string 'value', int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Globalization.SortKey GetSortKey(string source)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_LCID()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender)
		{
			.override System.Runtime.Serialization.IDeserializationCallback::OnDeserialization
			ret
		}
		.property instance int32 'LCID'()
		{
			.get instance int32 System.Globalization.CompareInfo::get_LCID()
		}
		.property instance string Name()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.CompareInfo::get_Name()
		}
	}
	.class public sealed serializable CompareOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.CompareOptions IgnoreCase = int32(0x00000001)
		.field static public literal valuetype System.Globalization.CompareOptions IgnoreKanaType = int32(0x00000008)
		.field static public literal valuetype System.Globalization.CompareOptions IgnoreNonSpace = int32(0x00000002)
		.field static public literal valuetype System.Globalization.CompareOptions IgnoreSymbols = int32(0x00000004)
		.field static public literal valuetype System.Globalization.CompareOptions IgnoreWidth = int32(0x00000010)
		.field static public literal valuetype System.Globalization.CompareOptions None = int32(0x00000000)
		.field static public literal valuetype System.Globalization.CompareOptions Ordinal = int32(0x40000000)
		.field static public literal valuetype System.Globalization.CompareOptions OrdinalIgnoreCase = int32(0x10000000)
		.field static public literal valuetype System.Globalization.CompareOptions StringSort = int32(0x20000000)
	}
	.class public serializable CultureInfo
		extends System.Object
		implements System.ICloneable, System.IFormatProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, bool useUserOverride)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 culture)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 culture, bool useUserOverride)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo CreateSpecificCulture(string name)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.CultureInfo get_CurrentCulture()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.CultureInfo get_CurrentUICulture()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.CultureInfo get_InstalledUICulture()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.CultureInfo get_InvariantCulture()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.CultureInfo get_Parent()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_LCID()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_KeyboardLayoutId()
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_IetfLanguageTag()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_DisplayName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_NativeName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_EnglishName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_TwoLetterISOLanguageName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ThreeLetterISOLanguageName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ThreeLetterWindowsLanguageName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.CompareInfo get_CompareInfo()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.TextInfo get_TextInfo()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetFormat(class System.Type formatType)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsNeutralCulture()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Globalization.CultureTypes get_CultureTypes()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.NumberFormatInfo get_NumberFormat()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_NumberFormat(class System.Globalization.NumberFormatInfo 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.DateTimeFormatInfo get_DateTimeFormat()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_DateTimeFormat(class System.Globalization.DateTimeFormatInfo 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void ClearCachedData()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.Calendar get_Calendar()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Globalization.Calendar[] get_OptionalCalendars()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UseUserOverride()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo GetCultureInfo(int32 culture)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo GetCultureInfo(string name)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo GetCultureInfo(string name, string altName)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name)
		{
			ret
		}
		.property instance class System.Globalization.Calendar Calendar()
		{
			.get instance class System.Globalization.Calendar System.Globalization.CultureInfo::get_Calendar()
		}
		.property instance class System.Globalization.CompareInfo CompareInfo()
		{
			.get instance class System.Globalization.CompareInfo System.Globalization.CultureInfo::get_CompareInfo()
		}
		.property instance valuetype System.Globalization.CultureTypes CultureTypes()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CultureTypes System.Globalization.CultureInfo::get_CultureTypes()
		}
		.property class System.Globalization.CultureInfo CurrentCulture()
		{
			.get class System.Globalization.CultureInfo System.Globalization.CultureInfo::get_CurrentCulture()
		}
		.property class System.Globalization.CultureInfo CurrentUICulture()
		{
			.get class System.Globalization.CultureInfo System.Globalization.CultureInfo::get_CurrentUICulture()
		}
		.property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat()
		{
			.get instance class System.Globalization.DateTimeFormatInfo System.Globalization.CultureInfo::get_DateTimeFormat()
			.set instance void System.Globalization.CultureInfo::set_DateTimeFormat(class System.Globalization.DateTimeFormatInfo)
		}
		.property instance string DisplayName()
		{
			.get instance string System.Globalization.CultureInfo::get_DisplayName()
		}
		.property instance string EnglishName()
		{
			.get instance string System.Globalization.CultureInfo::get_EnglishName()
		}
		.property instance string IetfLanguageTag()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.CultureInfo::get_IetfLanguageTag()
		}
		.property class System.Globalization.CultureInfo InstalledUICulture()
		{
			.get class System.Globalization.CultureInfo System.Globalization.CultureInfo::get_InstalledUICulture()
		}
		.property class System.Globalization.CultureInfo InvariantCulture()
		{
			.get class System.Globalization.CultureInfo System.Globalization.CultureInfo::get_InvariantCulture()
		}
		.property instance bool IsNeutralCulture()
		{
			.get instance bool System.Globalization.CultureInfo::get_IsNeutralCulture()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Globalization.CultureInfo::get_IsReadOnly()
		}
		.property instance int32 KeyboardLayoutId()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 System.Globalization.CultureInfo::get_KeyboardLayoutId()
		}
		.property instance int32 'LCID'()
		{
			.get instance int32 System.Globalization.CultureInfo::get_LCID()
		}
		.property instance string Name()
		{
			.get instance string System.Globalization.CultureInfo::get_Name()
		}
		.property instance string NativeName()
		{
			.get instance string System.Globalization.CultureInfo::get_NativeName()
		}
		.property instance class System.Globalization.NumberFormatInfo NumberFormat()
		{
			.get instance class System.Globalization.NumberFormatInfo System.Globalization.CultureInfo::get_NumberFormat()
			.set instance void System.Globalization.CultureInfo::set_NumberFormat(class System.Globalization.NumberFormatInfo)
		}
		.property instance class System.Globalization.Calendar[] OptionalCalendars()
		{
			.get instance class System.Globalization.Calendar[] System.Globalization.CultureInfo::get_OptionalCalendars()
		}
		.property instance class System.Globalization.CultureInfo Parent()
		{
			.get instance class System.Globalization.CultureInfo System.Globalization.CultureInfo::get_Parent()
		}
		.property instance class System.Globalization.TextInfo TextInfo()
		{
			.get instance class System.Globalization.TextInfo System.Globalization.CultureInfo::get_TextInfo()
		}
		.property instance string ThreeLetterISOLanguageName()
		{
			.get instance string System.Globalization.CultureInfo::get_ThreeLetterISOLanguageName()
		}
		.property instance string ThreeLetterWindowsLanguageName()
		{
			.get instance string System.Globalization.CultureInfo::get_ThreeLetterWindowsLanguageName()
		}
		.property instance string TwoLetterISOLanguageName()
		{
			.get instance string System.Globalization.CultureInfo::get_TwoLetterISOLanguageName()
		}
		.property instance bool UseUserOverride()
		{
			.get instance bool System.Globalization.CultureInfo::get_UseUserOverride()
		}
	}
	.class public sealed serializable CultureTypes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.CultureTypes AllCultures = int32(0x00000007)
		.field static public literal valuetype System.Globalization.CultureTypes FrameworkCultures = int32(0x00000040)
		.field static public literal valuetype System.Globalization.CultureTypes InstalledWin32Cultures = int32(0x00000004)
		.field static public literal valuetype System.Globalization.CultureTypes NeutralCultures = int32(0x00000001)
		.field static public literal valuetype System.Globalization.CultureTypes ReplacementCultures = int32(0x00000010)
		.field static public literal valuetype System.Globalization.CultureTypes SpecificCultures = int32(0x00000002)
		.field static public literal valuetype System.Globalization.CultureTypes UserCustomCulture = int32(0x00000008)
		.field static public literal valuetype System.Globalization.CultureTypes WindowsOnlyCultures = int32(0x00000020)
	}
	.class public sealed serializable DateTimeFormatInfo
		extends System.Object
		implements System.ICloneable, System.IFormatProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.DateTimeFormatInfo get_InvariantInfo()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.DateTimeFormatInfo get_CurrentInfo()
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetFormat(class System.Type formatType)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AMDesignator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AMDesignator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Globalization.Calendar get_Calendar()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Calendar(class System.Globalization.Calendar 'value')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetEra(string eraName)
		{
			ret
		}
		.method public hidebysig 
			instance string GetEraName(int32 era)
		{
			ret
		}
		.method public hidebysig 
			instance string GetAbbreviatedEraName(int32 era)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DateSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DateSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DayOfWeek get_FirstDayOfWeek()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FirstDayOfWeek(valuetype System.DayOfWeek 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Globalization.CalendarWeekRule get_CalendarWeekRule()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CalendarWeekRule(valuetype System.Globalization.CalendarWeekRule 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FullDateTimePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FullDateTimePattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_LongDatePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LongDatePattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_LongTimePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LongTimePattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_MonthDayPattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MonthDayPattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PMDesignator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PMDesignator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_RFC1123Pattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ShortDatePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ShortDatePattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ShortTimePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ShortTimePattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_SortableDateTimePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TimeSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TimeSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_UniversalSortableDateTimePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_YearMonthPattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_YearMonthPattern(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_AbbreviatedDayNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AbbreviatedDayNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_ShortestDayNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ShortestDayNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_DayNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DayNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_AbbreviatedMonthNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AbbreviatedMonthNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_MonthNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MonthNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig 
			instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek)
		{
			ret
		}
		.method public hidebysig 
			instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance string[] GetAllDateTimePatterns()
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetAllDateTimePatterns(char format)
		{
			ret
		}
		.method public hidebysig 
			instance string GetDayName(valuetype System.DayOfWeek dayofweek)
		{
			ret
		}
		.method public hidebysig 
			instance string GetAbbreviatedMonthName(int32 month)
		{
			ret
		}
		.method public hidebysig 
			instance string GetMonthName(int32 month)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NativeCalendarName()
		{
			ret
		}
		.method public hidebysig 
			instance void SetAllDateTimePatterns(string[] patterns, char format)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_AbbreviatedMonthGenitiveNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AbbreviatedMonthGenitiveNames(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_MonthGenitiveNames()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MonthGenitiveNames(string[] 'value')
		{
			ret
		}
		.property instance string AMDesignator()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_AMDesignator()
			.set instance void System.Globalization.DateTimeFormatInfo::set_AMDesignator(string)
		}
		.property instance string[] AbbreviatedDayNames()
		{
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_AbbreviatedDayNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_AbbreviatedDayNames(string[])
		}
		.property instance string[] AbbreviatedMonthGenitiveNames()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_AbbreviatedMonthGenitiveNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_AbbreviatedMonthGenitiveNames(string[])
		}
		.property instance string[] AbbreviatedMonthNames()
		{
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_AbbreviatedMonthNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_AbbreviatedMonthNames(string[])
		}
		.property instance class System.Globalization.Calendar Calendar()
		{
			.get instance class System.Globalization.Calendar System.Globalization.DateTimeFormatInfo::get_Calendar()
			.set instance void System.Globalization.DateTimeFormatInfo::set_Calendar(class System.Globalization.Calendar)
		}
		.property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule()
		{
			.get instance valuetype System.Globalization.CalendarWeekRule System.Globalization.DateTimeFormatInfo::get_CalendarWeekRule()
			.set instance void System.Globalization.DateTimeFormatInfo::set_CalendarWeekRule(valuetype System.Globalization.CalendarWeekRule)
		}
		.property class System.Globalization.DateTimeFormatInfo CurrentInfo()
		{
			.get class System.Globalization.DateTimeFormatInfo System.Globalization.DateTimeFormatInfo::get_CurrentInfo()
		}
		.property instance string DateSeparator()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_DateSeparator()
			.set instance void System.Globalization.DateTimeFormatInfo::set_DateSeparator(string)
		}
		.property instance string[] DayNames()
		{
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_DayNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_DayNames(string[])
		}
		.property instance valuetype System.DayOfWeek FirstDayOfWeek()
		{
			.get instance valuetype System.DayOfWeek System.Globalization.DateTimeFormatInfo::get_FirstDayOfWeek()
			.set instance void System.Globalization.DateTimeFormatInfo::set_FirstDayOfWeek(valuetype System.DayOfWeek)
		}
		.property instance string FullDateTimePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_FullDateTimePattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_FullDateTimePattern(string)
		}
		.property class System.Globalization.DateTimeFormatInfo InvariantInfo()
		{
			.get class System.Globalization.DateTimeFormatInfo System.Globalization.DateTimeFormatInfo::get_InvariantInfo()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Globalization.DateTimeFormatInfo::get_IsReadOnly()
		}
		.property instance string LongDatePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_LongDatePattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_LongDatePattern(string)
		}
		.property instance string LongTimePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_LongTimePattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_LongTimePattern(string)
		}
		.property instance string MonthDayPattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_MonthDayPattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_MonthDayPattern(string)
		}
		.property instance string[] MonthGenitiveNames()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_MonthGenitiveNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_MonthGenitiveNames(string[])
		}
		.property instance string[] MonthNames()
		{
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_MonthNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_MonthNames(string[])
		}
		.property instance string NativeCalendarName()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.DateTimeFormatInfo::get_NativeCalendarName()
		}
		.property instance string PMDesignator()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_PMDesignator()
			.set instance void System.Globalization.DateTimeFormatInfo::set_PMDesignator(string)
		}
		.property instance string RFC1123Pattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_RFC1123Pattern()
		}
		.property instance string ShortDatePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_ShortDatePattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_ShortDatePattern(string)
		}
		.property instance string ShortTimePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_ShortTimePattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_ShortTimePattern(string)
		}
		.property instance string[] ShortestDayNames()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string[] System.Globalization.DateTimeFormatInfo::get_ShortestDayNames()
			.set instance void System.Globalization.DateTimeFormatInfo::set_ShortestDayNames(string[])
		}
		.property instance string SortableDateTimePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_SortableDateTimePattern()
		}
		.property instance string TimeSeparator()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_TimeSeparator()
			.set instance void System.Globalization.DateTimeFormatInfo::set_TimeSeparator(string)
		}
		.property instance string UniversalSortableDateTimePattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_UniversalSortableDateTimePattern()
		}
		.property instance string YearMonthPattern()
		{
			.get instance string System.Globalization.DateTimeFormatInfo::get_YearMonthPattern()
			.set instance void System.Globalization.DateTimeFormatInfo::set_YearMonthPattern(string)
		}
	}
	.class public sealed serializable DateTimeStyles
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.DateTimeStyles AdjustToUniversal = int32(0x00000010)
		.field static public literal valuetype System.Globalization.DateTimeStyles AllowInnerWhite = int32(0x00000004)
		.field static public literal valuetype System.Globalization.DateTimeStyles AllowLeadingWhite = int32(0x00000001)
		.field static public literal valuetype System.Globalization.DateTimeStyles AllowTrailingWhite = int32(0x00000002)
		.field static public literal valuetype System.Globalization.DateTimeStyles AllowWhiteSpaces = int32(0x00000007)
		.field static public literal valuetype System.Globalization.DateTimeStyles AssumeLocal = int32(0x00000020)
		.field static public literal valuetype System.Globalization.DateTimeStyles AssumeUniversal = int32(0x00000040)
		.field static public literal valuetype System.Globalization.DateTimeStyles NoCurrentDateDefault = int32(0x00000008)
		.field static public literal valuetype System.Globalization.DateTimeStyles None = int32(0x00000000)
		.field static public literal valuetype System.Globalization.DateTimeStyles RoundtripKind = int32(0x00000080)
	}
	.class public serializable DaylightTime
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime start, valuetype System.DateTime end, valuetype System.TimeSpan delta)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Start()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_End()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.TimeSpan get_Delta()
		{
			ret
		}
		.property instance valuetype System.TimeSpan Delta()
		{
			.get instance valuetype System.TimeSpan System.Globalization.DaylightTime::get_Delta()
		}
		.property instance valuetype System.DateTime End()
		{
			.get instance valuetype System.DateTime System.Globalization.DaylightTime::get_End()
		}
		.property instance valuetype System.DateTime Start()
		{
			.get instance valuetype System.DateTime System.Globalization.DaylightTime::get_Start()
		}
	}
	.class public sealed serializable DigitShapes
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.DigitShapes Context = int32(0x00000000)
		.field static public literal valuetype System.Globalization.DigitShapes NativeNational = int32(0x00000002)
		.field static public literal valuetype System.Globalization.DigitShapes None = int32(0x00000001)
	}
	.class public abstract serializable EastAsianLunisolarCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetSexagenaryYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetCelestialStem(int32 sexagenaryYear)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTerrestrialBranch(int32 sexagenaryYear)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.EastAsianLunisolarCalendar::get_AlgorithmType()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.EastAsianLunisolarCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.EastAsianLunisolarCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable GregorianCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Globalization.GregorianCalendarTypes 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Globalization.GregorianCalendarTypes get_CalendarType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_CalendarType(valuetype System.Globalization.GregorianCalendarTypes 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public literal int32 ADEra = int32(0x00000001)
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.GregorianCalendar::get_AlgorithmType()
		}
		.property instance valuetype System.Globalization.GregorianCalendarTypes CalendarType()
		{
			.get instance valuetype System.Globalization.GregorianCalendarTypes System.Globalization.GregorianCalendar::get_CalendarType()
			.set instance void System.Globalization.GregorianCalendar::set_CalendarType(valuetype System.Globalization.GregorianCalendarTypes)
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.GregorianCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.GregorianCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.GregorianCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.GregorianCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.GregorianCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public sealed serializable GregorianCalendarTypes
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes Arabic = int32(0x0000000A)
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes Localized = int32(0x00000001)
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes MiddleEastFrench = int32(0x00000009)
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes TransliteratedEnglish = int32(0x0000000B)
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes TransliteratedFrench = int32(0x0000000C)
		.field static public literal valuetype System.Globalization.GregorianCalendarTypes USEnglish = int32(0x00000002)
	}
	.class public serializable HebrewCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public initonly int32 HebrewEra
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.HebrewCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.HebrewCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.HebrewCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.HebrewCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.HebrewCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.HebrewCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable HijriCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_HijriAdjustment()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_HijriAdjustment(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public initonly int32 HijriEra
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.HijriCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.HijriCalendar::get_Eras()
		}
		.property instance int32 HijriAdjustment()
		{
			.get instance int32 System.Globalization.HijriCalendar::get_HijriAdjustment()
			.set instance void System.Globalization.HijriCalendar::set_HijriAdjustment(int32)
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.HijriCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.HijriCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.HijriCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.HijriCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public sealed IdnMapping
		extends System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AllowUnassigned()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllowUnassigned(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UseStd3AsciiRules()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UseStd3AsciiRules(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance string GetAscii(string 'unicode')
		{
			ret
		}
		.method public hidebysig 
			instance string GetAscii(string 'unicode', int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance string GetAscii(string 'unicode', int32 index, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance string GetUnicode(string ascii)
		{
			ret
		}
		.method public hidebysig 
			instance string GetUnicode(string ascii, int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance string GetUnicode(string ascii, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance bool AllowUnassigned()
		{
			.get instance bool System.Globalization.IdnMapping::get_AllowUnassigned()
			.set instance void System.Globalization.IdnMapping::set_AllowUnassigned(bool)
		}
		.property instance bool UseStd3AsciiRules()
		{
			.get instance bool System.Globalization.IdnMapping::get_UseStd3AsciiRules()
			.set instance void System.Globalization.IdnMapping::set_UseStd3AsciiRules(bool)
		}
	}
	.class public serializable JapaneseCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.JapaneseCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.JapaneseCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.JapaneseCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.JapaneseCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.JapaneseCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.JapaneseCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable JapaneseLunisolarCalendar
		extends System.Globalization.EastAsianLunisolarCalendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.field static public literal int32 JapaneseEra = int32(0x00000001)
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.JapaneseLunisolarCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.JapaneseLunisolarCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.JapaneseLunisolarCalendar::get_MinSupportedDateTime()
		}
	}
	.class public serializable JulianCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public initonly int32 JulianEra
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.JulianCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.JulianCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.JulianCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.JulianCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.JulianCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.JulianCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable KoreanCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public literal int32 KoreanEra = int32(0x00000001)
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.KoreanCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.KoreanCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.KoreanCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.KoreanCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.KoreanCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.KoreanCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable KoreanLunisolarCalendar
		extends System.Globalization.EastAsianLunisolarCalendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.field static public literal int32 GregorianEra = int32(0x00000001)
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.KoreanLunisolarCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.KoreanLunisolarCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.KoreanLunisolarCalendar::get_MinSupportedDateTime()
		}
	}
	.class public sealed serializable NumberFormatInfo
		extends System.Object
		implements System.ICloneable, System.IFormatProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.NumberFormatInfo get_InvariantInfo()
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CurrencyDecimalDigits()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyDecimalDigits(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CurrencyDecimalSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyDecimalSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32[] get_CurrencyGroupSizes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyGroupSizes(int32[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32[] get_NumberGroupSizes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NumberGroupSizes(int32[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32[] get_PercentGroupSizes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentGroupSizes(int32[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CurrencyGroupSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyGroupSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CurrencySymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencySymbol(string 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.NumberFormatInfo get_CurrentInfo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NaNSymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NaNSymbol(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CurrencyNegativePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyNegativePattern(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_NumberNegativePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NumberNegativePattern(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_PercentPositivePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentPositivePattern(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_PercentNegativePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentNegativePattern(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NegativeInfinitySymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NegativeInfinitySymbol(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NegativeSign()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NegativeSign(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_NumberDecimalDigits()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NumberDecimalDigits(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NumberDecimalSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NumberDecimalSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NumberGroupSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NumberGroupSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CurrencyPositivePattern()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrencyPositivePattern(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PositiveInfinitySymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PositiveInfinitySymbol(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PositiveSign()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PositiveSign(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_PercentDecimalDigits()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentDecimalDigits(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PercentDecimalSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentDecimalSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PercentGroupSeparator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentGroupSeparator(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PercentSymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PercentSymbol(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PerMilleSymbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PerMilleSymbol(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_NativeDigits()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_NativeDigits(string[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Globalization.DigitShapes get_DigitSubstitution()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DigitSubstitution(valuetype System.Globalization.DigitShapes 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetFormat(class System.Type formatType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi)
		{
			ret
		}
		.property instance int32 CurrencyDecimalDigits()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_CurrencyDecimalDigits()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyDecimalDigits(int32)
		}
		.property instance string CurrencyDecimalSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_CurrencyDecimalSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyDecimalSeparator(string)
		}
		.property instance string CurrencyGroupSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_CurrencyGroupSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyGroupSeparator(string)
		}
		.property instance int32[] CurrencyGroupSizes()
		{
			.get instance int32[] System.Globalization.NumberFormatInfo::get_CurrencyGroupSizes()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyGroupSizes(int32[])
		}
		.property instance int32 CurrencyNegativePattern()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_CurrencyNegativePattern()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyNegativePattern(int32)
		}
		.property instance int32 CurrencyPositivePattern()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_CurrencyPositivePattern()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencyPositivePattern(int32)
		}
		.property instance string CurrencySymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_CurrencySymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_CurrencySymbol(string)
		}
		.property class System.Globalization.NumberFormatInfo CurrentInfo()
		{
			.get class System.Globalization.NumberFormatInfo System.Globalization.NumberFormatInfo::get_CurrentInfo()
		}
		.property instance valuetype System.Globalization.DigitShapes DigitSubstitution()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.DigitShapes System.Globalization.NumberFormatInfo::get_DigitSubstitution()
			.set instance void System.Globalization.NumberFormatInfo::set_DigitSubstitution(valuetype System.Globalization.DigitShapes)
		}
		.property class System.Globalization.NumberFormatInfo InvariantInfo()
		{
			.get class System.Globalization.NumberFormatInfo System.Globalization.NumberFormatInfo::get_InvariantInfo()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Globalization.NumberFormatInfo::get_IsReadOnly()
		}
		.property instance string NaNSymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_NaNSymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_NaNSymbol(string)
		}
		.property instance string[] NativeDigits()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string[] System.Globalization.NumberFormatInfo::get_NativeDigits()
			.set instance void System.Globalization.NumberFormatInfo::set_NativeDigits(string[])
		}
		.property instance string NegativeInfinitySymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_NegativeInfinitySymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_NegativeInfinitySymbol(string)
		}
		.property instance string NegativeSign()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_NegativeSign()
			.set instance void System.Globalization.NumberFormatInfo::set_NegativeSign(string)
		}
		.property instance int32 NumberDecimalDigits()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_NumberDecimalDigits()
			.set instance void System.Globalization.NumberFormatInfo::set_NumberDecimalDigits(int32)
		}
		.property instance string NumberDecimalSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_NumberDecimalSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_NumberDecimalSeparator(string)
		}
		.property instance string NumberGroupSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_NumberGroupSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_NumberGroupSeparator(string)
		}
		.property instance int32[] NumberGroupSizes()
		{
			.get instance int32[] System.Globalization.NumberFormatInfo::get_NumberGroupSizes()
			.set instance void System.Globalization.NumberFormatInfo::set_NumberGroupSizes(int32[])
		}
		.property instance int32 NumberNegativePattern()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_NumberNegativePattern()
			.set instance void System.Globalization.NumberFormatInfo::set_NumberNegativePattern(int32)
		}
		.property instance string PerMilleSymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PerMilleSymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_PerMilleSymbol(string)
		}
		.property instance int32 PercentDecimalDigits()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_PercentDecimalDigits()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentDecimalDigits(int32)
		}
		.property instance string PercentDecimalSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PercentDecimalSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentDecimalSeparator(string)
		}
		.property instance string PercentGroupSeparator()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PercentGroupSeparator()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentGroupSeparator(string)
		}
		.property instance int32[] PercentGroupSizes()
		{
			.get instance int32[] System.Globalization.NumberFormatInfo::get_PercentGroupSizes()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentGroupSizes(int32[])
		}
		.property instance int32 PercentNegativePattern()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_PercentNegativePattern()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentNegativePattern(int32)
		}
		.property instance int32 PercentPositivePattern()
		{
			.get instance int32 System.Globalization.NumberFormatInfo::get_PercentPositivePattern()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentPositivePattern(int32)
		}
		.property instance string PercentSymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PercentSymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_PercentSymbol(string)
		}
		.property instance string PositiveInfinitySymbol()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PositiveInfinitySymbol()
			.set instance void System.Globalization.NumberFormatInfo::set_PositiveInfinitySymbol(string)
		}
		.property instance string PositiveSign()
		{
			.get instance string System.Globalization.NumberFormatInfo::get_PositiveSign()
			.set instance void System.Globalization.NumberFormatInfo::set_PositiveSign(string)
		}
	}
	.class public sealed serializable NumberStyles
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.NumberStyles AllowCurrencySymbol = int32(0x00000100)
		.field static public literal valuetype System.Globalization.NumberStyles AllowDecimalPoint = int32(0x00000020)
		.field static public literal valuetype System.Globalization.NumberStyles AllowExponent = int32(0x00000080)
		.field static public literal valuetype System.Globalization.NumberStyles AllowHexSpecifier = int32(0x00000200)
		.field static public literal valuetype System.Globalization.NumberStyles AllowLeadingSign = int32(0x00000004)
		.field static public literal valuetype System.Globalization.NumberStyles AllowLeadingWhite = int32(0x00000001)
		.field static public literal valuetype System.Globalization.NumberStyles AllowParentheses = int32(0x00000010)
		.field static public literal valuetype System.Globalization.NumberStyles AllowThousands = int32(0x00000040)
		.field static public literal valuetype System.Globalization.NumberStyles AllowTrailingSign = int32(0x00000008)
		.field static public literal valuetype System.Globalization.NumberStyles AllowTrailingWhite = int32(0x00000002)
		.field static public literal valuetype System.Globalization.NumberStyles Any = int32(0x000001FF)
		.field static public literal valuetype System.Globalization.NumberStyles Currency = int32(0x0000017F)
		.field static public literal valuetype System.Globalization.NumberStyles Float = int32(0x000000A7)
		.field static public literal valuetype System.Globalization.NumberStyles HexNumber = int32(0x00000203)
		.field static public literal valuetype System.Globalization.NumberStyles Integer = int32(0x00000007)
		.field static public literal valuetype System.Globalization.NumberStyles None = int32(0x00000000)
		.field static public literal valuetype System.Globalization.NumberStyles Number = int32(0x0000006F)
	}
	.class public serializable PersianCalendar
		extends System.Globalization.Calendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public initonly int32 PersianEra
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.PersianCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.PersianCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.PersianCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.PersianCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.PersianCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.PersianCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable RegionInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 culture)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Globalization.RegionInfo get_CurrentRegion()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_EnglishName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_DisplayName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_NativeName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_TwoLetterISORegionName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ThreeLetterISORegionName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsMetric()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_GeoId()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ThreeLetterWindowsRegionName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_CurrencyEnglishName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_CurrencyNativeName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_CurrencySymbol()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ISOCurrencySymbol()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string CurrencyEnglishName()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.RegionInfo::get_CurrencyEnglishName()
		}
		.property instance string CurrencyNativeName()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.RegionInfo::get_CurrencyNativeName()
		}
		.property instance string CurrencySymbol()
		{
			.get instance string System.Globalization.RegionInfo::get_CurrencySymbol()
		}
		.property class System.Globalization.RegionInfo CurrentRegion()
		{
			.get class System.Globalization.RegionInfo System.Globalization.RegionInfo::get_CurrentRegion()
		}
		.property instance string DisplayName()
		{
			.get instance string System.Globalization.RegionInfo::get_DisplayName()
		}
		.property instance string EnglishName()
		{
			.get instance string System.Globalization.RegionInfo::get_EnglishName()
		}
		.property instance int32 GeoId()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 System.Globalization.RegionInfo::get_GeoId()
		}
		.property instance string ISOCurrencySymbol()
		{
			.get instance string System.Globalization.RegionInfo::get_ISOCurrencySymbol()
		}
		.property instance bool IsMetric()
		{
			.get instance bool System.Globalization.RegionInfo::get_IsMetric()
		}
		.property instance string Name()
		{
			.get instance string System.Globalization.RegionInfo::get_Name()
		}
		.property instance string NativeName()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.RegionInfo::get_NativeName()
		}
		.property instance string ThreeLetterISORegionName()
		{
			.get instance string System.Globalization.RegionInfo::get_ThreeLetterISORegionName()
		}
		.property instance string ThreeLetterWindowsRegionName()
		{
			.get instance string System.Globalization.RegionInfo::get_ThreeLetterWindowsRegionName()
		}
		.property instance string TwoLetterISORegionName()
		{
			.get instance string System.Globalization.RegionInfo::get_TwoLetterISORegionName()
		}
	}
	.class public serializable SortKey
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance string get_OriginalString()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint8[] get_KeyData()
		{
			ret
		}
		.method public static hidebysig 
			int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance uint8[] KeyData()
		{
			.get instance uint8[] System.Globalization.SortKey::get_KeyData()
		}
		.property instance string OriginalString()
		{
			.get instance string System.Globalization.SortKey::get_OriginalString()
		}
	}
	.class public serializable StringInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance string get_String()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_String(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_LengthInTextElements()
		{
			ret
		}
		.method public hidebysig 
			instance string SubstringByTextElements(int32 startingTextElement)
		{
			ret
		}
		.method public hidebysig 
			instance string SubstringByTextElements(int32 startingTextElement, int32 lengthInTextElements)
		{
			ret
		}
		.method public static hidebysig 
			string GetNextTextElement(string str)
		{
			ret
		}
		.method public static hidebysig 
			string GetNextTextElement(string str, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str)
		{
			ret
		}
		.method public static hidebysig 
			class System.Globalization.TextElementEnumerator GetTextElementEnumerator(string str, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			int32[] ParseCombiningCharacters(string str)
		{
			ret
		}
		.property instance int32 LengthInTextElements()
		{
			.get instance int32 System.Globalization.StringInfo::get_LengthInTextElements()
		}
		.property instance string String()
		{
			.get instance string System.Globalization.StringInfo::get_String()
			.set instance void System.Globalization.StringInfo::set_String(string)
		}
	}
	.class public serializable TaiwanCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.TaiwanCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.TaiwanCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.TaiwanCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.TaiwanCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.TaiwanCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.TaiwanCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable TaiwanLunisolarCalendar
		extends System.Globalization.EastAsianLunisolarCalendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.TaiwanLunisolarCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.TaiwanLunisolarCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.TaiwanLunisolarCalendar::get_MinSupportedDateTime()
		}
	}
	.class public serializable TextElementEnumerator
		extends System.Object
		implements System.Collections.IEnumerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance bool MoveNext()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_Current()
		{
			ret
		}
		.method public hidebysig 
			instance string GetTextElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ElementIndex()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Reset()
		{
			ret
		}
		.property instance object Current()
		{
			.get instance object System.Globalization.TextElementEnumerator::get_Current()
		}
		.property instance int32 ElementIndex()
		{
			.get instance int32 System.Globalization.TextElementEnumerator::get_ElementIndex()
		}
	}
	.class public serializable TextInfo
		extends System.Object
		implements System.ICloneable, System.Runtime.Serialization.IDeserializationCallback
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ANSICodePage()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_OEMCodePage()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_MacCodePage()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_EBCDICCodePage()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_LCID()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CultureName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Globalization.TextInfo ReadOnly(class System.Globalization.TextInfo textInfo)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ListSeparator()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ListSeparator(string 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance char ToLower(char c)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ToLower(string str)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance char ToUpper(char c)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ToUpper(string str)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToTitleCase(string str)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsRightToLeft()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender)
		{
			.override System.Runtime.Serialization.IDeserializationCallback::OnDeserialization
			ret
		}
		.property instance int32 ANSICodePage()
		{
			.get instance int32 System.Globalization.TextInfo::get_ANSICodePage()
		}
		.property instance string CultureName()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Globalization.TextInfo::get_CultureName()
		}
		.property instance int32 EBCDICCodePage()
		{
			.get instance int32 System.Globalization.TextInfo::get_EBCDICCodePage()
		}
		.property instance bool IsReadOnly()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Globalization.TextInfo::get_IsReadOnly()
		}
		.property instance bool IsRightToLeft()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Globalization.TextInfo::get_IsRightToLeft()
		}
		.property instance int32 'LCID'()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 System.Globalization.TextInfo::get_LCID()
		}
		.property instance string ListSeparator()
		{
			.get instance string System.Globalization.TextInfo::get_ListSeparator()
			.set instance void System.Globalization.TextInfo::set_ListSeparator(string)
		}
		.property instance int32 MacCodePage()
		{
			.get instance int32 System.Globalization.TextInfo::get_MacCodePage()
		}
		.property instance int32 OEMCodePage()
		{
			.get instance int32 System.Globalization.TextInfo::get_OEMCodePage()
		}
	}
	.class public serializable ThaiBuddhistCalendar
		extends System.Globalization.Calendar
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetWeekOfYear(valuetype System.DateTime time, valuetype System.Globalization.CalendarWeekRule rule, valuetype System.DayOfWeek firstDayOfWeek)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public literal int32 ThaiBuddhistEra = int32(0x00000001)
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.ThaiBuddhistCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.ThaiBuddhistCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.ThaiBuddhistCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime System.Globalization.ThaiBuddhistCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.ThaiBuddhistCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.ThaiBuddhistCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public serializable UmAlQuraCalendar
		extends System.Globalization.Calendar
	{
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MinSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.DateTime get_MaxSupportedDateTime()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Globalization.CalendarAlgorithmType get_AlgorithmType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddMonths(valuetype System.DateTime time, int32 months)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime AddYears(valuetype System.DateTime time, int32 years)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DayOfWeek GetDayOfWeek(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDayOfYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetDaysInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetEra(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32[] get_Eras()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonth(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMonthsInYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetYear(valuetype System.DateTime time)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapDay(int32 year, int32 month, int32 day, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetLeapMonth(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapMonth(int32 year, int32 month, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsLeapYear(int32 year, int32 era)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.DateTime ToDateTime(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, int32 era)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_TwoDigitYearMax()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_TwoDigitYearMax(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ToFourDigitYear(int32 year)
		{
			ret
		}
		.field static public literal int32 UmAlQuraEra = int32(0x00000001)
		.property instance valuetype System.Globalization.CalendarAlgorithmType AlgorithmType()
		{
			.get instance valuetype System.Globalization.CalendarAlgorithmType System.Globalization.UmAlQuraCalendar::get_AlgorithmType()
		}
		.property instance int32[] Eras()
		{
			.get instance int32[] System.Globalization.UmAlQuraCalendar::get_Eras()
		}
		.property instance valuetype System.DateTime MaxSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.UmAlQuraCalendar::get_MaxSupportedDateTime()
		}
		.property instance valuetype System.DateTime MinSupportedDateTime()
		{
			.get instance valuetype System.DateTime System.Globalization.UmAlQuraCalendar::get_MinSupportedDateTime()
		}
		.property instance int32 TwoDigitYearMax()
		{
			.get instance int32 System.Globalization.UmAlQuraCalendar::get_TwoDigitYearMax()
			.set instance void System.Globalization.UmAlQuraCalendar::set_TwoDigitYearMax(int32)
		}
	}
	.class public sealed serializable UnicodeCategory
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Globalization.UnicodeCategory ClosePunctuation = int32(0x00000015)
		.field static public literal valuetype System.Globalization.UnicodeCategory ConnectorPunctuation = int32(0x00000012)
		.field static public literal valuetype System.Globalization.UnicodeCategory Control = int32(0x0000000E)
		.field static public literal valuetype System.Globalization.UnicodeCategory CurrencySymbol = int32(0x0000001A)
		.field static public literal valuetype System.Globalization.UnicodeCategory DashPunctuation = int32(0x00000013)
		.field static public literal valuetype System.Globalization.UnicodeCategory DecimalDigitNumber = int32(0x00000008)
		.field static public literal valuetype System.Globalization.UnicodeCategory EnclosingMark = int32(0x00000007)
		.field static public literal valuetype System.Globalization.UnicodeCategory FinalQuotePunctuation = int32(0x00000017)
		.field static public literal valuetype System.Globalization.UnicodeCategory Format = int32(0x0000000F)
		.field static public literal valuetype System.Globalization.UnicodeCategory InitialQuotePunctuation = int32(0x00000016)
		.field static public literal valuetype System.Globalization.UnicodeCategory LetterNumber = int32(0x00000009)
		.field static public literal valuetype System.Globalization.UnicodeCategory LineSeparator = int32(0x0000000C)
		.field static public literal valuetype System.Globalization.UnicodeCategory LowercaseLetter = int32(0x00000001)
		.field static public literal valuetype System.Globalization.UnicodeCategory MathSymbol = int32(0x00000019)
		.field static public literal valuetype System.Globalization.UnicodeCategory ModifierLetter = int32(0x00000003)
		.field static public literal valuetype System.Globalization.UnicodeCategory ModifierSymbol = int32(0x0000001B)
		.field static public literal valuetype System.Globalization.UnicodeCategory NonSpacingMark = int32(0x00000005)
		.field static public literal valuetype System.Globalization.UnicodeCategory OpenPunctuation = int32(0x00000014)
		.field static public literal valuetype System.Globalization.UnicodeCategory OtherLetter = int32(0x00000004)
		.field static public literal valuetype System.Globalization.UnicodeCategory OtherNotAssigned = int32(0x0000001D)
		.field static public literal valuetype System.Globalization.UnicodeCategory OtherNumber = int32(0x0000000A)
		.field static public literal valuetype System.Globalization.UnicodeCategory OtherPunctuation = int32(0x00000018)
		.field static public literal valuetype System.Globalization.UnicodeCategory OtherSymbol = int32(0x0000001C)
		.field static public literal valuetype System.Globalization.UnicodeCategory ParagraphSeparator = int32(0x0000000D)
		.field static public literal valuetype System.Globalization.UnicodeCategory PrivateUse = int32(0x00000011)
		.field static public literal valuetype System.Globalization.UnicodeCategory SpaceSeparator = int32(0x0000000B)
		.field static public literal valuetype System.Globalization.UnicodeCategory SpacingCombiningMark = int32(0x00000006)
		.field static public literal valuetype System.Globalization.UnicodeCategory Surrogate = int32(0x00000010)
		.field static public literal valuetype System.Globalization.UnicodeCategory TitlecaseLetter = int32(0x00000002)
		.field static public literal valuetype System.Globalization.UnicodeCategory UppercaseLetter = int32(0x00000000)
	}
}
.namespace 'System.IO'
{
	.class public BinaryReader
		extends System.Object
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' input)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' input, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'System.IO.Stream' get_BaseStream()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 PeekChar()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Read()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool ReadBoolean()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int8 ReadSByte()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance char ReadChar()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int16 ReadInt16()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint16 ReadUInt16()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 ReadInt32()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint32 ReadUInt32()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int64 ReadInt64()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint64 ReadUInt64()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance float32 ReadSingle()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance float64 ReadDouble()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.Decimal ReadDecimal()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ReadString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Read(char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance char[] ReadChars(int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Read(uint8[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] ReadBytes(int32 count)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void FillBuffer(int32 numBytes)
		{
			ret
		}
		.method famorassem hidebysig 
			instance int32 Read7BitEncodedInt()
		{
			ret
		}
		.property instance class 'System.IO.Stream' BaseStream()
		{
			.get instance class 'System.IO.Stream' 'System.IO.BinaryReader'::get_BaseStream()
		}
	}
	.class public serializable BinaryWriter
		extends System.Object
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' output)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' output, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'System.IO.Stream' get_BaseStream()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int64 Seek(int32 offset, valuetype 'System.IO.SeekOrigin' origin)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint8[] buffer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint8[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char ch)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char[] chars)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(float64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int16 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(float32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string 'value')
		{
			ret
		}
		.method family hidebysig 
			instance void Write7BitEncodedInt(int32 'value')
		{
			ret
		}
		.field static public initonly class 'System.IO.BinaryWriter' Null
		.field family class 'System.IO.Stream' OutStream
		.property instance class 'System.IO.Stream' BaseStream()
		{
			.get instance class 'System.IO.Stream' 'System.IO.BinaryWriter'::get_BaseStream()
		}
	}
	.class public sealed BufferedStream
		extends 'System.IO.Stream'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', int32 bufferSize)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] uint8[] 'array', int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] 'array', int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' origin)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.BufferedStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.BufferedStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.BufferedStream'::get_CanWrite()
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.BufferedStream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.BufferedStream'::get_Position()
			.set instance void 'System.IO.BufferedStream'::set_Position(int64)
		}
	}
	.class public abstract sealed Directory
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class 'System.IO.DirectoryInfo' GetParent(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.DirectoryInfo' CreateDirectory(string path)
		{
			ret
		}
		.method public static hidebysig 
			bool Exists(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetCreationTime(string path, valuetype System.DateTime creationTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetCreationTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetCreationTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastWriteTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastWriteTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastAccessTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastAccessTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetFiles(string path)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetFiles(string path, string searchPattern)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetFiles(string path, string searchPattern, valuetype 'System.IO.SearchOption' searchOption)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetDirectories(string path)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetDirectories(string path, string searchPattern)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetDirectories(string path, string searchPattern, valuetype 'System.IO.SearchOption' searchOption)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetFileSystemEntries(string path)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetFileSystemEntries(string path, string searchPattern)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetLogicalDrives()
		{
			ret
		}
		.method public static hidebysig 
			string GetDirectoryRoot(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetCurrentDirectory()
		{
			ret
		}
		.method public static hidebysig 
			void SetCurrentDirectory(string path)
		{
			ret
		}
		.method public static hidebysig 
			void Move(string sourceDirName, string destDirName)
		{
			ret
		}
		.method public static hidebysig 
			void Delete(string path)
		{
			ret
		}
		.method public static hidebysig 
			void Delete(string path, bool recursive)
		{
			ret
		}
	}
	.class public sealed serializable DirectoryInfo
		extends 'System.IO.FileSystemInfo'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string path)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.IO.DirectoryInfo' get_Parent()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.DirectoryInfo' CreateSubdirectory(string path)
		{
			ret
		}
		.method public hidebysig 
			instance void Create()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_Exists()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo'[] GetFiles(string searchPattern)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo'[] GetFiles(string searchPattern, valuetype 'System.IO.SearchOption' searchOption)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo'[] GetFiles()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.DirectoryInfo'[] GetDirectories()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileSystemInfo'[] GetFileSystemInfos(string searchPattern)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileSystemInfo'[] GetFileSystemInfos()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.DirectoryInfo'[] GetDirectories(string searchPattern)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.DirectoryInfo'[] GetDirectories(string searchPattern, valuetype 'System.IO.SearchOption' searchOption)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.IO.DirectoryInfo' get_Root()
		{
			ret
		}
		.method public hidebysig 
			instance void MoveTo(string destDirName)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Delete()
		{
			ret
		}
		.method public hidebysig 
			instance void Delete(bool recursive)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance bool Exists()
		{
			.get instance bool 'System.IO.DirectoryInfo'::get_Exists()
		}
		.property instance string Name()
		{
			.get instance string 'System.IO.DirectoryInfo'::get_Name()
		}
		.property instance class 'System.IO.DirectoryInfo' Parent()
		{
			.get instance class 'System.IO.DirectoryInfo' 'System.IO.DirectoryInfo'::get_Parent()
		}
		.property instance class 'System.IO.DirectoryInfo' Root()
		{
			.get instance class 'System.IO.DirectoryInfo' 'System.IO.DirectoryInfo'::get_Root()
		}
	}
	.class public serializable DirectoryNotFoundException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable DriveInfo
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string driveName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'System.IO.DriveType' get_DriveType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DriveFormat()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReady()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_AvailableFreeSpace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_TotalFreeSpace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_TotalSize()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.DriveInfo'[] GetDrives()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.IO.DirectoryInfo' get_RootDirectory()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_VolumeLabel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_VolumeLabel(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.property instance int64 AvailableFreeSpace()
		{
			.get instance int64 'System.IO.DriveInfo'::get_AvailableFreeSpace()
		}
		.property instance string DriveFormat()
		{
			.get instance string 'System.IO.DriveInfo'::get_DriveFormat()
		}
		.property instance valuetype 'System.IO.DriveType' DriveType()
		{
			.get instance valuetype 'System.IO.DriveType' 'System.IO.DriveInfo'::get_DriveType()
		}
		.property instance bool IsReady()
		{
			.get instance bool 'System.IO.DriveInfo'::get_IsReady()
		}
		.property instance string Name()
		{
			.get instance string 'System.IO.DriveInfo'::get_Name()
		}
		.property instance class 'System.IO.DirectoryInfo' RootDirectory()
		{
			.get instance class 'System.IO.DirectoryInfo' 'System.IO.DriveInfo'::get_RootDirectory()
		}
		.property instance int64 TotalFreeSpace()
		{
			.get instance int64 'System.IO.DriveInfo'::get_TotalFreeSpace()
		}
		.property instance int64 TotalSize()
		{
			.get instance int64 'System.IO.DriveInfo'::get_TotalSize()
		}
		.property instance string VolumeLabel()
		{
			.get instance string 'System.IO.DriveInfo'::get_VolumeLabel()
			.set instance void 'System.IO.DriveInfo'::set_VolumeLabel(string)
		}
	}
	.class public serializable DriveNotFoundException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable DriveType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.DriveType' CDRom = int32(0x00000005)
		.field static public literal valuetype 'System.IO.DriveType' Fixed = int32(0x00000003)
		.field static public literal valuetype 'System.IO.DriveType' Network = int32(0x00000004)
		.field static public literal valuetype 'System.IO.DriveType' NoRootDirectory = int32(0x00000001)
		.field static public literal valuetype 'System.IO.DriveType' Ram = int32(0x00000006)
		.field static public literal valuetype 'System.IO.DriveType' Removable = int32(0x00000002)
		.field static public literal valuetype 'System.IO.DriveType' Unknown = int32(0x00000000)
	}
	.class public serializable EndOfStreamException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract sealed File
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class 'System.IO.StreamReader' OpenText(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.StreamWriter' CreateText(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.StreamWriter' AppendText(string path)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(string sourceFileName, string destFileName)
		{
			ret
		}
		.method public static hidebysig 
			void Copy(string sourceFileName, string destFileName, bool overwrite)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Create(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Create(string path, int32 bufferSize)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Create(string path, int32 bufferSize, valuetype 'System.IO.FileOptions' options)
		{
			ret
		}
		.method public static hidebysig 
			void Delete(string path)
		{
			ret
		}
		.method public static hidebysig 
			void Decrypt(string path)
		{
			ret
		}
		.method public static hidebysig 
			void Encrypt(string path)
		{
			ret
		}
		.method public static hidebysig 
			bool Exists(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Open(string path, valuetype 'System.IO.FileMode' mode)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Open(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' Open(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share)
		{
			ret
		}
		.method public static hidebysig 
			void SetCreationTime(string path, valuetype System.DateTime creationTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetCreationTimeUtc(string path, valuetype System.DateTime creationTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetCreationTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetCreationTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastAccessTime(string path, valuetype System.DateTime lastAccessTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastAccessTimeUtc(string path, valuetype System.DateTime lastAccessTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastAccessTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastAccessTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastWriteTime(string path, valuetype System.DateTime lastWriteTime)
		{
			ret
		}
		.method public static hidebysig 
			void SetLastWriteTimeUtc(string path, valuetype System.DateTime lastWriteTimeUtc)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastWriteTime(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime GetLastWriteTimeUtc(string path)
		{
			ret
		}
		.method public static hidebysig 
			valuetype 'System.IO.FileAttributes' GetAttributes(string path)
		{
			ret
		}
		.method public static hidebysig 
			void SetAttributes(string path, valuetype 'System.IO.FileAttributes' fileAttributes)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' OpenRead(string path)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.FileStream' OpenWrite(string path)
		{
			ret
		}
		.method public static hidebysig 
			string ReadAllText(string path)
		{
			ret
		}
		.method public static hidebysig 
			string ReadAllText(string path, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public static hidebysig 
			void WriteAllText(string path, string contents)
		{
			ret
		}
		.method public static hidebysig 
			void WriteAllText(string path, string contents, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public static hidebysig 
			uint8[] ReadAllBytes(string path)
		{
			ret
		}
		.method public static hidebysig 
			void WriteAllBytes(string path, uint8[] bytes)
		{
			ret
		}
		.method public static hidebysig 
			string[] ReadAllLines(string path)
		{
			ret
		}
		.method public static hidebysig 
			string[] ReadAllLines(string path, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public static hidebysig 
			void WriteAllLines(string path, string[] contents)
		{
			ret
		}
		.method public static hidebysig 
			void WriteAllLines(string path, string[] contents, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public static hidebysig 
			void AppendAllText(string path, string contents)
		{
			ret
		}
		.method public static hidebysig 
			void AppendAllText(string path, string contents, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public static hidebysig 
			void Move(string sourceFileName, string destFileName)
		{
			ret
		}
		.method public static hidebysig 
			void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName)
		{
			ret
		}
		.method public static hidebysig 
			void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors)
		{
			ret
		}
	}
	.class public sealed serializable FileAccess
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.FileAccess' Read = int32(0x00000001)
		.field static public literal valuetype 'System.IO.FileAccess' ReadWrite = int32(0x00000003)
		.field static public literal valuetype 'System.IO.FileAccess' Write = int32(0x00000002)
	}
	.class public sealed serializable FileAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.FileAttributes' Archive = int32(0x00000020)
		.field static public literal valuetype 'System.IO.FileAttributes' Compressed = int32(0x00000800)
		.field static public literal valuetype 'System.IO.FileAttributes' Device = int32(0x00000040)
		.field static public literal valuetype 'System.IO.FileAttributes' Directory = int32(0x00000010)
		.field static public literal valuetype 'System.IO.FileAttributes' Encrypted = int32(0x00004000)
		.field static public literal valuetype 'System.IO.FileAttributes' Hidden = int32(0x00000002)
		.field static public literal valuetype 'System.IO.FileAttributes' Normal = int32(0x00000080)
		.field static public literal valuetype 'System.IO.FileAttributes' NotContentIndexed = int32(0x00002000)
		.field static public literal valuetype 'System.IO.FileAttributes' Offline = int32(0x00001000)
		.field static public literal valuetype 'System.IO.FileAttributes' ReadOnly = int32(0x00000001)
		.field static public literal valuetype 'System.IO.FileAttributes' ReparsePoint = int32(0x00000400)
		.field static public literal valuetype 'System.IO.FileAttributes' SparseFile = int32(0x00000200)
		.field static public literal valuetype 'System.IO.FileAttributes' System = int32(0x00000004)
		.field static public literal valuetype 'System.IO.FileAttributes' Temporary = int32(0x00000100)
	}
	.class public sealed serializable FileInfo
		extends 'System.IO.FileSystemInfo'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string fileName)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DirectoryName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.IO.DirectoryInfo' get_Directory()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsReadOnly(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.StreamReader' OpenText()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.StreamWriter' CreateText()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.StreamWriter' AppendText()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo' CopyTo(string destFileName)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo' CopyTo(string destFileName, bool overwrite)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' Create()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Delete()
		{
			ret
		}
		.method public hidebysig 
			instance void Decrypt()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void Encrypt()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_Exists()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' Open(valuetype 'System.IO.FileMode' mode)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' Open(valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' Open(valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' OpenRead()
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileStream' OpenWrite()
		{
			ret
		}
		.method public hidebysig 
			instance void MoveTo(string destFileName)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo' Replace(string destinationFileName, string destinationBackupFileName)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.FileInfo' Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class 'System.IO.DirectoryInfo' Directory()
		{
			.get instance class 'System.IO.DirectoryInfo' 'System.IO.FileInfo'::get_Directory()
		}
		.property instance string DirectoryName()
		{
			.get instance string 'System.IO.FileInfo'::get_DirectoryName()
		}
		.property instance bool Exists()
		{
			.get instance bool 'System.IO.FileInfo'::get_Exists()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool 'System.IO.FileInfo'::get_IsReadOnly()
			.set instance void 'System.IO.FileInfo'::set_IsReadOnly(bool)
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.FileInfo'::get_Length()
		}
		.property instance string Name()
		{
			.get instance string 'System.IO.FileInfo'::get_Name()
		}
	}
	.class public serializable FileLoadException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName, class System.Exception inner)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FileName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FusionLog()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string FileName()
		{
			.get instance string 'System.IO.FileLoadException'::get_FileName()
		}
		.property instance string FusionLog()
		{
			.get instance string 'System.IO.FileLoadException'::get_FusionLog()
		}
		.property instance string Message()
		{
			.get instance string 'System.IO.FileLoadException'::get_Message()
		}
	}
	.class public sealed serializable FileMode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.FileMode' Append = int32(0x00000006)
		.field static public literal valuetype 'System.IO.FileMode' Create = int32(0x00000002)
		.field static public literal valuetype 'System.IO.FileMode' CreateNew = int32(0x00000001)
		.field static public literal valuetype 'System.IO.FileMode' Open = int32(0x00000003)
		.field static public literal valuetype 'System.IO.FileMode' OpenOrCreate = int32(0x00000004)
		.field static public literal valuetype 'System.IO.FileMode' Truncate = int32(0x00000005)
	}
	.class public serializable FileNotFoundException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string fileName, class System.Exception innerException)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Message()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FileName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FusionLog()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string FileName()
		{
			.get instance string 'System.IO.FileNotFoundException'::get_FileName()
		}
		.property instance string FusionLog()
		{
			.get instance string 'System.IO.FileNotFoundException'::get_FusionLog()
		}
		.property instance string Message()
		{
			.get instance string 'System.IO.FileNotFoundException'::get_Message()
		}
	}
	.class public sealed serializable FileOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.FileOptions' Asynchronous = int32(0x40000000)
		.field static public literal valuetype 'System.IO.FileOptions' DeleteOnClose = int32(0x04000000)
		.field static public literal valuetype 'System.IO.FileOptions' Encrypted = int32(0x00004000)
		.field static public literal valuetype 'System.IO.FileOptions' None = int32(0x00000000)
		.field static public literal valuetype 'System.IO.FileOptions' RandomAccess = int32(0x10000000)
		.field static public literal valuetype 'System.IO.FileOptions' SequentialScan = int32(0x08000000)
		.field static public literal valuetype 'System.IO.FileOptions' WriteThrough = int32(0x80000000)
	}
	.class public sealed serializable FileShare
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.FileShare' Delete = int32(0x00000004)
		.field static public literal valuetype 'System.IO.FileShare' Inheritable = int32(0x00000010)
		.field static public literal valuetype 'System.IO.FileShare' None = int32(0x00000000)
		.field static public literal valuetype 'System.IO.FileShare' Read = int32(0x00000001)
		.field static public literal valuetype 'System.IO.FileShare' ReadWrite = int32(0x00000003)
		.field static public literal valuetype 'System.IO.FileShare' Write = int32(0x00000002)
	}
	.class public FileStream
		extends 'System.IO.Stream'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, int32 bufferSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, int32 bufferSize, valuetype 'System.IO.FileOptions' options)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, int32 bufferSize, bool useAsync)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(native int handle, valuetype 'System.IO.FileAccess' access)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 A1 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6E 65 77 20 46 69 6C 65 53 74 72 65 61 6D 28 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 68 61 6E 64 6C 65 2C 20 46 69 6C 65 41 63 63 65 73 73 20 61 63 63 65 73 73 29 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(native int handle, valuetype 'System.IO.FileAccess' access, bool ownsHandle)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 EB 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6E 65 77 20 46 69 6C 65 53 74 72 65 61 6D 28 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 68 61 6E 64 6C 65 2C 20 46 69 6C 65 41 63 63 65 73 73 20 61 63 63 65 73 73 29 20 69 6E 73 74 65 61 64 2C 20 61 6E 64 20 6F 70 74 69 6F 6E 61 6C 6C 79 20 6D 61 6B 65 20 61 20 6E 65 77 20 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 77 69 74 68 20 6F 77 6E 73 48 61 6E 64 6C 65 3D 66 61 6C 73 65 20 69 66 20 6E 65 65 64 65 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(native int handle, valuetype 'System.IO.FileAccess' access, bool ownsHandle, int32 bufferSize)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 FB 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6E 65 77 20 46 69 6C 65 53 74 72 65 61 6D 28 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 68 61 6E 64 6C 65 2C 20 46 69 6C 65 41 63 63 65 73 73 20 61 63 63 65 73 73 2C 20 69 6E 74 20 62 75 66 66 65 72 53 69 7A 65 29 20 69 6E 73 74 65 61 64 2C 20 61 6E 64 20 6F 70 74 69 6F 6E 61 6C 6C 79 20 6D 61 6B 65 20 61 20 6E 65 77 20 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 77 69 74 68 20 6F 77 6E 73 48 61 6E 64 6C 65 3D 66 61 6C 73 65 20 69 66 20 6E 65 65 64 65 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(native int handle, valuetype 'System.IO.FileAccess' access, bool ownsHandle, int32 bufferSize, bool isAsync)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 81 09 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6E 65 77 20 46 69 6C 65 53 74 72 65 61 6D 28 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 68 61 6E 64 6C 65 2C 20 46 69 6C 65 41 63 63 65 73 73 20 61 63 63 65 73 73 2C 20 69 6E 74 20 62 75 66 66 65 72 53 69 7A 65 2C 20 62 6F 6F 6C 20 69 73 41 73 79 6E 63 29 20 69 6E 73 74 65 61 64 2C 20 61 6E 64 20 6F 70 74 69 6F 6E 61 6C 6C 79 20 6D 61 6B 65 20 61 20 6E 65 77 20 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 77 69 74 68 20 6F 77 6E 73 48 61 6E 64 6C 65 3D 66 61 6C 73 65 20 69 66 20 6E 65 65 64 65 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype 'System.IO.FileAccess' access, int32 bufferSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Win32.SafeHandles.SafeFileHandle handle, valuetype 'System.IO.FileAccess' access, int32 bufferSize, bool isAsync)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsAsync()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance native int get_Handle()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] uint8[] 'array', int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' origin)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] 'array', int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.IAsyncResult BeginRead(uint8[] 'array', int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 EndRead(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.IAsyncResult BeginWrite(uint8[] 'array', int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance void EndWrite(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Lock(int64 position, int64 length)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Unlock(int64 position, int64 length)
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.FileStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.FileStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.FileStream'::get_CanWrite()
		}
		.property instance native int Handle()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 8A 54 68 69 73 20 70 72 6F 70 65 72 74 79 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 46 69 6C 65 53 74 72 65 61 6D 27 73 20 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 70 72 6F 70 65 72 74 79 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance native int 'System.IO.FileStream'::get_Handle()
		}
		.property instance bool IsAsync()
		{
			.get instance bool 'System.IO.FileStream'::get_IsAsync()
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.FileStream'::get_Length()
		}
		.property instance string Name()
		{
			.get instance string 'System.IO.FileStream'::get_Name()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.FileStream'::get_Position()
			.set instance void 'System.IO.FileStream'::set_Position(int64)
		}
		.property instance class Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle()
		{
			.get instance class Microsoft.Win32.SafeHandles.SafeFileHandle 'System.IO.FileStream'::get_SafeFileHandle()
		}
	}
	.class public abstract serializable FileSystemInfo
		extends System.MarshalByRefObject
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Extension()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_Exists()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Delete()
		{
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_CreationTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CreationTime(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_CreationTimeUtc()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CreationTimeUtc(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_LastAccessTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LastAccessTime(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_LastAccessTimeUtc()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LastAccessTimeUtc(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_LastWriteTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LastWriteTime(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_LastWriteTimeUtc()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LastWriteTimeUtc(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void Refresh()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'System.IO.FileAttributes' get_Attributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Attributes(valuetype 'System.IO.FileAttributes' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.field family string FullPath
		.field family string OriginalPath
		.property instance valuetype 'System.IO.FileAttributes' Attributes()
		{
			.get instance valuetype 'System.IO.FileAttributes' 'System.IO.FileSystemInfo'::get_Attributes()
			.set instance void 'System.IO.FileSystemInfo'::set_Attributes(valuetype 'System.IO.FileAttributes')
		}
		.property instance valuetype System.DateTime CreationTime()
		{
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_CreationTime()
			.set instance void 'System.IO.FileSystemInfo'::set_CreationTime(valuetype System.DateTime)
		}
		.property instance valuetype System.DateTime CreationTimeUtc()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_CreationTimeUtc()
			.set instance void 'System.IO.FileSystemInfo'::set_CreationTimeUtc(valuetype System.DateTime)
		}
		.property instance bool Exists()
		{
			.get instance bool 'System.IO.FileSystemInfo'::get_Exists()
		}
		.property instance string Extension()
		{
			.get instance string 'System.IO.FileSystemInfo'::get_Extension()
		}
		.property instance string FullName()
		{
			.get instance string 'System.IO.FileSystemInfo'::get_FullName()
		}
		.property instance valuetype System.DateTime LastAccessTime()
		{
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_LastAccessTime()
			.set instance void 'System.IO.FileSystemInfo'::set_LastAccessTime(valuetype System.DateTime)
		}
		.property instance valuetype System.DateTime LastAccessTimeUtc()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_LastAccessTimeUtc()
			.set instance void 'System.IO.FileSystemInfo'::set_LastAccessTimeUtc(valuetype System.DateTime)
		}
		.property instance valuetype System.DateTime LastWriteTime()
		{
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_LastWriteTime()
			.set instance void 'System.IO.FileSystemInfo'::set_LastWriteTime(valuetype System.DateTime)
		}
		.property instance valuetype System.DateTime LastWriteTimeUtc()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.DateTime 'System.IO.FileSystemInfo'::get_LastWriteTimeUtc()
			.set instance void 'System.IO.FileSystemInfo'::set_LastWriteTimeUtc(valuetype System.DateTime)
		}
		.property instance string Name()
		{
			.get instance string 'System.IO.FileSystemInfo'::get_Name()
		}
	}
	.class public serializable IOException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, int32 'hresult')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable MemoryStream
		extends 'System.IO.Stream'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] buffer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] buffer, bool writable)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] buffer, int32 index, int32 count, bool writable)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] buffer, int32 index, int32 count, bool writable, bool publiclyVisible)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] GetBuffer()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' loc)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] ToArray()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteTo(class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.MemoryStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.MemoryStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.MemoryStream'::get_CanWrite()
		}
		.property instance int32 Capacity()
		{
			.get instance int32 'System.IO.MemoryStream'::get_Capacity()
			.set instance void 'System.IO.MemoryStream'::set_Capacity(int32)
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.MemoryStream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.MemoryStream'::get_Position()
			.set instance void 'System.IO.MemoryStream'::set_Position(int64)
		}
	}
	.class public abstract sealed Path
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			string ChangeExtension(string path, string extension)
		{
			ret
		}
		.method public static hidebysig 
			string GetDirectoryName(string path)
		{
			ret
		}
		.method public static hidebysig 
			char[] GetInvalidPathChars()
		{
			ret
		}
		.method public static hidebysig 
			char[] GetInvalidFileNameChars()
		{
			ret
		}
		.method public static hidebysig 
			string GetExtension(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetFullPath(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetFileName(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetFileNameWithoutExtension(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetPathRoot(string path)
		{
			ret
		}
		.method public static hidebysig 
			string GetTempPath()
		{
			ret
		}
		.method public static hidebysig 
			string GetRandomFileName()
		{
			ret
		}
		.method public static hidebysig 
			string GetTempFileName()
		{
			ret
		}
		.method public static hidebysig 
			bool HasExtension(string path)
		{
			ret
		}
		.method public static hidebysig 
			bool IsPathRooted(string path)
		{
			ret
		}
		.method public static hidebysig 
			string Combine(string path1, string path2)
		{
			ret
		}
		.field static public initonly char AltDirectorySeparatorChar
		.field static public initonly char DirectorySeparatorChar
		.field static public initonly char[] InvalidPathChars
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 42 50 6C 65 61 73 65 20 75 73 65 20 47 65 74 49 6E 76 61 6C 69 64 50 61 74 68 43 68 61 72 73 20 6F 72 20 47 65 74 49 6E 76 61 6C 69 64 46 69 6C 65 4E 61 6D 65 43 68 61 72 73 20 69 6E 73 74 65 61 64 2E 00 00)
		.field static public initonly char PathSeparator
		.field static public initonly char VolumeSeparatorChar
	}
	.class public serializable PathTooLongException
		extends 'System.IO.IOException'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable SearchOption
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.SearchOption' AllDirectories = int32(0x00000001)
		.field static public literal valuetype 'System.IO.SearchOption' TopDirectoryOnly = int32(0x00000000)
	}
	.class public sealed serializable SeekOrigin
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.SeekOrigin' Begin = int32(0x00000000)
		.field static public literal valuetype 'System.IO.SeekOrigin' Current = int32(0x00000001)
		.field static public literal valuetype 'System.IO.SeekOrigin' End = int32(0x00000002)
	}
	.class public abstract serializable Stream
		extends System.MarshalByRefObject
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanRead()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanSeek()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_CanTimeout()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanWrite()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int64 get_Length()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int64 get_Position()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Position(int64 'value')
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ReadTimeout()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ReadTimeout(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_WriteTimeout()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_WriteTimeout(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Flush()
		{
		}
		.method family virtual hidebysig newslot 
			instance class System.Threading.WaitHandle CreateWaitHandle()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 5F 43 72 65 61 74 65 57 61 69 74 48 61 6E 64 6C 65 20 77 69 6C 6C 20 62 65 20 72 65 6D 6F 76 65 64 20 65 76 65 6E 74 75 61 6C 6C 79 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 22 6E 65 77 20 4D 61 6E 75 61 6C 52 65 73 65 74 45 76 65 6E 74 28 66 61 6C 73 65 29 22 20 69 6E 73 74 65 61 64 2E 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginRead(uint8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 EndRead(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginWrite(uint8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EndWrite(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' origin)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetLength(int64 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 Read([in][out] uint8[] buffer, int32 offset, int32 count)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Write(uint8[] buffer, int32 offset, int32 count)
		{
		}
		.method public virtual hidebysig newslot 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.Stream' Synchronized(class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public initonly class 'System.IO.Stream' Null
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.Stream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.Stream'::get_CanSeek()
		}
		.property instance bool CanTimeout()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool 'System.IO.Stream'::get_CanTimeout()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.Stream'::get_CanWrite()
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.Stream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.Stream'::get_Position()
			.set instance void 'System.IO.Stream'::set_Position(int64)
		}
		.property instance int32 ReadTimeout()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 'System.IO.Stream'::get_ReadTimeout()
			.set instance void 'System.IO.Stream'::set_ReadTimeout(int32)
		}
		.property instance int32 WriteTimeout()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int32 'System.IO.Stream'::get_WriteTimeout()
			.set instance void 'System.IO.Stream'::set_WriteTimeout(int32)
		}
	}
	.class public serializable StreamReader
		extends 'System.IO.TextReader'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', bool detectEncodingFromByteOrderMarks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', class System.Text.Encoding encoding)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', class System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', class System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int32 bufferSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, bool detectEncodingFromByteOrderMarks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, class System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, class System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int32 bufferSize)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Text.Encoding get_CurrentEncoding()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'System.IO.Stream' get_BaseStream()
		{
			ret
		}
		.method public hidebysig 
			instance void DiscardBufferedData()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_EndOfStream()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Peek()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ReadToEnd()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ReadLine()
		{
			ret
		}
		.field static public initonly class 'System.IO.StreamReader' Null
		.property instance class 'System.IO.Stream' BaseStream()
		{
			.get instance class 'System.IO.Stream' 'System.IO.StreamReader'::get_BaseStream()
		}
		.property instance class System.Text.Encoding CurrentEncoding()
		{
			.get instance class System.Text.Encoding 'System.IO.StreamReader'::get_CurrentEncoding()
		}
		.property instance bool EndOfStream()
		{
			.get instance bool 'System.IO.StreamReader'::get_EndOfStream()
		}
	}
	.class public serializable StreamWriter
		extends 'System.IO.TextWriter'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', class System.Text.Encoding encoding)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream', class System.Text.Encoding encoding, int32 bufferSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, bool append)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, bool append, class System.Text.Encoding encoding)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, bool append, class System.Text.Encoding encoding, int32 bufferSize)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_AutoFlush()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_AutoFlush(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'System.IO.Stream' get_BaseStream()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Text.Encoding get_Encoding()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(char 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(char[] buffer)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(string 'value')
		{
			ret
		}
		.field static public initonly class 'System.IO.StreamWriter' Null
		.property instance bool AutoFlush()
		{
			.get instance bool 'System.IO.StreamWriter'::get_AutoFlush()
			.set instance void 'System.IO.StreamWriter'::set_AutoFlush(bool)
		}
		.property instance class 'System.IO.Stream' BaseStream()
		{
			.get instance class 'System.IO.Stream' 'System.IO.StreamWriter'::get_BaseStream()
		}
		.property instance class System.Text.Encoding Encoding()
		{
			.get instance class System.Text.Encoding 'System.IO.StreamWriter'::get_Encoding()
		}
	}
	.class public serializable StringReader
		extends 'System.IO.TextReader'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string s)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Peek()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ReadToEnd()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ReadLine()
		{
			ret
		}
	}
	.class public serializable StringWriter
		extends 'System.IO.TextWriter'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.IFormatProvider formatProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Text.StringBuilder sb)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Text.StringBuilder sb, class System.IFormatProvider formatProvider)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Text.Encoding get_Encoding()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Text.StringBuilder GetStringBuilder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(char 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class System.Text.Encoding Encoding()
		{
			.get instance class System.Text.Encoding 'System.IO.StringWriter'::get_Encoding()
		}
	}
	.class public abstract serializable TextReader
		extends System.MarshalByRefObject
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Peek()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Read()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Read([in][out] char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ReadToEnd()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 ReadBlock([in][out] char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string ReadLine()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.TextReader' Synchronized(class 'System.IO.TextReader' reader)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.field static public initonly class 'System.IO.TextReader' Null
	}
	.class public abstract serializable TextWriter
		extends System.MarshalByRefObject
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.IFormatProvider formatProvider)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.IFormatProvider get_FormatProvider()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Text.Encoding get_Encoding()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_NewLine()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_NewLine(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.TextWriter' Synchronized(class 'System.IO.TextWriter' writer)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char[] buffer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(float32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(float64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string format, object arg0)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string format, object arg0, object arg1)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string format, object arg0, object arg1, object arg2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Write(string format, object[] arg)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(char 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(char[] buffer)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(char[] buffer, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(float32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(float64 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(string format, object arg0)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(string format, object arg0, object arg1)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(string format, object arg0, object arg1, object arg2)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void WriteLine(string format, object[] arg)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.field family char[] CoreNewLine
		.field static public initonly class 'System.IO.TextWriter' Null
		.property instance class System.Text.Encoding Encoding()
		{
			.get instance class System.Text.Encoding 'System.IO.TextWriter'::get_Encoding()
		}
		.property instance class System.IFormatProvider FormatProvider()
		{
			.get instance class System.IFormatProvider 'System.IO.TextWriter'::get_FormatProvider()
		}
		.property instance string NewLine()
		{
			.get instance string 'System.IO.TextWriter'::get_NewLine()
			.set instance void 'System.IO.TextWriter'::set_NewLine(string)
		}
	}
	.class public UnmanagedMemoryStream
		extends 'System.IO.Stream'
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8* pointer, int64 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8* pointer, int64 length, int64 capacity, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method family hidebysig 
			instance void Initialize(uint8* pointer, int64 length, int64 capacity, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_Capacity()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8* get_PositionPointer()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void set_PositionPointer(uint8* 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' loc)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.UnmanagedMemoryStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.UnmanagedMemoryStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.UnmanagedMemoryStream'::get_CanWrite()
		}
		.property instance int64 Capacity()
		{
			.get instance int64 'System.IO.UnmanagedMemoryStream'::get_Capacity()
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.UnmanagedMemoryStream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.UnmanagedMemoryStream'::get_Position()
			.set instance void 'System.IO.UnmanagedMemoryStream'::set_Position(int64)
		}
		.property instance uint8* PositionPointer()
		{
			.get instance uint8* 'System.IO.UnmanagedMemoryStream'::get_PositionPointer()
			.set instance void 'System.IO.UnmanagedMemoryStream'::set_PositionPointer(uint8*)
		}
	}
}
.namespace 'System.IO.IsolatedStorage'
{
	.class public interface abstract INormalizeForIsolatedStorage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Normalize()
		{
		}
	}
	.class public abstract IsolatedStorage
		extends System.MarshalByRefObject
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family virtual hidebysig newslot specialname 
			instance char get_SeparatorExternal()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance char get_SeparatorInternal()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 get_MaximumSize()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance uint64 get_CurrentSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_DomainIdentity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_ApplicationIdentity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_AssemblyIdentity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' get_Scope()
		{
			ret
		}
		.method family hidebysig 
			instance void InitStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, class System.Type domainEvidenceType, class System.Type assemblyEvidenceType)
		{
			ret
		}
		.method family hidebysig 
			instance void InitStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, class System.Type appEvidenceType)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Remove()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance class System.Security.Permissions.IsolatedStoragePermission GetPermission(class System.Security.PermissionSet ps)
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance object ApplicationIdentity()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance object 'System.IO.IsolatedStorage.IsolatedStorage'::get_ApplicationIdentity()
		}
		.property instance object AssemblyIdentity()
		{
			.get instance object 'System.IO.IsolatedStorage.IsolatedStorage'::get_AssemblyIdentity()
		}
		.property instance uint64 CurrentSize()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance uint64 'System.IO.IsolatedStorage.IsolatedStorage'::get_CurrentSize()
		}
		.property instance object DomainIdentity()
		{
			.get instance object 'System.IO.IsolatedStorage.IsolatedStorage'::get_DomainIdentity()
		}
		.property instance uint64 MaximumSize()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance uint64 'System.IO.IsolatedStorage.IsolatedStorage'::get_MaximumSize()
		}
		.property instance valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Scope()
		{
			.get instance valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' 'System.IO.IsolatedStorage.IsolatedStorage'::get_Scope()
		}
		.property instance char SeparatorExternal()
		{
			.get instance char 'System.IO.IsolatedStorage.IsolatedStorage'::get_SeparatorExternal()
		}
		.property instance char SeparatorInternal()
		{
			.get instance char 'System.IO.IsolatedStorage.IsolatedStorage'::get_SeparatorInternal()
		}
	}
	.class public serializable IsolatedStorageException
		extends System.Exception
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed IsolatedStorageFile
		extends 'System.IO.IsolatedStorage.IsolatedStorage'
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetUserStoreForDomain()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetUserStoreForAssembly()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetUserStoreForApplication()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetMachineStoreForDomain()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetMachineStoreForAssembly()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetMachineStoreForApplication()
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, class System.Type domainEvidenceType, class System.Type assemblyEvidenceType)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, object domainIdentity, object assemblyIdentity)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, class System.Security.Policy.Evidence domainEvidence, class System.Type domainEvidenceType, class System.Security.Policy.Evidence assemblyEvidence, class System.Type assemblyEvidenceType)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, class System.Type applicationEvidenceType)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.IO.IsolatedStorage.IsolatedStorageFile' GetStore(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope, object applicationIdentity)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance uint64 get_CurrentSize()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance uint64 get_MaximumSize()
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteFile(string file)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateDirectory(string dir)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteDirectory(string dir)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetFileNames(string searchPattern)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetDirectoryNames(string searchPattern)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Remove()
		{
			ret
		}
		.method public hidebysig 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public static hidebysig 
			void Remove(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IEnumerator GetEnumerator(valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' scope)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Security.Permissions.IsolatedStoragePermission GetPermission(class System.Security.PermissionSet ps)
		{
			ret
		}
		.property instance uint64 CurrentSize()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance uint64 'System.IO.IsolatedStorage.IsolatedStorageFile'::get_CurrentSize()
		}
		.property instance uint64 MaximumSize()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance uint64 'System.IO.IsolatedStorage.IsolatedStorageFile'::get_MaximumSize()
		}
	}
	.class public IsolatedStorageFileStream
		extends 'System.IO.FileStream'
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, class 'System.IO.IsolatedStorage.IsolatedStorageFile' isf)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, class 'System.IO.IsolatedStorage.IsolatedStorageFile' isf)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, class 'System.IO.IsolatedStorage.IsolatedStorageFile' isf)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, int32 bufferSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string path, valuetype 'System.IO.FileMode' mode, valuetype 'System.IO.FileAccess' access, valuetype 'System.IO.FileShare' share, int32 bufferSize, class 'System.IO.IsolatedStorage.IsolatedStorageFile' isf)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsAsync()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance native int get_Handle()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance class Microsoft.Win32.SafeHandles.SafeFileHandle get_SafeFileHandle()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read(uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype 'System.IO.SeekOrigin' origin)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.IAsyncResult BeginRead(uint8[] buffer, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 EndRead(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.IAsyncResult BeginWrite(uint8[] buffer, int32 offset, int32 numBytes, class System.AsyncCallback userCallback, object stateObject)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance void EndWrite(class System.IAsyncResult asyncResult)
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_CanWrite()
		}
		.property instance native int Handle()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 99 54 68 69 73 20 70 72 6F 70 65 72 74 79 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 49 73 6F 6C 61 74 65 64 53 74 6F 72 61 67 65 46 69 6C 65 53 74 72 65 61 6D 27 73 20 53 61 66 65 46 69 6C 65 48 61 6E 64 6C 65 20 70 72 6F 70 65 72 74 79 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance native int 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_Handle()
		}
		.property instance bool IsAsync()
		{
			.get instance bool 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_IsAsync()
		}
		.property instance int64 Length()
		{
			.get instance int64 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_Position()
			.set instance void 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::set_Position(int64)
		}
		.property instance class Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle()
		{
			.get instance class Microsoft.Win32.SafeHandles.SafeFileHandle 'System.IO.IsolatedStorage.IsolatedStorageFileStream'::get_SafeFileHandle()
		}
	}
	.class public sealed serializable IsolatedStorageScope
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Application = int32(0x00000020)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Assembly = int32(0x00000004)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Domain = int32(0x00000002)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Machine = int32(0x00000010)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' None = int32(0x00000000)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' Roaming = int32(0x00000008)
		.field static public literal valuetype 'System.IO.IsolatedStorage.IsolatedStorageScope' User = int32(0x00000001)
	}
}
.namespace System.Reflection
{
	.class public sealed serializable AmbiguousMatchException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
	}
	.class public serializable Assembly
		extends System.Object
		implements System.Runtime.InteropServices._Assembly, System.Security.IEvidenceFactory, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 28 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 41 73 73 65 6D 62 6C 79 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot specialname 
			instance void add_ModuleResolve(class System.Reflection.ModuleResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void remove_ModuleResolve(class System.Reflection.ModuleResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_CodeBase()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_EscapedCodeBase()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.AssemblyName GetName()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.AssemblyName GetName(bool copiedName)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public static hidebysig 
			string CreateQualifiedName(string assemblyName, string typeName)
			internalcall 
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodInfo get_EntryPoint()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly GetAssembly(class System.Type 'type')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._Assembly.GetType()
		{
			.override System.Runtime.InteropServices._Assembly::GetType
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetType(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetType(string name, bool throwOnError)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase)
			internalcall 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetExportedTypes()
			internalcall 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetTypes()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'System.IO.Stream' GetManifestResourceStream(class System.Type 'type', string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'System.IO.Stream' GetManifestResourceStream(string name)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Security.Policy.Evidence get_Evidence()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.Module get_ManifestModule()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadFrom(string assemblyFile)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly ReflectionOnlyLoadFrom(string assemblyFile)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadFrom(string assemblyFile, class System.Security.Policy.Evidence securityEvidence, uint8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(string assemblyString)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly ReflectionOnlyLoad(string assemblyString)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadWithPartialName(string partialName)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 71 54 68 69 73 20 6D 65 74 68 6F 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 2E 4C 6F 61 64 28 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadWithPartialName(string partialName, class System.Security.Policy.Evidence securityEvidence)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 71 54 68 69 73 20 6D 65 74 68 6F 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 2E 4C 6F 61 64 28 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_ReflectionOnly()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(uint8[] rawAssembly)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly ReflectionOnlyLoad(uint8[] rawAssembly)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly Load(uint8[] rawAssembly, uint8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadFile(string path)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadFile(string path, class System.Security.Policy.Evidence securityEvidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module LoadModule(string moduleName, uint8[] rawModule)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module LoadModule(string moduleName, uint8[] rawModule, uint8[] rawSymbolStore)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object CreateInstance(string typeName)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object CreateInstance(string typeName, bool ignoreCase)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object CreateInstance(string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module[] GetLoadedModules()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module[] GetModules()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module[] GetModules(bool getResourceModules)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.Module GetModule(string name)
			internalcall 
		{
		}
		.method public virtual hidebysig newslot 
			instance class 'System.IO.FileStream' GetFile(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'System.IO.FileStream'[] GetFiles()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'System.IO.FileStream'[] GetFiles(bool getResourceModules)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string[] GetManifestResourceNames()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly GetExecutingAssembly()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly GetCallingAssembly()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly GetEntryAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.AssemblyName[] GetReferencedAssemblies()
			internalcall 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Location()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ImageRuntimeVersion()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_GlobalAssemblyCache()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_HostContext()
		{
			ret
		}
		.event System.Reflection.ModuleResolveEventHandler ModuleResolve
		{
			.addon instance void System.Reflection.Assembly::add_ModuleResolve(class System.Reflection.ModuleResolveEventHandler)
			.removeon instance void System.Reflection.Assembly::remove_ModuleResolve(class System.Reflection.ModuleResolveEventHandler)
		}
		.property instance string CodeBase()
		{
			.get instance string System.Reflection.Assembly::get_CodeBase()
		}
		.property instance class System.Reflection.MethodInfo EntryPoint()
		{
			.get instance class System.Reflection.MethodInfo System.Reflection.Assembly::get_EntryPoint()
		}
		.property instance string EscapedCodeBase()
		{
			.get instance string System.Reflection.Assembly::get_EscapedCodeBase()
		}
		.property instance class System.Security.Policy.Evidence Evidence()
		{
			.get instance class System.Security.Policy.Evidence System.Reflection.Assembly::get_Evidence()
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.Assembly::get_FullName()
		}
		.property instance bool GlobalAssemblyCache()
		{
			.get instance bool System.Reflection.Assembly::get_GlobalAssemblyCache()
		}
		.property instance int64 HostContext()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance int64 System.Reflection.Assembly::get_HostContext()
		}
		.property instance string ImageRuntimeVersion()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance string System.Reflection.Assembly::get_ImageRuntimeVersion()
		}
		.property instance string Location()
		{
			.get instance string System.Reflection.Assembly::get_Location()
		}
		.property instance class System.Reflection.Module ManifestModule()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Reflection.Module System.Reflection.Assembly::get_ManifestModule()
		}
		.property instance bool ReflectionOnly()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Reflection.Assembly::get_ReflectionOnly()
		}
	}
	.class public sealed AssemblyAlgorithmIdAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm algorithmId)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint32 algorithmId)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance uint32 get_AlgorithmId()
		{
			ret
		}
		.property instance uint32 AlgorithmId()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance uint32 System.Reflection.AssemblyAlgorithmIdAttribute::get_AlgorithmId()
		}
	}
	.class public sealed AssemblyCompanyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string company)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Company()
		{
			ret
		}
		.property instance string Company()
		{
			.get instance string System.Reflection.AssemblyCompanyAttribute::get_Company()
		}
	}
	.class public sealed AssemblyConfigurationAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string configuration)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Configuration()
		{
			ret
		}
		.property instance string Configuration()
		{
			.get instance string System.Reflection.AssemblyConfigurationAttribute::get_Configuration()
		}
	}
	.class public sealed AssemblyCopyrightAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string copyright)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Copyright()
		{
			ret
		}
		.property instance string Copyright()
		{
			.get instance string System.Reflection.AssemblyCopyrightAttribute::get_Copyright()
		}
	}
	.class public sealed AssemblyCultureAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string culture)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Culture()
		{
			ret
		}
		.property instance string Culture()
		{
			.get instance string System.Reflection.AssemblyCultureAttribute::get_Culture()
		}
	}
	.class public sealed AssemblyDefaultAliasAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string defaultAlias)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DefaultAlias()
		{
			ret
		}
		.property instance string DefaultAlias()
		{
			.get instance string System.Reflection.AssemblyDefaultAliasAttribute::get_DefaultAlias()
		}
	}
	.class public sealed AssemblyDelaySignAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool delaySign)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DelaySign()
		{
			ret
		}
		.property instance bool DelaySign()
		{
			.get instance bool System.Reflection.AssemblyDelaySignAttribute::get_DelaySign()
		}
	}
	.class public sealed AssemblyDescriptionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string description)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.property instance string Description()
		{
			.get instance string System.Reflection.AssemblyDescriptionAttribute::get_Description()
		}
	}
	.class public sealed AssemblyFileVersionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Version()
		{
			ret
		}
		.property instance string Version()
		{
			.get instance string System.Reflection.AssemblyFileVersionAttribute::get_Version()
		}
	}
	.class public sealed AssemblyFlagsAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint32 'flags')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 90 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 46 6C 61 67 73 41 74 74 72 69 62 75 74 65 28 41 73 73 65 6D 62 6C 79 4E 61 6D 65 46 6C 61 67 73 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance uint32 get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_AssemblyFlags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 assemblyFlags)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 90 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 46 6C 61 67 73 41 74 74 72 69 62 75 74 65 28 41 73 73 65 6D 62 6C 79 4E 61 6D 65 46 6C 61 67 73 29 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Reflection.AssemblyNameFlags assemblyFlags)
		{
			ret
		}
		.property instance int32 AssemblyFlags()
		{
			.get instance int32 System.Reflection.AssemblyFlagsAttribute::get_AssemblyFlags()
		}
		.property instance uint32 Flags()
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 71 54 68 69 73 20 70 72 6F 70 65 72 74 79 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 41 73 73 65 6D 62 6C 79 46 6C 61 67 73 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance uint32 System.Reflection.AssemblyFlagsAttribute::get_Flags()
		}
	}
	.class public sealed AssemblyInformationalVersionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string informationalVersion)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_InformationalVersion()
		{
			ret
		}
		.property instance string InformationalVersion()
		{
			.get instance string System.Reflection.AssemblyInformationalVersionAttribute::get_InformationalVersion()
		}
	}
	.class public sealed AssemblyKeyFileAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string keyFile)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_KeyFile()
		{
			ret
		}
		.property instance string KeyFile()
		{
			.get instance string System.Reflection.AssemblyKeyFileAttribute::get_KeyFile()
		}
	}
	.class public sealed serializable AssemblyName
		extends System.Object
		implements System.Runtime.InteropServices._AssemblyName, System.ICloneable, System.Runtime.Serialization.ISerializable, System.Runtime.Serialization.IDeserializationCallback
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 41 73 73 65 6D 62 6C 79 4E 61 6D 65 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Version(class System.Version 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Globalization.CultureInfo get_CultureInfo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CultureInfo(class System.Globalization.CultureInfo 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CodeBase()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CodeBase(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_EscapedCodeBase()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.ProcessorArchitecture get_ProcessorArchitecture()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ProcessorArchitecture(valuetype System.Reflection.ProcessorArchitecture 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.AssemblyName GetAssemblyName(string assemblyFile)
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetPublicKey()
		{
			ret
		}
		.method public hidebysig 
			instance void SetPublicKey(uint8[] publicKey)
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetPublicKeyToken()
		{
			ret
		}
		.method public hidebysig 
			instance void SetPublicKeyToken(uint8[] publicKeyToken)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.AssemblyNameFlags get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype System.Reflection.AssemblyNameFlags 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm get_HashAlgorithm()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_HashAlgorithm(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility get_VersionCompatibility()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_VersionCompatibility(valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.StrongNameKeyPair get_KeyPair()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_KeyPair(class System.Reflection.StrongNameKeyPair 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void OnDeserialization(object sender)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string assemblyName)
		{
			ret
		}
		.method public static hidebysig 
			bool ReferenceMatchesDefinition(class System.Reflection.AssemblyName reference, class System.Reflection.AssemblyName definition)
			internalcall 
		{
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._AssemblyName::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyName.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._AssemblyName::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyName.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._AssemblyName::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyName.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._AssemblyName::Invoke
			ret
		}
		.property instance string CodeBase()
		{
			.get instance string System.Reflection.AssemblyName::get_CodeBase()
			.set instance void System.Reflection.AssemblyName::set_CodeBase(string)
		}
		.property instance class System.Globalization.CultureInfo CultureInfo()
		{
			.get instance class System.Globalization.CultureInfo System.Reflection.AssemblyName::get_CultureInfo()
			.set instance void System.Reflection.AssemblyName::set_CultureInfo(class System.Globalization.CultureInfo)
		}
		.property instance string EscapedCodeBase()
		{
			.get instance string System.Reflection.AssemblyName::get_EscapedCodeBase()
		}
		.property instance valuetype System.Reflection.AssemblyNameFlags Flags()
		{
			.get instance valuetype System.Reflection.AssemblyNameFlags System.Reflection.AssemblyName::get_Flags()
			.set instance void System.Reflection.AssemblyName::set_Flags(valuetype System.Reflection.AssemblyNameFlags)
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.AssemblyName::get_FullName()
		}
		.property instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm HashAlgorithm()
		{
			.get instance valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm System.Reflection.AssemblyName::get_HashAlgorithm()
			.set instance void System.Reflection.AssemblyName::set_HashAlgorithm(valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm)
		}
		.property instance class System.Reflection.StrongNameKeyPair KeyPair()
		{
			.get instance class System.Reflection.StrongNameKeyPair System.Reflection.AssemblyName::get_KeyPair()
			.set instance void System.Reflection.AssemblyName::set_KeyPair(class System.Reflection.StrongNameKeyPair)
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.AssemblyName::get_Name()
			.set instance void System.Reflection.AssemblyName::set_Name(string)
		}
		.property instance valuetype System.Reflection.ProcessorArchitecture ProcessorArchitecture()
		{
			.get instance valuetype System.Reflection.ProcessorArchitecture System.Reflection.AssemblyName::get_ProcessorArchitecture()
			.set instance void System.Reflection.AssemblyName::set_ProcessorArchitecture(valuetype System.Reflection.ProcessorArchitecture)
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.Reflection.AssemblyName::get_Version()
			.set instance void System.Reflection.AssemblyName::set_Version(class System.Version)
		}
		.property instance valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility VersionCompatibility()
		{
			.get instance valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility System.Reflection.AssemblyName::get_VersionCompatibility()
			.set instance void System.Reflection.AssemblyName::set_VersionCompatibility(valuetype System.Configuration.Assemblies.AssemblyVersionCompatibility)
		}
	}
	.class public sealed serializable AssemblyNameFlags
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.AssemblyNameFlags EnableJITcompileOptimizer = int32(0x00004000)
		.field static public literal valuetype System.Reflection.AssemblyNameFlags EnableJITcompileTracking = int32(0x00008000)
		.field static public literal valuetype System.Reflection.AssemblyNameFlags None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.AssemblyNameFlags PublicKey = int32(0x00000001)
		.field static public literal valuetype System.Reflection.AssemblyNameFlags Retargetable = int32(0x00000100)
	}
	.class public AssemblyNameProxy
		extends System.MarshalByRefObject
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance class System.Reflection.AssemblyName GetAssemblyName(string assemblyFile)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed AssemblyProductAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string product)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Product()
		{
			ret
		}
		.property instance string Product()
		{
			.get instance string System.Reflection.AssemblyProductAttribute::get_Product()
		}
	}
	.class public sealed AssemblyTitleAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string title)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Title()
		{
			ret
		}
		.property instance string Title()
		{
			.get instance string System.Reflection.AssemblyTitleAttribute::get_Title()
		}
	}
	.class public sealed AssemblyTrademarkAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string trademark)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Trademark()
		{
			ret
		}
		.property instance string Trademark()
		{
			.get instance string System.Reflection.AssemblyTrademarkAttribute::get_Trademark()
		}
	}
	.class public sealed AssemblyVersionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Version()
		{
			ret
		}
		.property instance string Version()
		{
			.get instance string System.Reflection.AssemblyVersionAttribute::get_Version()
		}
	}
	.class public abstract serializable Binder
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 02 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodBase BindToMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, object[]& args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] names, [out] object& state)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo BindToField(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.FieldInfo[] match, object 'value', class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodBase SelectMethod(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MethodBase[] match, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo SelectProperty(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.PropertyInfo[] match, class System.Type returnType, class System.Type[] indexes, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object ChangeType(object 'value', class System.Type 'type', class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ReorderArgumentArray(object[]& args, object state)
		{
		}
		.method public virtual hidebysig newslot 
			instance bool CanChangeType(object 'value', class System.Type 'type', class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable BindingFlags
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.BindingFlags CreateInstance = int32(0x00000200)
		.field static public literal valuetype System.Reflection.BindingFlags DeclaredOnly = int32(0x00000002)
		.field static public literal valuetype System.Reflection.BindingFlags Default = int32(0x00000000)
		.field static public literal valuetype System.Reflection.BindingFlags ExactBinding = int32(0x00010000)
		.field static public literal valuetype System.Reflection.BindingFlags FlattenHierarchy = int32(0x00000040)
		.field static public literal valuetype System.Reflection.BindingFlags GetField = int32(0x00000400)
		.field static public literal valuetype System.Reflection.BindingFlags GetProperty = int32(0x00001000)
		.field static public literal valuetype System.Reflection.BindingFlags IgnoreCase = int32(0x00000001)
		.field static public literal valuetype System.Reflection.BindingFlags IgnoreReturn = int32(0x01000000)
		.field static public literal valuetype System.Reflection.BindingFlags Instance = int32(0x00000004)
		.field static public literal valuetype System.Reflection.BindingFlags InvokeMethod = int32(0x00000100)
		.field static public literal valuetype System.Reflection.BindingFlags NonPublic = int32(0x00000020)
		.field static public literal valuetype System.Reflection.BindingFlags OptionalParamBinding = int32(0x00040000)
		.field static public literal valuetype System.Reflection.BindingFlags Public = int32(0x00000010)
		.field static public literal valuetype System.Reflection.BindingFlags PutDispProperty = int32(0x00004000)
		.field static public literal valuetype System.Reflection.BindingFlags PutRefDispProperty = int32(0x00008000)
		.field static public literal valuetype System.Reflection.BindingFlags SetField = int32(0x00000800)
		.field static public literal valuetype System.Reflection.BindingFlags SetProperty = int32(0x00002000)
		.field static public literal valuetype System.Reflection.BindingFlags Static = int32(0x00000008)
		.field static public literal valuetype System.Reflection.BindingFlags SuppressChangeType = int32(0x00020000)
	}
	.class public sealed serializable CallingConventions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.CallingConventions Any = int32(0x00000003)
		.field static public literal valuetype System.Reflection.CallingConventions ExplicitThis = int32(0x00000040)
		.field static public literal valuetype System.Reflection.CallingConventions HasThis = int32(0x00000020)
		.field static public literal valuetype System.Reflection.CallingConventions Standard = int32(0x00000001)
		.field static public literal valuetype System.Reflection.CallingConventions VarArgs = int32(0x00000002)
	}
	.class public abstract serializable ConstructorInfo
		extends System.Reflection.MethodBase
		implements System.Runtime.InteropServices._ConstructorInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2F 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 43 6F 6E 73 74 72 75 63 74 6F 72 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public hidebysig 
			instance object Invoke(object[] parameters)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._ConstructorInfo.GetType()
		{
			.override System.Runtime.InteropServices._ConstructorInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::Invoke_2
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object obj, object[] parameters)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::Invoke_3
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.Runtime.InteropServices._ConstructorInfo.Invoke_4(valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::Invoke_4
			ret
		}
		.method private final virtual hidebysig newslot 
			instance object System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[] parameters)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::Invoke_5
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ConstructorInfo::Invoke
			ret
		}
		.field static public initonly string ConstructorName
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field static public initonly string TypeConstructorName
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.ConstructorInfo::get_MemberType()
		}
	}
	.class public sealed serializable CustomAttributeData
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class 'System.Collections.Generic.IList`1'<class System.Reflection.CustomAttributeData> GetCustomAttributes(class System.Reflection.MemberInfo target)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.Collections.Generic.IList`1'<class System.Reflection.CustomAttributeData> GetCustomAttributes(class System.Reflection.Module target)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.Collections.Generic.IList`1'<class System.Reflection.CustomAttributeData> GetCustomAttributes(class System.Reflection.Assembly target)
		{
			ret
		}
		.method public static hidebysig 
			class 'System.Collections.Generic.IList`1'<class System.Reflection.CustomAttributeData> GetCustomAttributes(class System.Reflection.ParameterInfo target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.ConstructorInfo get_Constructor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeTypedArgument> get_ConstructorArguments()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeNamedArgument> get_NamedArguments()
		{
			ret
		}
		.property instance class System.Reflection.ConstructorInfo Constructor()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance class System.Reflection.ConstructorInfo System.Reflection.CustomAttributeData::get_Constructor()
		}
		.property instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeTypedArgument> ConstructorArguments()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeTypedArgument> System.Reflection.CustomAttributeData::get_ConstructorArguments()
		}
		.property instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeNamedArgument> NamedArguments()
		{
			.get instance class 'System.Collections.Generic.IList`1'<valuetype System.Reflection.CustomAttributeNamedArgument> System.Reflection.CustomAttributeData::get_NamedArguments()
		}
	}
	.class public serializable CustomAttributeFormatException
		extends System.FormatException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sequential sealed serializable CustomAttributeNamedArgument
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.CustomAttributeNamedArgument left, valuetype System.Reflection.CustomAttributeNamedArgument right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.CustomAttributeNamedArgument left, valuetype System.Reflection.CustomAttributeNamedArgument right)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.MemberInfo get_MemberInfo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.CustomAttributeTypedArgument get_TypedValue()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance class System.Reflection.MemberInfo MemberInfo()
		{
			.get instance class System.Reflection.MemberInfo System.Reflection.CustomAttributeNamedArgument::get_MemberInfo()
		}
		.property instance valuetype System.Reflection.CustomAttributeTypedArgument TypedValue()
		{
			.get instance valuetype System.Reflection.CustomAttributeTypedArgument System.Reflection.CustomAttributeNamedArgument::get_TypedValue()
		}
	}
	.class public sequential sealed serializable CustomAttributeTypedArgument
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.CustomAttributeTypedArgument left, valuetype System.Reflection.CustomAttributeTypedArgument right)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ArgumentType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance class System.Type ArgumentType()
		{
			.get instance class System.Type System.Reflection.CustomAttributeTypedArgument::get_ArgumentType()
		}
		.property instance object Value()
		{
			.get instance object System.Reflection.CustomAttributeTypedArgument::get_Value()
		}
	}
	.class public sealed serializable DefaultMemberAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 0C 04 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string memberName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_MemberName()
		{
			ret
		}
		.property instance string MemberName()
		{
			.get instance string System.Reflection.DefaultMemberAttribute::get_MemberName()
		}
	}
	.class public sealed serializable EventAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.EventAttributes None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.EventAttributes RTSpecialName = int32(0x00000400)
		.field static public literal valuetype System.Reflection.EventAttributes ReservedMask = int32(0x00000400)
		.field static public literal valuetype System.Reflection.EventAttributes SpecialName = int32(0x00000200)
	}
	.class public abstract serializable EventInfo
		extends System.Reflection.MemberInfo
		implements System.Runtime.InteropServices._EventInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 29 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 45 76 65 6E 74 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo[] GetOtherMethods(bool nonPublic)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.EventAttributes get_Attributes()
		{
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo[] GetOtherMethods()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetAddMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetRemoveMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetRaiseMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddEventHandler(object target, class System.Delegate 'handler')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RemoveEventHandler(object target, class System.Delegate 'handler')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Type get_EventHandlerType()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSpecialName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsMulticast()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._EventInfo.GetType()
		{
			.override System.Runtime.InteropServices._EventInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._EventInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._EventInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._EventInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._EventInfo::Invoke
			ret
		}
		.property instance valuetype System.Reflection.EventAttributes Attributes()
		{
			.get instance valuetype System.Reflection.EventAttributes System.Reflection.EventInfo::get_Attributes()
		}
		.property instance class System.Type EventHandlerType()
		{
			.get instance class System.Type System.Reflection.EventInfo::get_EventHandlerType()
		}
		.property instance bool IsMulticast()
		{
			.get instance bool System.Reflection.EventInfo::get_IsMulticast()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Reflection.EventInfo::get_IsSpecialName()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.EventInfo::get_MemberType()
		}
	}
	.class public sealed ExceptionHandlingClause
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance valuetype System.Reflection.ExceptionHandlingClauseOptions get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_TryOffset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_TryLength()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_HandlerOffset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_HandlerLength()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_FilterOffset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_CatchType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class System.Type CatchType()
		{
			.get instance class System.Type System.Reflection.ExceptionHandlingClause::get_CatchType()
		}
		.property instance int32 FilterOffset()
		{
			.get instance int32 System.Reflection.ExceptionHandlingClause::get_FilterOffset()
		}
		.property instance valuetype System.Reflection.ExceptionHandlingClauseOptions Flags()
		{
			.get instance valuetype System.Reflection.ExceptionHandlingClauseOptions System.Reflection.ExceptionHandlingClause::get_Flags()
		}
		.property instance int32 HandlerLength()
		{
			.get instance int32 System.Reflection.ExceptionHandlingClause::get_HandlerLength()
		}
		.property instance int32 HandlerOffset()
		{
			.get instance int32 System.Reflection.ExceptionHandlingClause::get_HandlerOffset()
		}
		.property instance int32 TryLength()
		{
			.get instance int32 System.Reflection.ExceptionHandlingClause::get_TryLength()
		}
		.property instance int32 TryOffset()
		{
			.get instance int32 System.Reflection.ExceptionHandlingClause::get_TryOffset()
		}
	}
	.class public sealed ExceptionHandlingClauseOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ExceptionHandlingClauseOptions Clause = int32(0x00000000)
		.field static public literal valuetype System.Reflection.ExceptionHandlingClauseOptions Fault = int32(0x00000004)
		.field static public literal valuetype System.Reflection.ExceptionHandlingClauseOptions Filter = int32(0x00000001)
		.field static public literal valuetype System.Reflection.ExceptionHandlingClauseOptions Finally = int32(0x00000002)
	}
	.class public sealed serializable FieldAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.FieldAttributes Assembly = int32(0x00000003)
		.field static public literal valuetype System.Reflection.FieldAttributes FamANDAssem = int32(0x00000002)
		.field static public literal valuetype System.Reflection.FieldAttributes FamORAssem = int32(0x00000005)
		.field static public literal valuetype System.Reflection.FieldAttributes Family = int32(0x00000004)
		.field static public literal valuetype System.Reflection.FieldAttributes FieldAccessMask = int32(0x00000007)
		.field static public literal valuetype System.Reflection.FieldAttributes HasDefault = int32(0x00008000)
		.field static public literal valuetype System.Reflection.FieldAttributes HasFieldMarshal = int32(0x00001000)
		.field static public literal valuetype System.Reflection.FieldAttributes HasFieldRVA = int32(0x00000100)
		.field static public literal valuetype System.Reflection.FieldAttributes InitOnly = int32(0x00000020)
		.field static public literal valuetype System.Reflection.FieldAttributes Literal = int32(0x00000040)
		.field static public literal valuetype System.Reflection.FieldAttributes NotSerialized = int32(0x00000080)
		.field static public literal valuetype System.Reflection.FieldAttributes PinvokeImpl = int32(0x00002000)
		.field static public literal valuetype System.Reflection.FieldAttributes Private = int32(0x00000001)
		.field static public literal valuetype System.Reflection.FieldAttributes PrivateScope = int32(0x00000000)
		.field static public literal valuetype System.Reflection.FieldAttributes Public = int32(0x00000006)
		.field static public literal valuetype System.Reflection.FieldAttributes RTSpecialName = int32(0x00000400)
		.field static public literal valuetype System.Reflection.FieldAttributes ReservedMask = int32(0x00009500)
		.field static public literal valuetype System.Reflection.FieldAttributes SpecialName = int32(0x00000200)
		.field static public literal valuetype System.Reflection.FieldAttributes Static = int32(0x00000010)
	}
	.class public abstract serializable FieldInfo
		extends System.Reflection.MemberInfo
		implements System.Runtime.InteropServices._FieldInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 29 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 46 69 65 6C 64 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.FieldInfo GetFieldFromHandle(valuetype System.RuntimeFieldHandle handle, valuetype System.RuntimeTypeHandle declaringType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetRequiredCustomModifiers()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetOptionalCustomModifiers()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetValueDirect(typedref obj, object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetValueDirect(typedref obj)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeFieldHandle get_FieldHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_FieldType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValue(object obj)
		{
		}
		.method public virtual hidebysig newslot 
			instance object GetRawConstantValue()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value', valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.FieldAttributes get_Attributes()
		{
		}
		.method public final virtual hidebysig newslot 
			instance void SetValue(object obj, object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPublic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPrivate()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamily()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamilyAndAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamilyOrAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsStatic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsInitOnly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsLiteral()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsNotSerialized()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSpecialName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPinvokeImpl()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._FieldInfo.GetType()
		{
			.override System.Runtime.InteropServices._FieldInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._FieldInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._FieldInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._FieldInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._FieldInfo::Invoke
			ret
		}
		.property instance valuetype System.Reflection.FieldAttributes Attributes()
		{
			.get instance valuetype System.Reflection.FieldAttributes System.Reflection.FieldInfo::get_Attributes()
		}
		.property instance valuetype System.RuntimeFieldHandle FieldHandle()
		{
			.get instance valuetype System.RuntimeFieldHandle System.Reflection.FieldInfo::get_FieldHandle()
		}
		.property instance class System.Type FieldType()
		{
			.get instance class System.Type System.Reflection.FieldInfo::get_FieldType()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsAssembly()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsFamilyOrAssembly()
		}
		.property instance bool IsInitOnly()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsInitOnly()
		}
		.property instance bool IsLiteral()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsLiteral()
		}
		.property instance bool IsNotSerialized()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsNotSerialized()
		}
		.property instance bool IsPinvokeImpl()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsPinvokeImpl()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Reflection.FieldInfo::get_IsStatic()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.FieldInfo::get_MemberType()
		}
	}
	.class public sealed GenericParameterAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.GenericParameterAttributes Contravariant = int32(0x00000002)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes Covariant = int32(0x00000001)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes DefaultConstructorConstraint = int32(0x00000010)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes NotNullableValueTypeConstraint = int32(0x00000008)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes ReferenceTypeConstraint = int32(0x00000004)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes SpecialConstraintMask = int32(0x0000001C)
		.field static public literal valuetype System.Reflection.GenericParameterAttributes VarianceMask = int32(0x00000003)
	}
	.class public interface abstract ICustomAttributeProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
	}
	.class public interface abstract IReflect
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 41 46 42 46 31 35 45 35 2D 43 33 37 43 2D 31 31 64 32 2D 42 38 38 45 2D 30 30 41 30 43 39 42 34 37 31 42 38 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Reflection.IReflect::get_UnderlyingSystemType()
		}
	}
	.class public sealed serializable ImageFileMachine
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ImageFileMachine 'AMD64' = int32(0x00008664)
		.field static public literal valuetype System.Reflection.ImageFileMachine 'I386' = int32(0x0000014C)
		.field static public literal valuetype System.Reflection.ImageFileMachine 'IA64' = int32(0x00000200)
	}
	.class public sequential sealed InterfaceMapping
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public class System.Type TargetType
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public class System.Type InterfaceType
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public class System.Reflection.MethodInfo[] TargetMethods
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public class System.Reflection.MethodInfo[] InterfaceMethods
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public serializable InvalidFilterCriteriaException
		extends System.ApplicationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public LocalVariableInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Type get_LocalType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsPinned()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_LocalIndex()
		{
			ret
		}
		.property instance bool IsPinned()
		{
			.get instance bool System.Reflection.LocalVariableInfo::get_IsPinned()
		}
		.property instance int32 LocalIndex()
		{
			.get instance int32 System.Reflection.LocalVariableInfo::get_LocalIndex()
		}
		.property instance class System.Type LocalType()
		{
			.get instance class System.Type System.Reflection.LocalVariableInfo::get_LocalType()
		}
	}
	.class public ManifestResourceInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.Assembly get_ReferencedAssembly()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_FileName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Reflection.ResourceLocation get_ResourceLocation()
		{
			ret
		}
		.property instance string FileName()
		{
			.get instance string System.Reflection.ManifestResourceInfo::get_FileName()
		}
		.property instance class System.Reflection.Assembly ReferencedAssembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.ManifestResourceInfo::get_ReferencedAssembly()
		}
		.property instance valuetype System.Reflection.ResourceLocation ResourceLocation()
		{
			.get instance valuetype System.Reflection.ResourceLocation System.Reflection.ManifestResourceInfo::get_ResourceLocation()
		}
	}
	.class public sealed serializable MemberFilter
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool Invoke(class System.Reflection.MemberInfo m, object filterCriteria)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.Reflection.MemberInfo m, object filterCriteria, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract serializable MemberInfo
		extends System.Object
		implements System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2A 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 65 6D 62 65 72 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_MetadataToken()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._MemberInfo.GetType()
		{
			.override System.Runtime.InteropServices._MemberInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._MemberInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._MemberInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._MemberInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MemberInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._MemberInfo::Invoke
			ret
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.MemberInfo::get_DeclaringType()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.MemberInfo::get_MemberType()
		}
		.property instance int32 MetadataToken()
		{
			.get instance int32 System.Reflection.MemberInfo::get_MetadataToken()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.MemberInfo::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.MemberInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.MemberInfo::get_ReflectedType()
		}
	}
	.class public sealed serializable MemberTypes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.MemberTypes All = int32(0x000000BF)
		.field static public literal valuetype System.Reflection.MemberTypes Constructor = int32(0x00000001)
		.field static public literal valuetype System.Reflection.MemberTypes Custom = int32(0x00000040)
		.field static public literal valuetype System.Reflection.MemberTypes Event = int32(0x00000002)
		.field static public literal valuetype System.Reflection.MemberTypes Field = int32(0x00000004)
		.field static public literal valuetype System.Reflection.MemberTypes Method = int32(0x00000008)
		.field static public literal valuetype System.Reflection.MemberTypes NestedType = int32(0x00000080)
		.field static public literal valuetype System.Reflection.MemberTypes Property = int32(0x00000010)
		.field static public literal valuetype System.Reflection.MemberTypes TypeInfo = int32(0x00000020)
	}
	.class public sealed serializable MethodAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.MethodAttributes Abstract = int32(0x00000400)
		.field static public literal valuetype System.Reflection.MethodAttributes Assembly = int32(0x00000003)
		.field static public literal valuetype System.Reflection.MethodAttributes CheckAccessOnOverride = int32(0x00000200)
		.field static public literal valuetype System.Reflection.MethodAttributes FamANDAssem = int32(0x00000002)
		.field static public literal valuetype System.Reflection.MethodAttributes FamORAssem = int32(0x00000005)
		.field static public literal valuetype System.Reflection.MethodAttributes Family = int32(0x00000004)
		.field static public literal valuetype System.Reflection.MethodAttributes Final = int32(0x00000020)
		.field static public literal valuetype System.Reflection.MethodAttributes HasSecurity = int32(0x00004000)
		.field static public literal valuetype System.Reflection.MethodAttributes HideBySig = int32(0x00000080)
		.field static public literal valuetype System.Reflection.MethodAttributes MemberAccessMask = int32(0x00000007)
		.field static public literal valuetype System.Reflection.MethodAttributes NewSlot = int32(0x00000100)
		.field static public literal valuetype System.Reflection.MethodAttributes PinvokeImpl = int32(0x00002000)
		.field static public literal valuetype System.Reflection.MethodAttributes Private = int32(0x00000001)
		.field static public literal valuetype System.Reflection.MethodAttributes PrivateScope = int32(0x00000000)
		.field static public literal valuetype System.Reflection.MethodAttributes Public = int32(0x00000006)
		.field static public literal valuetype System.Reflection.MethodAttributes RTSpecialName = int32(0x00001000)
		.field static public literal valuetype System.Reflection.MethodAttributes RequireSecObject = int32(0x00008000)
		.field static public literal valuetype System.Reflection.MethodAttributes ReservedMask = int32(0x0000D000)
		.field static public literal valuetype System.Reflection.MethodAttributes ReuseSlot = int32(0x00000000)
		.field static public literal valuetype System.Reflection.MethodAttributes SpecialName = int32(0x00000800)
		.field static public literal valuetype System.Reflection.MethodAttributes Static = int32(0x00000010)
		.field static public literal valuetype System.Reflection.MethodAttributes UnmanagedExport = int32(0x00000008)
		.field static public literal valuetype System.Reflection.MethodAttributes Virtual = int32(0x00000040)
		.field static public literal valuetype System.Reflection.MethodAttributes VtableLayoutMask = int32(0x00000100)
	}
	.class public abstract serializable MethodBase
		extends System.Reflection.MemberInfo
		implements System.Runtime.InteropServices._MethodBase
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2A 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 65 74 68 6F 64 42 61 73 65 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.MethodBase GetMethodFromHandle(valuetype System.RuntimeMethodHandle handle, valuetype System.RuntimeTypeHandle declaringType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Reflection.MethodBase GetCurrentMethod()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetGenericArguments()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsGenericMethodDefinition()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_ContainsGenericParameters()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsGenericMethod()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._MethodBase.GetType()
		{
			.override System.Runtime.InteropServices._MethodBase::GetType
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsPublic()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsPublic
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsPrivate()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsPrivate
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsFamily()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsFamily
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsAssembly()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsAssembly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsFamilyAndAssembly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsFamilyOrAssembly
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsStatic()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsStatic
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsFinal()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsFinal
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsVirtual()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsVirtual
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsHideBySig()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsHideBySig
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsAbstract()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsAbstract
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsSpecialName()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsSpecialName
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance bool System.Runtime.InteropServices._MethodBase.get_IsConstructor()
		{
			.override System.Runtime.InteropServices._MethodBase::get_IsConstructor
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Invoke(object obj, object[] parameters)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPublic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsPrivate()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamily()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamilyAndAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFamilyOrAssembly()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsStatic()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsFinal()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsVirtual()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsHideBySig()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsAbstract()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSpecialName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsConstructor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MethodBody GetMethodBody()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._MethodBase::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBase.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._MethodBase::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBase.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._MethodBase::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBase.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._MethodBase::Invoke
			ret
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Reflection.MethodBase::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Reflection.MethodBase::get_CallingConvention()
		}
		.property instance bool ContainsGenericParameters()
		{
			.get instance bool System.Reflection.MethodBase::get_ContainsGenericParameters()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Reflection.MethodBase::get_IsAbstract()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Reflection.MethodBase::get_IsAssembly()
		}
		.property instance bool IsConstructor()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance bool System.Reflection.MethodBase::get_IsConstructor()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Reflection.MethodBase::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Reflection.MethodBase::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Reflection.MethodBase::get_IsFamilyOrAssembly()
		}
		.property instance bool IsFinal()
		{
			.get instance bool System.Reflection.MethodBase::get_IsFinal()
		}
		.property instance bool IsGenericMethod()
		{
			.get instance bool System.Reflection.MethodBase::get_IsGenericMethod()
		}
		.property instance bool IsGenericMethodDefinition()
		{
			.get instance bool System.Reflection.MethodBase::get_IsGenericMethodDefinition()
		}
		.property instance bool IsHideBySig()
		{
			.get instance bool System.Reflection.MethodBase::get_IsHideBySig()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Reflection.MethodBase::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Reflection.MethodBase::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Reflection.MethodBase::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Reflection.MethodBase::get_IsStatic()
		}
		.property instance bool IsVirtual()
		{
			.get instance bool System.Reflection.MethodBase::get_IsVirtual()
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Reflection.MethodBase::get_MethodHandle()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsAbstract()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsAbstract()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsAssembly()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsAssembly()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsConstructor()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsConstructor()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsFamily()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsFamily()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsFinal()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsFinal()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsHideBySig()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsHideBySig()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsPrivate()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsPrivate()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsPublic()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsPublic()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsSpecialName()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsSpecialName()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsStatic()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsStatic()
		}
		.property instance bool System.Runtime.InteropServices._MethodBase.IsVirtual()
		{
			.get instance bool System.Reflection.MethodBase::System.Runtime.InteropServices._MethodBase.get_IsVirtual()
		}
	}
	.class public sealed MethodBody
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_LocalSignatureMetadataToken()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<class System.Reflection.LocalVariableInfo> get_LocalVariables()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MaxStackSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_InitLocals()
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetILAsByteArray()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'System.Collections.Generic.IList`1'<class System.Reflection.ExceptionHandlingClause> get_ExceptionHandlingClauses()
		{
			ret
		}
		.property instance class 'System.Collections.Generic.IList`1'<class System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses()
		{
			.get instance class 'System.Collections.Generic.IList`1'<class System.Reflection.ExceptionHandlingClause> System.Reflection.MethodBody::get_ExceptionHandlingClauses()
		}
		.property instance bool InitLocals()
		{
			.get instance bool System.Reflection.MethodBody::get_InitLocals()
		}
		.property instance int32 LocalSignatureMetadataToken()
		{
			.get instance int32 System.Reflection.MethodBody::get_LocalSignatureMetadataToken()
		}
		.property instance class 'System.Collections.Generic.IList`1'<class System.Reflection.LocalVariableInfo> LocalVariables()
		{
			.get instance class 'System.Collections.Generic.IList`1'<class System.Reflection.LocalVariableInfo> System.Reflection.MethodBody::get_LocalVariables()
		}
		.property instance int32 MaxStackSize()
		{
			.get instance int32 System.Reflection.MethodBody::get_MaxStackSize()
		}
	}
	.class public sealed serializable MethodImplAttributes
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.MethodImplAttributes CodeTypeMask = int32(0x00000003)
		.field static public literal valuetype System.Reflection.MethodImplAttributes ForwardRef = int32(0x00000010)
		.field static public literal valuetype System.Reflection.MethodImplAttributes IL = int32(0x00000000)
		.field static public literal valuetype System.Reflection.MethodImplAttributes InternalCall = int32(0x00001000)
		.field static public literal valuetype System.Reflection.MethodImplAttributes Managed = int32(0x00000000)
		.field static public literal valuetype System.Reflection.MethodImplAttributes ManagedMask = int32(0x00000004)
		.field static public literal valuetype System.Reflection.MethodImplAttributes MaxMethodImplVal = int32(0x0000FFFF)
		.field static public literal valuetype System.Reflection.MethodImplAttributes Native = int32(0x00000001)
		.field static public literal valuetype System.Reflection.MethodImplAttributes NoInlining = int32(0x00000008)
		.field static public literal valuetype System.Reflection.MethodImplAttributes 'OPTIL' = int32(0x00000002)
		.field static public literal valuetype System.Reflection.MethodImplAttributes PreserveSig = int32(0x00000080)
		.field static public literal valuetype System.Reflection.MethodImplAttributes Runtime = int32(0x00000003)
		.field static public literal valuetype System.Reflection.MethodImplAttributes Synchronized = int32(0x00000020)
		.field static public literal valuetype System.Reflection.MethodImplAttributes Unmanaged = int32(0x00000004)
	}
	.class public abstract serializable MethodInfo
		extends System.Reflection.MethodBase
		implements System.Runtime.InteropServices._MethodInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2A 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 65 74 68 6F 64 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Type get_ReturnType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.ParameterInfo get_ReturnParameter()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetBaseDefinition()
		{
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetGenericArguments()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetGenericMethodDefinition()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericMethodDefinition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_ContainsGenericParameters()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericMethod()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._MethodInfo.GetType()
		{
			.override System.Runtime.InteropServices._MethodInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._MethodInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._MethodInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._MethodInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._MethodInfo::Invoke
			ret
		}
		.property instance bool ContainsGenericParameters()
		{
			.get instance bool System.Reflection.MethodInfo::get_ContainsGenericParameters()
		}
		.property instance bool IsGenericMethod()
		{
			.get instance bool System.Reflection.MethodInfo::get_IsGenericMethod()
		}
		.property instance bool IsGenericMethodDefinition()
		{
			.get instance bool System.Reflection.MethodInfo::get_IsGenericMethodDefinition()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.MethodInfo::get_MemberType()
		}
		.property instance class System.Reflection.ParameterInfo ReturnParameter()
		{
			.get instance class System.Reflection.ParameterInfo System.Reflection.MethodInfo::get_ReturnParameter()
		}
		.property instance class System.Type ReturnType()
		{
			.get instance class System.Type System.Reflection.MethodInfo::get_ReturnType()
		}
		.property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes()
		{
			.get instance class System.Reflection.ICustomAttributeProvider System.Reflection.MethodInfo::get_ReturnTypeCustomAttributes()
		}
	}
	.class public sealed serializable Missing
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.field static public initonly class System.Reflection.Missing Value
	}
	.class public serializable Module
		extends System.Object
		implements System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 26 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 6F 64 75 6C 65 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance class System.Reflection.MethodBase ResolveMethod(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] ResolveSignature(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodBase ResolveMethod(int32 metadataToken, class System.Type[] genericTypeArguments, class System.Type[] genericMethodArguments)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo ResolveField(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo ResolveField(int32 metadataToken, class System.Type[] genericTypeArguments, class System.Type[] genericMethodArguments)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Type ResolveType(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Type ResolveType(int32 metadataToken, class System.Type[] genericTypeArguments, class System.Type[] genericMethodArguments)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MemberInfo ResolveMember(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MemberInfo ResolveMember(int32 metadataToken, class System.Type[] genericTypeArguments, class System.Type[] genericMethodArguments)
		{
			ret
		}
		.method public hidebysig 
			instance string ResolveString(int32 metadataToken)
		{
			ret
		}
		.method public hidebysig 
			instance void GetPEKind([out] valuetype System.Reflection.PortableExecutableKinds& peKind, [out] valuetype System.Reflection.ImageFileMachine& machine)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MDStreamVersion()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetType(string className, bool ignoreCase)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetType(string className)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetType(string className, bool throwOnError, bool ignoreCase)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_FullyQualifiedName()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] FindTypes(class System.Reflection.TypeFilter 'filter', object filterCriteria)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetTypes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Guid get_ModuleVersionId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MetadataToken()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsResource()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingFlags)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingFlags)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo GetMethod(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ScopeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.ModuleHandle get_ModuleHandle()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Module.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._Module::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Module.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._Module::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Module.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._Module::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Module.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._Module::Invoke
			ret
		}
		.field static public initonly class System.Reflection.TypeFilter FilterTypeName
		.field static public initonly class System.Reflection.TypeFilter FilterTypeNameIgnoreCase
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.Module::get_Assembly()
		}
		.property instance string FullyQualifiedName()
		{
			.get instance string System.Reflection.Module::get_FullyQualifiedName()
		}
		.property instance int32 MDStreamVersion()
		{
			.get instance int32 System.Reflection.Module::get_MDStreamVersion()
		}
		.property instance int32 MetadataToken()
		{
			.get instance int32 System.Reflection.Module::get_MetadataToken()
		}
		.property instance valuetype System.ModuleHandle ModuleHandle()
		{
			.get instance valuetype System.ModuleHandle System.Reflection.Module::get_ModuleHandle()
		}
		.property instance valuetype System.Guid ModuleVersionId()
		{
			.get instance valuetype System.Guid System.Reflection.Module::get_ModuleVersionId()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Module::get_Name()
		}
		.property instance string ScopeName()
		{
			.get instance string System.Reflection.Module::get_ScopeName()
		}
	}
	.class public sealed serializable ModuleResolveEventHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Module Invoke(object sender, class System.ResolveEventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object sender, class System.ResolveEventArgs e, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Module EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed ObfuscateAssemblyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool assemblyIsPrivate)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AssemblyIsPrivate()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_StripAfterObfuscation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_StripAfterObfuscation(bool 'value')
		{
			ret
		}
		.property instance bool AssemblyIsPrivate()
		{
			.get instance bool System.Reflection.ObfuscateAssemblyAttribute::get_AssemblyIsPrivate()
		}
		.property instance bool StripAfterObfuscation()
		{
			.get instance bool System.Reflection.ObfuscateAssemblyAttribute::get_StripAfterObfuscation()
			.set instance void System.Reflection.ObfuscateAssemblyAttribute::set_StripAfterObfuscation(bool)
		}
	}
	.class public sealed ObfuscationAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 DD 1F 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_StripAfterObfuscation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_StripAfterObfuscation(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Exclude()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Exclude(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ApplyToMembers()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ApplyToMembers(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Feature()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Feature(string 'value')
		{
			ret
		}
		.property instance bool ApplyToMembers()
		{
			.get instance bool System.Reflection.ObfuscationAttribute::get_ApplyToMembers()
			.set instance void System.Reflection.ObfuscationAttribute::set_ApplyToMembers(bool)
		}
		.property instance bool Exclude()
		{
			.get instance bool System.Reflection.ObfuscationAttribute::get_Exclude()
			.set instance void System.Reflection.ObfuscationAttribute::set_Exclude(bool)
		}
		.property instance string Feature()
		{
			.get instance string System.Reflection.ObfuscationAttribute::get_Feature()
			.set instance void System.Reflection.ObfuscationAttribute::set_Feature(string)
		}
		.property instance bool StripAfterObfuscation()
		{
			.get instance bool System.Reflection.ObfuscationAttribute::get_StripAfterObfuscation()
			.set instance void System.Reflection.ObfuscationAttribute::set_StripAfterObfuscation(bool)
		}
	}
	.class public sealed serializable ParameterAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ParameterAttributes HasDefault = int32(0x00001000)
		.field static public literal valuetype System.Reflection.ParameterAttributes HasFieldMarshal = int32(0x00002000)
		.field static public literal valuetype System.Reflection.ParameterAttributes In = int32(0x00000001)
		.field static public literal valuetype System.Reflection.ParameterAttributes Lcid = int32(0x00000004)
		.field static public literal valuetype System.Reflection.ParameterAttributes None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.ParameterAttributes Optional = int32(0x00000010)
		.field static public literal valuetype System.Reflection.ParameterAttributes Out = int32(0x00000002)
		.field static public literal valuetype System.Reflection.ParameterAttributes Reserved3 = int32(0x00004000)
		.field static public literal valuetype System.Reflection.ParameterAttributes Reserved4 = int32(0x00008000)
		.field static public literal valuetype System.Reflection.ParameterAttributes ReservedMask = int32(0x0000F000)
		.field static public literal valuetype System.Reflection.ParameterAttributes Retval = int32(0x00000008)
	}
	.class public serializable ParameterInfo
		extends System.Object
		implements System.Runtime.InteropServices._ParameterInfo, System.Reflection.ICustomAttributeProvider
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2D 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 50 61 72 61 6D 65 74 65 72 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Type get_ParameterType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_DefaultValue()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_RawDefaultValue()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Position()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Reflection.ParameterAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.MemberInfo get_Member()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsIn()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsOut()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsLcid()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsRetval()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsOptional()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MetadataToken()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetRequiredCustomModifiers()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetOptionalCustomModifiers()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ParameterInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ParameterInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ParameterInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ParameterInfo::Invoke
			ret
		}
		.field family valuetype System.Reflection.ParameterAttributes AttrsImpl
		.field family class System.Type ClassImpl
		.field family object DefaultValueImpl
		.field family class System.Reflection.MemberInfo MemberImpl
		.field family string NameImpl
		.field family int32 PositionImpl
		.property instance valuetype System.Reflection.ParameterAttributes Attributes()
		{
			.get instance valuetype System.Reflection.ParameterAttributes System.Reflection.ParameterInfo::get_Attributes()
		}
		.property instance object DefaultValue()
		{
			.get instance object System.Reflection.ParameterInfo::get_DefaultValue()
		}
		.property instance bool IsIn()
		{
			.get instance bool System.Reflection.ParameterInfo::get_IsIn()
		}
		.property instance bool IsLcid()
		{
			.get instance bool System.Reflection.ParameterInfo::get_IsLcid()
		}
		.property instance bool IsOptional()
		{
			.get instance bool System.Reflection.ParameterInfo::get_IsOptional()
		}
		.property instance bool IsOut()
		{
			.get instance bool System.Reflection.ParameterInfo::get_IsOut()
		}
		.property instance bool IsRetval()
		{
			.get instance bool System.Reflection.ParameterInfo::get_IsRetval()
		}
		.property instance class System.Reflection.MemberInfo Member()
		{
			.get instance class System.Reflection.MemberInfo System.Reflection.ParameterInfo::get_Member()
		}
		.property instance int32 MetadataToken()
		{
			.get instance int32 System.Reflection.ParameterInfo::get_MetadataToken()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.ParameterInfo::get_Name()
		}
		.property instance class System.Type ParameterType()
		{
			.get instance class System.Type System.Reflection.ParameterInfo::get_ParameterType()
		}
		.property instance int32 Position()
		{
			.get instance int32 System.Reflection.ParameterInfo::get_Position()
		}
		.property instance object RawDefaultValue()
		{
			.get instance object System.Reflection.ParameterInfo::get_RawDefaultValue()
		}
	}
	.class public sequential sealed serializable ParameterModifier
		extends System.ValueType
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 parameterCount)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Item(int32 index)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Item(int32 index, bool 'value')
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance bool Item(int32)
		{
			.get instance bool System.Reflection.ParameterModifier::get_Item(int32)
			.set instance void System.Reflection.ParameterModifier::set_Item(int32, bool)
		}
	}
	.class public sealed serializable Pointer
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			object Box(void* ptr, class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			void* Unbox(object ptr)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
	}
	.class public sealed serializable PortableExecutableKinds
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.PortableExecutableKinds ILOnly = int32(0x00000001)
		.field static public literal valuetype System.Reflection.PortableExecutableKinds NotAPortableExecutableImage = int32(0x00000000)
		.field static public literal valuetype System.Reflection.PortableExecutableKinds PE32Plus = int32(0x00000004)
		.field static public literal valuetype System.Reflection.PortableExecutableKinds Required32Bit = int32(0x00000002)
		.field static public literal valuetype System.Reflection.PortableExecutableKinds Unmanaged32Bit = int32(0x00000008)
	}
	.class public sealed serializable ProcessorArchitecture
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ProcessorArchitecture Amd64 = int32(0x00000004)
		.field static public literal valuetype System.Reflection.ProcessorArchitecture 'IA64' = int32(0x00000003)
		.field static public literal valuetype System.Reflection.ProcessorArchitecture 'MSIL' = int32(0x00000001)
		.field static public literal valuetype System.Reflection.ProcessorArchitecture None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.ProcessorArchitecture X86 = int32(0x00000002)
	}
	.class public sealed serializable PropertyAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.PropertyAttributes HasDefault = int32(0x00001000)
		.field static public literal valuetype System.Reflection.PropertyAttributes None = int32(0x00000000)
		.field static public literal valuetype System.Reflection.PropertyAttributes RTSpecialName = int32(0x00000400)
		.field static public literal valuetype System.Reflection.PropertyAttributes Reserved2 = int32(0x00002000)
		.field static public literal valuetype System.Reflection.PropertyAttributes Reserved3 = int32(0x00004000)
		.field static public literal valuetype System.Reflection.PropertyAttributes Reserved4 = int32(0x00008000)
		.field static public literal valuetype System.Reflection.PropertyAttributes ReservedMask = int32(0x0000F400)
		.field static public literal valuetype System.Reflection.PropertyAttributes SpecialName = int32(0x00000200)
	}
	.class public abstract serializable PropertyInfo
		extends System.Reflection.MemberInfo
		implements System.Runtime.InteropServices._PropertyInfo
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 50 72 6F 70 65 72 74 79 49 6E 66 6F 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetConstantValue()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetRawConstantValue()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_PropertyType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value', valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetIndexParameters()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.PropertyAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanRead()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanWrite()
		{
		}
		.method public virtual hidebysig newslot 
			instance object GetValue(object obj, object[] index)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot 
			instance void SetValue(object obj, object 'value', object[] index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetRequiredCustomModifiers()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type[] GetOptionalCustomModifiers()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo[] GetAccessors()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetGetMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Reflection.MethodInfo GetSetMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSpecialName()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Type System.Runtime.InteropServices._PropertyInfo.GetType()
		{
			.override System.Runtime.InteropServices._PropertyInfo::GetType
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._PropertyInfo::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._PropertyInfo::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._PropertyInfo::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyInfo.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._PropertyInfo::Invoke
			ret
		}
		.property instance valuetype System.Reflection.PropertyAttributes Attributes()
		{
			.get instance valuetype System.Reflection.PropertyAttributes System.Reflection.PropertyInfo::get_Attributes()
		}
		.property instance bool CanRead()
		{
			.get instance bool System.Reflection.PropertyInfo::get_CanRead()
		}
		.property instance bool CanWrite()
		{
			.get instance bool System.Reflection.PropertyInfo::get_CanWrite()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Reflection.PropertyInfo::get_IsSpecialName()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Reflection.PropertyInfo::get_MemberType()
		}
		.property instance class System.Type PropertyType()
		{
			.get instance class System.Type System.Reflection.PropertyInfo::get_PropertyType()
		}
	}
	.class public sealed serializable ReflectionTypeLoadException
		extends System.SystemException
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type[] classes, class System.Exception[] exceptions)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type[] classes, class System.Exception[] exceptions, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type[] get_Types()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Exception[] get_LoaderExceptions()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class System.Exception[] LoaderExceptions()
		{
			.get instance class System.Exception[] System.Reflection.ReflectionTypeLoadException::get_LoaderExceptions()
		}
		.property instance class System.Type[] Types()
		{
			.get instance class System.Type[] System.Reflection.ReflectionTypeLoadException::get_Types()
		}
	}
	.class public sealed serializable ResourceAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ResourceAttributes Private = int32(0x00000002)
		.field static public literal valuetype System.Reflection.ResourceAttributes Public = int32(0x00000001)
	}
	.class public sealed serializable ResourceLocation
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.ResourceLocation ContainedInAnotherAssembly = int32(0x00000002)
		.field static public literal valuetype System.Reflection.ResourceLocation ContainedInManifestFile = int32(0x00000004)
		.field static public literal valuetype System.Reflection.ResourceLocation Embedded = int32(0x00000001)
	}
	.class public serializable StrongNameKeyPair
		extends System.Object
		implements System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.FileStream' keyPairFile)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] keyPairArray)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string keyPairContainer)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8[] get_PublicKey()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender)
		{
			.override System.Runtime.Serialization.IDeserializationCallback::OnDeserialization
			ret
		}
		.property instance uint8[] PublicKey()
		{
			.get instance uint8[] System.Reflection.StrongNameKeyPair::get_PublicKey()
		}
	}
	.class public serializable TargetException
		extends System.ApplicationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable TargetInvocationException
		extends System.ApplicationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
	}
	.class public sealed serializable TargetParameterCountException
		extends System.ApplicationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
	}
	.class public sealed serializable TypeAttributes
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.TypeAttributes Abstract = int32(0x00000080)
		.field static public literal valuetype System.Reflection.TypeAttributes AnsiClass = int32(0x00000000)
		.field static public literal valuetype System.Reflection.TypeAttributes AutoClass = int32(0x00020000)
		.field static public literal valuetype System.Reflection.TypeAttributes AutoLayout = int32(0x00000000)
		.field static public literal valuetype System.Reflection.TypeAttributes BeforeFieldInit = int32(0x00100000)
		.field static public literal valuetype System.Reflection.TypeAttributes Class = int32(0x00000000)
		.field static public literal valuetype System.Reflection.TypeAttributes ClassSemanticsMask = int32(0x00000020)
		.field static public literal valuetype System.Reflection.TypeAttributes CustomFormatClass = int32(0x00030000)
		.field static public literal valuetype System.Reflection.TypeAttributes CustomFormatMask = int32(0x00C00000)
		.field static public literal valuetype System.Reflection.TypeAttributes ExplicitLayout = int32(0x00000010)
		.field static public literal valuetype System.Reflection.TypeAttributes HasSecurity = int32(0x00040000)
		.field static public literal valuetype System.Reflection.TypeAttributes Import = int32(0x00001000)
		.field static public literal valuetype System.Reflection.TypeAttributes Interface = int32(0x00000020)
		.field static public literal valuetype System.Reflection.TypeAttributes LayoutMask = int32(0x00000018)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedAssembly = int32(0x00000005)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedFamANDAssem = int32(0x00000006)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedFamORAssem = int32(0x00000007)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedFamily = int32(0x00000004)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedPrivate = int32(0x00000003)
		.field static public literal valuetype System.Reflection.TypeAttributes NestedPublic = int32(0x00000002)
		.field static public literal valuetype System.Reflection.TypeAttributes NotPublic = int32(0x00000000)
		.field static public literal valuetype System.Reflection.TypeAttributes Public = int32(0x00000001)
		.field static public literal valuetype System.Reflection.TypeAttributes RTSpecialName = int32(0x00000800)
		.field static public literal valuetype System.Reflection.TypeAttributes ReservedMask = int32(0x00040800)
		.field static public literal valuetype System.Reflection.TypeAttributes Sealed = int32(0x00000100)
		.field static public literal valuetype System.Reflection.TypeAttributes SequentialLayout = int32(0x00000008)
		.field static public literal valuetype System.Reflection.TypeAttributes Serializable = int32(0x00002000)
		.field static public literal valuetype System.Reflection.TypeAttributes SpecialName = int32(0x00000400)
		.field static public literal valuetype System.Reflection.TypeAttributes StringFormatMask = int32(0x00030000)
		.field static public literal valuetype System.Reflection.TypeAttributes UnicodeClass = int32(0x00010000)
		.field static public literal valuetype System.Reflection.TypeAttributes VisibilityMask = int32(0x00000007)
	}
	.class public serializable TypeDelegator
		extends System.Type
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type delegatingType)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Guid get_GUID()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_MetadataToken()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AssemblyQualifiedName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_BaseType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetInterfaces()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method family virtual hidebysig 
			instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsArrayImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPrimitiveImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsByRefImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPointerImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsValueTypeImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsCOMObjectImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetElementType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool HasElementTypeImpl()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.field family class System.Type typeImpl
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.TypeDelegator::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Reflection.TypeDelegator::get_AssemblyQualifiedName()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Reflection.TypeDelegator::get_BaseType()
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.TypeDelegator::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Reflection.TypeDelegator::get_GUID()
		}
		.property instance int32 MetadataToken()
		{
			.get instance int32 System.Reflection.TypeDelegator::get_MetadataToken()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.TypeDelegator::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.TypeDelegator::get_Name()
		}
		.property instance string Namespace()
		{
			.get instance string System.Reflection.TypeDelegator::get_Namespace()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Reflection.TypeDelegator::get_TypeHandle()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Reflection.TypeDelegator::get_UnderlyingSystemType()
		}
	}
	.class public sealed serializable TypeFilter
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool Invoke(class System.Type m, object filterCriteria)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.Type m, object filterCriteria, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
}
.namespace System.Reflection.Emit
{
	.class public sealed AssemblyBuilder
		extends System.Reflection.Assembly
		implements System.Runtime.InteropServices._AssemblyBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2F 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 41 73 73 65 6D 62 6C 79 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, bool emitSymbolInfo)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ModuleBuilder DefineDynamicModule(string name, string fileName, bool emitSymbolInfo)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_ReflectionOnly()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Resources.IResourceWriter DefineResource(string name, string description, string fileName, valuetype System.Reflection.ResourceAttributes attribute)
		{
			ret
		}
		.method public hidebysig 
			instance void AddResourceFile(string name, string fileName)
		{
			ret
		}
		.method public hidebysig 
			instance void AddResourceFile(string name, string fileName, valuetype System.Reflection.ResourceAttributes attribute)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string[] GetManifestResourceNames()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class 'System.IO.FileStream' GetFile(string name)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class 'System.IO.FileStream'[] GetFiles(bool getResourceModules)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class 'System.IO.Stream' GetManifestResourceStream(class System.Type 'type', string name)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class 'System.IO.Stream' GetManifestResourceStream(string name)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Location()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_ImageRuntimeVersion()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_CodeBase()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ModuleBuilder GetDynamicModule(string name)
		{
			ret
		}
		.method public hidebysig 
			instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod)
		{
			ret
		}
		.method public hidebysig 
			instance void SetEntryPoint(class System.Reflection.MethodInfo entryMethod, valuetype System.Reflection.Emit.PEFileKinds fileKind)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.MethodInfo get_EntryPoint()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void Save(string assemblyFileName)
		{
			ret
		}
		.method public hidebysig 
			instance void Save(string assemblyFileName, valuetype System.Reflection.PortableExecutableKinds portableExecutableKind, valuetype System.Reflection.ImageFileMachine imageFileMachine)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetExportedTypes()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._AssemblyBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._AssemblyBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._AssemblyBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._AssemblyBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._AssemblyBuilder::Invoke
			ret
		}
		.property instance string CodeBase()
		{
			.get instance string System.Reflection.Emit.AssemblyBuilder::get_CodeBase()
		}
		.property instance class System.Reflection.MethodInfo EntryPoint()
		{
			.get instance class System.Reflection.MethodInfo System.Reflection.Emit.AssemblyBuilder::get_EntryPoint()
		}
		.property instance string ImageRuntimeVersion()
		{
			.get instance string System.Reflection.Emit.AssemblyBuilder::get_ImageRuntimeVersion()
		}
		.property instance string Location()
		{
			.get instance string System.Reflection.Emit.AssemblyBuilder::get_Location()
		}
		.property instance bool ReflectionOnly()
		{
			.get instance bool System.Reflection.Emit.AssemblyBuilder::get_ReflectionOnly()
		}
	}
	.class public sealed serializable AssemblyBuilderAccess
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.AssemblyBuilderAccess ReflectionOnly = int32(0x00000006)
		.field static public literal valuetype System.Reflection.Emit.AssemblyBuilderAccess Run = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.AssemblyBuilderAccess RunAndSave = int32(0x00000003)
		.field static public literal valuetype System.Reflection.Emit.AssemblyBuilderAccess Save = int32(0x00000002)
	}
	.class public sealed ConstructorBuilder
		extends System.Reflection.ConstructorInfo
		implements System.Runtime.InteropServices._ConstructorBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 32 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 43 6F 6E 73 74 72 75 63 74 6F 72 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Invoke(valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.MethodToken GetToken()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 iSequence, valuetype System.Reflection.ParameterAttributes attributes, string strParamName)
		{
			ret
		}
		.method public hidebysig 
			instance void SetSymCustomAttribute(string name, uint8[] data)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize)
		{
			ret
		}
		.method public hidebysig 
			instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Module GetModule()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ReturnType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Signature()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetImplementationFlags(valuetype System.Reflection.MethodImplAttributes attributes)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_InitLocals()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_InitLocals(bool 'value')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ConstructorBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ConstructorBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ConstructorBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ConstructorBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ConstructorBuilder::Invoke
			ret
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Reflection.Emit.ConstructorBuilder::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Reflection.Emit.ConstructorBuilder::get_CallingConvention()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.ConstructorBuilder::get_DeclaringType()
		}
		.property instance bool InitLocals()
		{
			.get instance bool System.Reflection.Emit.ConstructorBuilder::get_InitLocals()
			.set instance void System.Reflection.Emit.ConstructorBuilder::set_InitLocals(bool)
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Reflection.Emit.ConstructorBuilder::get_MethodHandle()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.ConstructorBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.ConstructorBuilder::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.ConstructorBuilder::get_ReflectedType()
		}
		.property instance class System.Type ReturnType()
		{
			.get instance class System.Type System.Reflection.Emit.ConstructorBuilder::get_ReturnType()
		}
		.property instance string Signature()
		{
			.get instance string System.Reflection.Emit.ConstructorBuilder::get_Signature()
		}
	}
	.class public CustomAttributeBuilder
		extends System.Object
		implements System.Runtime.InteropServices._CustomAttributeBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 36 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 43 75 73 74 6F 6D 41 74 74 72 69 62 75 74 65 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Reflection.ConstructorInfo con, object[] constructorArgs)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Reflection.ConstructorInfo con, object[] constructorArgs, class System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Reflection.ConstructorInfo con, object[] constructorArgs, class System.Reflection.FieldInfo[] namedFields, object[] fieldValues)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Reflection.ConstructorInfo con, object[] constructorArgs, class System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues, class System.Reflection.FieldInfo[] namedFields, object[] fieldValues)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._CustomAttributeBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._CustomAttributeBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._CustomAttributeBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._CustomAttributeBuilder::Invoke
			ret
		}
	}
	.class public DynamicILInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance class System.Reflection.Emit.DynamicMethod get_DynamicMethod()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCode(uint8[] code, int32 maxStackSize)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCode(uint8* code, int32 codeSize, int32 maxStackSize)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetExceptions(uint8[] exceptions)
		{
			ret
		}
		.method public hidebysig 
			instance void SetExceptions(uint8* exceptions, int32 exceptionsSize)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetLocalSignature(uint8[] localSignature)
		{
			ret
		}
		.method public hidebysig 
			instance void SetLocalSignature(uint8* localSignature, int32 signatureSize)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle 'method')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod 'method')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle 'method', valuetype System.RuntimeTypeHandle contextType)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle 'field')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle 'type')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(string 'literal')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetTokenFor(uint8[] signature)
		{
			ret
		}
		.property instance class System.Reflection.Emit.DynamicMethod DynamicMethod()
		{
			.get instance class System.Reflection.Emit.DynamicMethod System.Reflection.Emit.DynamicILInfo::get_DynamicMethod()
		}
	}
	.class public sealed DynamicMethod
		extends System.Reflection.MethodInfo
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Delegate CreateDelegate(class System.Type delegateType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Delegate CreateDelegate(class System.Type delegateType, object target)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo GetBaseDefinition()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReturnType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.ParameterInfo get_ReturnParameter()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_InitLocals()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_InitLocals(bool 'value')
		{
			ret
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Reflection.Emit.DynamicMethod::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Reflection.Emit.DynamicMethod::get_CallingConvention()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.DynamicMethod::get_DeclaringType()
		}
		.property instance bool InitLocals()
		{
			.get instance bool System.Reflection.Emit.DynamicMethod::get_InitLocals()
			.set instance void System.Reflection.Emit.DynamicMethod::set_InitLocals(bool)
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Reflection.Emit.DynamicMethod::get_MethodHandle()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.DynamicMethod::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.DynamicMethod::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.DynamicMethod::get_ReflectedType()
		}
		.property instance class System.Reflection.ParameterInfo ReturnParameter()
		{
			.get instance class System.Reflection.ParameterInfo System.Reflection.Emit.DynamicMethod::get_ReturnParameter()
		}
		.property instance class System.Type ReturnType()
		{
			.get instance class System.Type System.Reflection.Emit.DynamicMethod::get_ReturnType()
		}
		.property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes()
		{
			.get instance class System.Reflection.ICustomAttributeProvider System.Reflection.Emit.DynamicMethod::get_ReturnTypeCustomAttributes()
		}
	}
	.class public sealed EnumBuilder
		extends System.Type
		implements System.Runtime.InteropServices._EnumBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2B 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 45 6E 75 6D 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineLiteral(string literalName, object literalValue)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Type CreateType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.TypeToken get_TypeToken()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.Emit.FieldBuilder get_UnderlyingField()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Guid get_GUID()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AssemblyQualifiedName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_BaseType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetInterfaces()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method family virtual hidebysig 
			instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsArrayImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPrimitiveImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsValueTypeImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsByRefImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPointerImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsCOMObjectImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetElementType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool HasElementTypeImpl()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakePointerType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeByRefType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType(int32 rank)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._EnumBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._EnumBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._EnumBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EnumBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._EnumBuilder::Invoke
			ret
		}
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.Emit.EnumBuilder::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Reflection.Emit.EnumBuilder::get_AssemblyQualifiedName()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Reflection.Emit.EnumBuilder::get_BaseType()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.EnumBuilder::get_DeclaringType()
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.Emit.EnumBuilder::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Reflection.Emit.EnumBuilder::get_GUID()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.EnumBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.EnumBuilder::get_Name()
		}
		.property instance string Namespace()
		{
			.get instance string System.Reflection.Emit.EnumBuilder::get_Namespace()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.EnumBuilder::get_ReflectedType()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Reflection.Emit.EnumBuilder::get_TypeHandle()
		}
		.property instance valuetype System.Reflection.Emit.TypeToken TypeToken()
		{
			.get instance valuetype System.Reflection.Emit.TypeToken System.Reflection.Emit.EnumBuilder::get_TypeToken()
		}
		.property instance class System.Reflection.Emit.FieldBuilder UnderlyingField()
		{
			.get instance class System.Reflection.Emit.FieldBuilder System.Reflection.Emit.EnumBuilder::get_UnderlyingField()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Reflection.Emit.EnumBuilder::get_UnderlyingSystemType()
		}
	}
	.class public sealed EventBuilder
		extends System.Object
		implements System.Runtime.InteropServices._EventBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 45 76 65 6E 74 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.EventToken GetEventToken()
		{
			ret
		}
		.method public hidebysig 
			instance void SetAddOnMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetRemoveOnMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetRaiseMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void AddOtherMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._EventBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._EventBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._EventBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._EventBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._EventBuilder::Invoke
			ret
		}
	}
	.class public sequential sealed serializable EventToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.EventToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.EventToken a, valuetype System.Reflection.Emit.EventToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.EventToken a, valuetype System.Reflection.Emit.EventToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.EventToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.EventToken::get_Token()
		}
	}
	.class public sealed FieldBuilder
		extends System.Reflection.FieldInfo
		implements System.Runtime.InteropServices._FieldBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 46 69 65 6C 64 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_FieldType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object GetValue(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetValue(object obj, object val, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeFieldHandle get_FieldHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.FieldAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.FieldToken GetToken()
		{
			ret
		}
		.method public hidebysig 
			instance void SetOffset(int32 iOffset)
		{
			ret
		}
		.method public hidebysig 
			instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 78 41 6E 20 61 6C 74 65 72 6E 61 74 65 20 41 50 49 20 69 73 20 61 76 61 69 6C 61 62 6C 65 3A 20 45 6D 69 74 20 74 68 65 20 4D 61 72 73 68 61 6C 41 73 20 63 75 73 74 6F 6D 20 61 74 74 72 69 62 75 74 65 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetConstant(object defaultValue)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._FieldBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._FieldBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._FieldBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._FieldBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._FieldBuilder::Invoke
			ret
		}
		.property instance valuetype System.Reflection.FieldAttributes Attributes()
		{
			.get instance valuetype System.Reflection.FieldAttributes System.Reflection.Emit.FieldBuilder::get_Attributes()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.FieldBuilder::get_DeclaringType()
		}
		.property instance valuetype System.RuntimeFieldHandle FieldHandle()
		{
			.get instance valuetype System.RuntimeFieldHandle System.Reflection.Emit.FieldBuilder::get_FieldHandle()
		}
		.property instance class System.Type FieldType()
		{
			.get instance class System.Type System.Reflection.Emit.FieldBuilder::get_FieldType()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.FieldBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.FieldBuilder::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.FieldBuilder::get_ReflectedType()
		}
	}
	.class public sequential sealed serializable FieldToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.FieldToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.FieldToken a, valuetype System.Reflection.Emit.FieldToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.FieldToken a, valuetype System.Reflection.Emit.FieldToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.FieldToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.FieldToken::get_Token()
		}
	}
	.class public sealed serializable FlowControl
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.FlowControl Branch = int32(0x00000000)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Break = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Call = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Cond_Branch = int32(0x00000003)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Meta = int32(0x00000004)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Next = int32(0x00000005)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Phi = int32(0x00000006)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 4A 54 68 69 73 20 41 50 49 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Return = int32(0x00000007)
		.field static public literal valuetype System.Reflection.Emit.FlowControl Throw = int32(0x00000008)
	}
	.class public sealed GenericTypeParameterBuilder
		extends System.Type
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakePointerType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeByRefType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType(int32 rank)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Guid get_GUID()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AssemblyQualifiedName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_BaseType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetInterfaces()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method family virtual hidebysig 
			instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsArrayImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsByRefImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPointerImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPrimitiveImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsCOMObjectImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetElementType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool HasElementTypeImpl()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetGenericArguments()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericTypeDefinition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericParameter()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_GenericParameterPosition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_ContainsGenericParameters()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.MethodBase get_DeclaringMethod()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetGenericTypeDefinition()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeGenericType(class System.Type[] typeArguments)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method family virtual hidebysig 
			instance bool IsValueTypeImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsAssignableFrom(class System.Type c)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubclassOf(class System.Type c)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetBaseTypeConstraint(class System.Type baseTypeConstraint)
		{
			ret
		}
		.method public hidebysig 
			instance void SetInterfaceConstraints(class System.Type[] interfaceConstraints)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetGenericParameterAttributes(valuetype System.Reflection.GenericParameterAttributes genericParameterAttributes)
		{
			ret
		}
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.Emit.GenericTypeParameterBuilder::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Reflection.Emit.GenericTypeParameterBuilder::get_AssemblyQualifiedName()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Reflection.Emit.GenericTypeParameterBuilder::get_BaseType()
		}
		.property instance bool ContainsGenericParameters()
		{
			.get instance bool System.Reflection.Emit.GenericTypeParameterBuilder::get_ContainsGenericParameters()
		}
		.property instance class System.Reflection.MethodBase DeclaringMethod()
		{
			.get instance class System.Reflection.MethodBase System.Reflection.Emit.GenericTypeParameterBuilder::get_DeclaringMethod()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.GenericTypeParameterBuilder::get_DeclaringType()
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.Emit.GenericTypeParameterBuilder::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Reflection.Emit.GenericTypeParameterBuilder::get_GUID()
		}
		.property instance int32 GenericParameterPosition()
		{
			.get instance int32 System.Reflection.Emit.GenericTypeParameterBuilder::get_GenericParameterPosition()
		}
		.property instance bool IsGenericParameter()
		{
			.get instance bool System.Reflection.Emit.GenericTypeParameterBuilder::get_IsGenericParameter()
		}
		.property instance bool IsGenericType()
		{
			.get instance bool System.Reflection.Emit.GenericTypeParameterBuilder::get_IsGenericType()
		}
		.property instance bool IsGenericTypeDefinition()
		{
			.get instance bool System.Reflection.Emit.GenericTypeParameterBuilder::get_IsGenericTypeDefinition()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.GenericTypeParameterBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.GenericTypeParameterBuilder::get_Name()
		}
		.property instance string Namespace()
		{
			.get instance string System.Reflection.Emit.GenericTypeParameterBuilder::get_Namespace()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.GenericTypeParameterBuilder::get_ReflectedType()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Reflection.Emit.GenericTypeParameterBuilder::get_TypeHandle()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Reflection.Emit.GenericTypeParameterBuilder::get_UnderlyingSystemType()
		}
	}
	.class public ILGenerator
		extends System.Object
		implements System.Runtime.InteropServices._ILGenerator
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2B 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 49 4C 47 65 6E 65 72 61 74 6F 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, uint8 arg)
		{
			ret
		}
		.method public hidebysig 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int8 arg)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int16 arg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int32 arg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.MethodInfo meth)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitCalli(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type[] optionalParameterTypes)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitCalli(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallConv, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitCall(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.MethodInfo methodInfo, class System.Type[] optionalParameterTypes)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.Emit.SignatureHelper signature)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.ConstructorInfo con)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Type cls)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, int64 arg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, float32 arg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, float64 arg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.Emit.Label label)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, valuetype System.Reflection.Emit.Label[] labels)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.FieldInfo 'field')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, string str)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Emit(valuetype System.Reflection.Emit.OpCode opcode, class System.Reflection.Emit.LocalBuilder local)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.Reflection.Emit.Label BeginExceptionBlock()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EndExceptionBlock()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void BeginExceptFilterBlock()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void BeginCatchBlock(class System.Type exceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void BeginFaultBlock()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void BeginFinallyBlock()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.Reflection.Emit.Label DefineLabel()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void MarkLabel(valuetype System.Reflection.Emit.Label loc)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ThrowException(class System.Type excType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitWriteLine(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitWriteLine(class System.Reflection.Emit.LocalBuilder localBuilder)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EmitWriteLine(class System.Reflection.FieldInfo fld)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Emit.LocalBuilder DeclareLocal(class System.Type localType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Reflection.Emit.LocalBuilder DeclareLocal(class System.Type localType, bool 'pinned')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void UsingNamespace(string usingNamespace)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void MarkSequencePoint(class System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void BeginScope()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void EndScope()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ILGenerator::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ILGenerator::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ILGenerator::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ILGenerator.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ILGenerator::Invoke
			ret
		}
	}
	.class public sequential sealed serializable Label
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.Label obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.Label a, valuetype System.Reflection.Emit.Label b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.Label a, valuetype System.Reflection.Emit.Label b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed LocalBuilder
		extends System.Reflection.LocalVariableInfo
		implements System.Runtime.InteropServices._LocalBuilder
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4C 6F 63 61 6C 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig specialname 
			instance bool get_IsPinned()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_LocalType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_LocalIndex()
		{
			ret
		}
		.method public hidebysig 
			instance void SetLocalSymInfo(string name)
		{
			ret
		}
		.method public hidebysig 
			instance void SetLocalSymInfo(string name, int32 startOffset, int32 endOffset)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._LocalBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._LocalBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._LocalBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._LocalBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._LocalBuilder::Invoke
			ret
		}
		.property instance bool IsPinned()
		{
			.get instance bool System.Reflection.Emit.LocalBuilder::get_IsPinned()
		}
		.property instance int32 LocalIndex()
		{
			.get instance int32 System.Reflection.Emit.LocalBuilder::get_LocalIndex()
		}
		.property instance class System.Type LocalType()
		{
			.get instance class System.Type System.Reflection.Emit.LocalBuilder::get_LocalType()
		}
	}
	.class public sealed MethodBuilder
		extends System.Reflection.MethodInfo
		implements System.Runtime.InteropServices._MethodBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2D 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 65 74 68 6F 64 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo GetBaseDefinition()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.ParameterInfo get_ReturnParameter()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericMethodDefinition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_ContainsGenericParameters()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo GetGenericMethodDefinition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericMethod()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetGenericArguments()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo MakeGenericMethod(class System.Type[] typeArguments)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.MethodToken GetToken()
		{
			ret
		}
		.method public hidebysig 
			instance void SetParameters(class System.Type[] parameterTypes)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetReturnType(class System.Type returnType)
		{
			ret
		}
		.method public hidebysig 
			instance void SetSignature(class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string strParamName)
		{
			ret
		}
		.method public hidebysig 
			instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 78 41 6E 20 61 6C 74 65 72 6E 61 74 65 20 41 50 49 20 69 73 20 61 76 61 69 6C 61 62 6C 65 3A 20 45 6D 69 74 20 74 68 65 20 4D 61 72 73 68 61 6C 41 73 20 63 75 73 74 6F 6D 20 61 74 74 72 69 62 75 74 65 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetSymCustomAttribute(string name, uint8[] data)
		{
			ret
		}
		.method public hidebysig 
			instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateMethodBody(uint8[] 'il', int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance void SetImplementationFlags(valuetype System.Reflection.MethodImplAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 size)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_InitLocals()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_InitLocals(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Module GetModule()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Signature()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._MethodBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._MethodBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._MethodBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._MethodBuilder::Invoke
			ret
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Reflection.Emit.MethodBuilder::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Reflection.Emit.MethodBuilder::get_CallingConvention()
		}
		.property instance bool ContainsGenericParameters()
		{
			.get instance bool System.Reflection.Emit.MethodBuilder::get_ContainsGenericParameters()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.MethodBuilder::get_DeclaringType()
		}
		.property instance bool InitLocals()
		{
			.get instance bool System.Reflection.Emit.MethodBuilder::get_InitLocals()
			.set instance void System.Reflection.Emit.MethodBuilder::set_InitLocals(bool)
		}
		.property instance bool IsGenericMethod()
		{
			.get instance bool System.Reflection.Emit.MethodBuilder::get_IsGenericMethod()
		}
		.property instance bool IsGenericMethodDefinition()
		{
			.get instance bool System.Reflection.Emit.MethodBuilder::get_IsGenericMethodDefinition()
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Reflection.Emit.MethodBuilder::get_MethodHandle()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.MethodBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.MethodBuilder::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.MethodBuilder::get_ReflectedType()
		}
		.property instance class System.Reflection.ParameterInfo ReturnParameter()
		{
			.get instance class System.Reflection.ParameterInfo System.Reflection.Emit.MethodBuilder::get_ReturnParameter()
		}
		.property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes()
		{
			.get instance class System.Reflection.ICustomAttributeProvider System.Reflection.Emit.MethodBuilder::get_ReturnTypeCustomAttributes()
		}
		.property instance string Signature()
		{
			.get instance string System.Reflection.Emit.MethodBuilder::get_Signature()
		}
	}
	.class public sealed MethodRental
		extends System.Object
		implements System.Runtime.InteropServices._MethodRental
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2C 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 65 74 68 6F 64 52 65 6E 74 61 6C 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void SwapMethodBody(class System.Type cls, int32 methodtoken, native int rgIL, int32 methodSize, int32 'flags')
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._MethodRental::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodRental.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._MethodRental::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodRental.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._MethodRental::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._MethodRental.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._MethodRental::Invoke
			ret
		}
		.field static public literal int32 JitImmediate = int32(0x00000001)
		.field static public literal int32 JitOnDemand = int32(0x00000000)
	}
	.class public sequential sealed serializable MethodToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.MethodToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.MethodToken a, valuetype System.Reflection.Emit.MethodToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.MethodToken a, valuetype System.Reflection.Emit.MethodToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.MethodToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.MethodToken::get_Token()
		}
	}
	.class public ModuleBuilder
		extends System.Reflection.Module
		implements System.Runtime.InteropServices._ModuleBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2D 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 4D 6F 64 75 6C 65 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance class System.Type[] GetTypes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetType(string className)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetType(string className, bool ignoreCase)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetType(string className, bool throwOnError, bool ignoreCase)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullyQualifiedName()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typesize)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packingSize, int32 typesize)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packsize)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.EnumBuilder DefineEnum(string name, valuetype System.Reflection.TypeAttributes visibility, class System.Type underlyingType)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Resources.IResourceWriter DefineResource(string name, string description)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Resources.IResourceWriter DefineResource(string name, string description, valuetype System.Reflection.ResourceAttributes attribute)
		{
			ret
		}
		.method public hidebysig 
			instance void DefineManifestResource(string name, class 'System.IO.Stream' 'stream', valuetype System.Reflection.ResourceAttributes attribute)
		{
			ret
		}
		.method public hidebysig 
			instance void DefineUnmanagedResource(uint8[] resource)
		{
			ret
		}
		.method public hidebysig 
			instance void DefineUnmanagedResource(string resourceFileName)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineGlobalMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineGlobalMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineGlobalMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] requiredReturnTypeCustomModifiers, class System.Type[] optionalReturnTypeCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] requiredParameterTypeCustomModifiers, class System.Type[][] optionalParameterTypeCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateGlobalFunctions()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, uint8[] data, valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.TypeToken GetTypeToken(class System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.TypeToken GetTypeToken(string name)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.MethodToken GetMethodToken(class System.Reflection.MethodInfo 'method')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.MethodToken GetArrayMethodToken(class System.Type arrayClass, string methodName, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.MethodInfo GetArrayMethod(class System.Type arrayClass, string methodName, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.MethodToken GetConstructorToken(class System.Reflection.ConstructorInfo con)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.FieldToken GetFieldToken(class System.Reflection.FieldInfo 'field')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.StringToken GetStringConstant(string str)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.SignatureToken GetSignatureToken(class System.Reflection.Emit.SignatureHelper sigHelper)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Reflection.Emit.SignatureToken GetSignatureToken(uint8[] sigBytes, int32 sigLength)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument(string url, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType)
		{
			ret
		}
		.method public hidebysig 
			instance void SetUserEntryPoint(class System.Reflection.MethodInfo entryPoint)
		{
			ret
		}
		.method public hidebysig 
			instance void SetSymCustomAttribute(string name, uint8[] data)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsTransient()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ModuleBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ModuleBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ModuleBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ModuleBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ModuleBuilder::Invoke
			ret
		}
		.property instance string FullyQualifiedName()
		{
			.get instance string System.Reflection.Emit.ModuleBuilder::get_FullyQualifiedName()
		}
	}
	.class public sequential sealed OpCode
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.OperandType get_OperandType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.FlowControl get_FlowControl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.OpCodeType get_OpCodeType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.StackBehaviour get_StackBehaviourPop()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.StackBehaviour get_StackBehaviourPush()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Size()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int16 get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.OpCode obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.OpCode a, valuetype System.Reflection.Emit.OpCode b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.OpCode a, valuetype System.Reflection.Emit.OpCode b)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance valuetype System.Reflection.Emit.FlowControl FlowControl()
		{
			.get instance valuetype System.Reflection.Emit.FlowControl System.Reflection.Emit.OpCode::get_FlowControl()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.OpCode::get_Name()
		}
		.property instance valuetype System.Reflection.Emit.OpCodeType OpCodeType()
		{
			.get instance valuetype System.Reflection.Emit.OpCodeType System.Reflection.Emit.OpCode::get_OpCodeType()
		}
		.property instance valuetype System.Reflection.Emit.OperandType OperandType()
		{
			.get instance valuetype System.Reflection.Emit.OperandType System.Reflection.Emit.OpCode::get_OperandType()
		}
		.property instance int32 Size()
		{
			.get instance int32 System.Reflection.Emit.OpCode::get_Size()
		}
		.property instance valuetype System.Reflection.Emit.StackBehaviour StackBehaviourPop()
		{
			.get instance valuetype System.Reflection.Emit.StackBehaviour System.Reflection.Emit.OpCode::get_StackBehaviourPop()
		}
		.property instance valuetype System.Reflection.Emit.StackBehaviour StackBehaviourPush()
		{
			.get instance valuetype System.Reflection.Emit.StackBehaviour System.Reflection.Emit.OpCode::get_StackBehaviourPush()
		}
		.property instance int16 Value()
		{
			.get instance int16 System.Reflection.Emit.OpCode::get_Value()
		}
	}
	.class public sealed serializable OpCodeType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Annotation = int32(0x00000000)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 4A 54 68 69 73 20 41 50 49 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Macro = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Nternal = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Objmodel = int32(0x00000003)
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Prefix = int32(0x00000004)
		.field static public literal valuetype System.Reflection.Emit.OpCodeType Primitive = int32(0x00000005)
	}
	.class public OpCodes
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.OpCode Add
		.field static public initonly valuetype System.Reflection.Emit.OpCode Add_Ovf
		.field static public initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode And
		.field static public initonly valuetype System.Reflection.Emit.OpCode Arglist
		.field static public initonly valuetype System.Reflection.Emit.OpCode Beq
		.field static public initonly valuetype System.Reflection.Emit.OpCode Beq_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bge
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bge_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bge_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bgt
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bgt_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bgt_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ble
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ble_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ble_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Blt
		.field static public initonly valuetype System.Reflection.Emit.OpCode Blt_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Blt_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bne_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Box
		.field static public initonly valuetype System.Reflection.Emit.OpCode Br
		.field static public initonly valuetype System.Reflection.Emit.OpCode Br_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Break
		.field static public initonly valuetype System.Reflection.Emit.OpCode Brfalse
		.field static public initonly valuetype System.Reflection.Emit.OpCode Brfalse_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Brtrue
		.field static public initonly valuetype System.Reflection.Emit.OpCode Brtrue_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Call
		.field static public initonly valuetype System.Reflection.Emit.OpCode Calli
		.field static public initonly valuetype System.Reflection.Emit.OpCode Callvirt
		.field static public initonly valuetype System.Reflection.Emit.OpCode Castclass
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ceq
		.field static public initonly valuetype System.Reflection.Emit.OpCode Cgt
		.field static public initonly valuetype System.Reflection.Emit.OpCode Cgt_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ckfinite
		.field static public initonly valuetype System.Reflection.Emit.OpCode Clt
		.field static public initonly valuetype System.Reflection.Emit.OpCode Clt_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Constrained
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_U
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_U1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_U2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_U4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Conv_U8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Cpblk
		.field static public initonly valuetype System.Reflection.Emit.OpCode Cpobj
		.field static public initonly valuetype System.Reflection.Emit.OpCode Div
		.field static public initonly valuetype System.Reflection.Emit.OpCode Div_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Dup
		.field static public initonly valuetype System.Reflection.Emit.OpCode Endfilter
		.field static public initonly valuetype System.Reflection.Emit.OpCode Endfinally
		.field static public initonly valuetype System.Reflection.Emit.OpCode Initblk
		.field static public initonly valuetype System.Reflection.Emit.OpCode Initobj
		.field static public initonly valuetype System.Reflection.Emit.OpCode Isinst
		.field static public initonly valuetype System.Reflection.Emit.OpCode Jmp
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg_0
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg_1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg_2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg_3
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarg_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarga
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldarga_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldc_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldelema
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldfld
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldflda
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldftn
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_U1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_U2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldind_U4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldlen
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc_0
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc_1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc_2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc_3
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloc_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloca
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldloca_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldnull
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldobj
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldsfld
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldsflda
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldstr
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldtoken
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn
		.field static public initonly valuetype System.Reflection.Emit.OpCode Leave
		.field static public initonly valuetype System.Reflection.Emit.OpCode Leave_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Localloc
		.field static public initonly valuetype System.Reflection.Emit.OpCode Mkrefany
		.field static public initonly valuetype System.Reflection.Emit.OpCode Mul
		.field static public initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf
		.field static public initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Neg
		.field static public initonly valuetype System.Reflection.Emit.OpCode Newarr
		.field static public initonly valuetype System.Reflection.Emit.OpCode Newobj
		.field static public initonly valuetype System.Reflection.Emit.OpCode Nop
		.field static public initonly valuetype System.Reflection.Emit.OpCode Not
		.field static public initonly valuetype System.Reflection.Emit.OpCode Or
		.field static public initonly valuetype System.Reflection.Emit.OpCode Pop
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix3
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix5
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix6
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefix7
		.field static public initonly valuetype System.Reflection.Emit.OpCode Prefixref
		.field static public initonly valuetype System.Reflection.Emit.OpCode Readonly
		.field static public initonly valuetype System.Reflection.Emit.OpCode Refanytype
		.field static public initonly valuetype System.Reflection.Emit.OpCode Refanyval
		.field static public initonly valuetype System.Reflection.Emit.OpCode Rem
		.field static public initonly valuetype System.Reflection.Emit.OpCode Rem_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Ret
		.field static public initonly valuetype System.Reflection.Emit.OpCode Rethrow
		.field static public initonly valuetype System.Reflection.Emit.OpCode Shl
		.field static public initonly valuetype System.Reflection.Emit.OpCode Shr
		.field static public initonly valuetype System.Reflection.Emit.OpCode Shr_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Sizeof
		.field static public initonly valuetype System.Reflection.Emit.OpCode Starg
		.field static public initonly valuetype System.Reflection.Emit.OpCode Starg_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stfld
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_I
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_I1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_I2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_I4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_I8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_R4
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_R8
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stind_Ref
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc_0
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc_1
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc_2
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc_3
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stloc_S
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stobj
		.field static public initonly valuetype System.Reflection.Emit.OpCode Stsfld
		.field static public initonly valuetype System.Reflection.Emit.OpCode Sub
		.field static public initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf
		.field static public initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un
		.field static public initonly valuetype System.Reflection.Emit.OpCode Switch
		.field static public initonly valuetype System.Reflection.Emit.OpCode Tailcall
		.field static public initonly valuetype System.Reflection.Emit.OpCode Throw
		.field static public initonly valuetype System.Reflection.Emit.OpCode Unaligned
		.field static public initonly valuetype System.Reflection.Emit.OpCode Unbox
		.field static public initonly valuetype System.Reflection.Emit.OpCode Unbox_Any
		.field static public initonly valuetype System.Reflection.Emit.OpCode Volatile
		.field static public initonly valuetype System.Reflection.Emit.OpCode Xor
	}
	.class public sealed serializable OperandType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineBrTarget = int32(0x00000000)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineField = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineI = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineI8 = int32(0x00000003)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineMethod = int32(0x00000004)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineNone = int32(0x00000005)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlinePhi = int32(0x00000006)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 4A 54 68 69 73 20 41 50 49 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineR = int32(0x00000007)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineSig = int32(0x00000009)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineString = int32(0x0000000A)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineSwitch = int32(0x0000000B)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineTok = int32(0x0000000C)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineType = int32(0x0000000D)
		.field static public literal valuetype System.Reflection.Emit.OperandType InlineVar = int32(0x0000000E)
		.field static public literal valuetype System.Reflection.Emit.OperandType ShortInlineBrTarget = int32(0x0000000F)
		.field static public literal valuetype System.Reflection.Emit.OperandType ShortInlineI = int32(0x00000010)
		.field static public literal valuetype System.Reflection.Emit.OperandType ShortInlineR = int32(0x00000011)
		.field static public literal valuetype System.Reflection.Emit.OperandType ShortInlineVar = int32(0x00000012)
	}
	.class public sealed serializable PEFileKinds
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.PEFileKinds ConsoleApplication = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.PEFileKinds Dll = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.PEFileKinds WindowApplication = int32(0x00000003)
	}
	.class public sealed serializable PackingSize
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size1 = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size128 = int32(0x00000080)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size16 = int32(0x00000010)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size2 = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size32 = int32(0x00000020)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size4 = int32(0x00000004)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size64 = int32(0x00000040)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Size8 = int32(0x00000008)
		.field static public literal valuetype System.Reflection.Emit.PackingSize Unspecified = int32(0x00000000)
	}
	.class public ParameterBuilder
		extends System.Object
		implements System.Runtime.InteropServices._ParameterBuilder
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 30 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 50 61 72 61 6D 65 74 65 72 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot 
			instance void SetMarshal(class System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 78 41 6E 20 61 6C 74 65 72 6E 61 74 65 20 41 50 49 20 69 73 20 61 76 61 69 6C 61 62 6C 65 3A 20 45 6D 69 74 20 74 68 65 20 4D 61 72 73 68 61 6C 41 73 20 63 75 73 74 6F 6D 20 61 74 74 72 69 62 75 74 65 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetConstant(object defaultValue)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype System.Reflection.Emit.ParameterToken GetToken()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._ParameterBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._ParameterBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._ParameterBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._ParameterBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._ParameterBuilder::Invoke
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Position()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Attributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsIn()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsOut()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsOptional()
		{
			ret
		}
		.property instance int32 Attributes()
		{
			.get instance int32 System.Reflection.Emit.ParameterBuilder::get_Attributes()
		}
		.property instance bool IsIn()
		{
			.get instance bool System.Reflection.Emit.ParameterBuilder::get_IsIn()
		}
		.property instance bool IsOptional()
		{
			.get instance bool System.Reflection.Emit.ParameterBuilder::get_IsOptional()
		}
		.property instance bool IsOut()
		{
			.get instance bool System.Reflection.Emit.ParameterBuilder::get_IsOut()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.ParameterBuilder::get_Name()
		}
		.property instance int32 Position()
		{
			.get instance int32 System.Reflection.Emit.ParameterBuilder::get_Position()
		}
	}
	.class public sequential sealed serializable ParameterToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.ParameterToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.ParameterToken a, valuetype System.Reflection.Emit.ParameterToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.ParameterToken a, valuetype System.Reflection.Emit.ParameterToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.ParameterToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.ParameterToken::get_Token()
		}
	}
	.class public sealed PropertyBuilder
		extends System.Reflection.PropertyInfo
		implements System.Runtime.InteropServices._PropertyBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2F 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 50 72 6F 70 65 72 74 79 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance void SetConstant(object defaultValue)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.PropertyToken get_PropertyToken()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public hidebysig 
			instance void SetGetMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetSetMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void AddOtherMethod(class System.Reflection.Emit.MethodBuilder mdBuilder)
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object GetValue(object obj, object[] index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetValue(object obj, object 'value', object[] index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetValue(object obj, object 'value', valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ParameterInfo[] GetIndexParameters()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_PropertyType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.PropertyAttributes get_Attributes()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._PropertyBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._PropertyBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._PropertyBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._PropertyBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._PropertyBuilder::Invoke
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.property instance valuetype System.Reflection.PropertyAttributes Attributes()
		{
			.get instance valuetype System.Reflection.PropertyAttributes System.Reflection.Emit.PropertyBuilder::get_Attributes()
		}
		.property instance bool CanRead()
		{
			.get instance bool System.Reflection.Emit.PropertyBuilder::get_CanRead()
		}
		.property instance bool CanWrite()
		{
			.get instance bool System.Reflection.Emit.PropertyBuilder::get_CanWrite()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.PropertyBuilder::get_DeclaringType()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.PropertyBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.PropertyBuilder::get_Name()
		}
		.property instance valuetype System.Reflection.Emit.PropertyToken PropertyToken()
		{
			.get instance valuetype System.Reflection.Emit.PropertyToken System.Reflection.Emit.PropertyBuilder::get_PropertyToken()
		}
		.property instance class System.Type PropertyType()
		{
			.get instance class System.Type System.Reflection.Emit.PropertyBuilder::get_PropertyType()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.PropertyBuilder::get_ReflectedType()
		}
	}
	.class public sequential sealed serializable PropertyToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.PropertyToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.PropertyToken a, valuetype System.Reflection.Emit.PropertyToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.PropertyToken a, valuetype System.Reflection.Emit.PropertyToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.PropertyToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.PropertyToken::get_Token()
		}
	}
	.class public sealed SignatureHelper
		extends System.Object
		implements System.Runtime.InteropServices._SignatureHelper
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2F 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 53 69 67 6E 61 74 75 72 65 48 65 6C 70 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(class System.Reflection.Module mod, valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallConv, class System.Type returnType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper()
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetMethodSigHelper(valuetype System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, class System.Type returnType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper(class System.Reflection.Module mod)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetFieldSigHelper(class System.Reflection.Module mod)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetPropertySigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.SignatureHelper GetPropertySigHelper(class System.Reflection.Module mod, class System.Type returnType, class System.Type[] requiredReturnTypeCustomModifiers, class System.Type[] optionalReturnTypeCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] requiredParameterTypeCustomModifiers, class System.Type[][] optionalParameterTypeCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance void AddArgument(class System.Type clsArgument)
		{
			ret
		}
		.method public hidebysig 
			instance void AddArgument(class System.Type argument, bool 'pinned')
		{
			ret
		}
		.method public hidebysig 
			instance void AddArguments(class System.Type[] arguments, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance void AddArgument(class System.Type argument, class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance void AddSentinel()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance uint8[] GetSignature()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._SignatureHelper::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._SignatureHelper::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._SignatureHelper::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._SignatureHelper.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._SignatureHelper::Invoke
			ret
		}
	}
	.class public sequential sealed SignatureToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.SignatureToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.SignatureToken a, valuetype System.Reflection.Emit.SignatureToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.SignatureToken a, valuetype System.Reflection.Emit.SignatureToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.SignatureToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.SignatureToken::get_Token()
		}
	}
	.class public sealed serializable StackBehaviour
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pop0 = int32(0x00000000)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pop1 = int32(0x00000001)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pop1_pop1 = int32(0x00000002)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi = int32(0x00000003)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_pop1 = int32(0x00000004)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_popi = int32(0x00000005)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_popi8 = int32(0x00000006)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_popi_popi = int32(0x00000007)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_popr4 = int32(0x00000008)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popi_popr8 = int32(0x00000009)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref = int32(0x0000000A)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_pop1 = int32(0x0000000B)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi = int32(0x0000000C)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_pop1 = int32(0x0000001C)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_popi = int32(0x0000000D)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_popi8 = int32(0x0000000E)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_popr4 = int32(0x0000000F)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_popr8 = int32(0x00000010)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Popref_popi_popref = int32(0x00000011)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Push0 = int32(0x00000012)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Push1 = int32(0x00000013)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Push1_push1 = int32(0x00000014)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pushi = int32(0x00000015)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pushi8 = int32(0x00000016)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pushr4 = int32(0x00000017)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pushr8 = int32(0x00000018)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Pushref = int32(0x00000019)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Varpop = int32(0x0000001A)
		.field static public literal valuetype System.Reflection.Emit.StackBehaviour Varpush = int32(0x0000001B)
	}
	.class public sequential sealed serializable StringToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.StringToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.StringToken a, valuetype System.Reflection.Emit.StringToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.StringToken a, valuetype System.Reflection.Emit.StringToken b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.StringToken::get_Token()
		}
	}
	.class public sealed TypeBuilder
		extends System.Type
		implements System.Runtime.InteropServices._TypeBuilder
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 2B 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 54 79 70 65 42 75 69 6C 64 65 72 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.MethodInfo GetMethod(class System.Type 'type', class System.Reflection.MethodInfo 'method')
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.ConstructorInfo GetConstructor(class System.Type 'type', class System.Reflection.ConstructorInfo constructor)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.FieldInfo GetField(class System.Type 'type', class System.Reflection.FieldInfo 'field')
		{
			ret
		}
		.method public hidebysig 
			instance bool IsCreated()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_DeclaringType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_ReflectedType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Module get_Module()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Guid get_GUID()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AssemblyQualifiedName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_BaseType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetInterfaces()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsAssignableFrom(class System.Type c)
		{
			ret
		}
		.method family virtual hidebysig 
			instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsArrayImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsByRefImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPointerImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsPrimitiveImpl()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool IsCOMObjectImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetElementType()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool HasElementTypeImpl()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubclassOf(class System.Type c)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakePointerType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeByRefType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeArrayType(int32 rank)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance valuetype System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(string[] names)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type MakeGenericType(class System.Type[] typeArguments)
		{
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type[] GetGenericArguments()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericTypeDefinition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericType()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsGenericParameter()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_GenericParameterPosition()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Reflection.MethodBase get_DeclaringMethod()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Type GetGenericTypeDefinition()
		{
			ret
		}
		.method public hidebysig 
			instance void DefineMethodOverride(class System.Reflection.MethodInfo methodInfoBody, class System.Reflection.MethodInfo methodInfoDeclaration)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefineMethod(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor(valuetype System.Reflection.MethodAttributes attributes)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.ConstructorBuilder DefineConstructor(valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type[] parameterTypes, class System.Type[][] requiredCustomModifiers, class System.Type[][] optionalCustomModifiers)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.MethodBuilder DefinePInvokeMethod(string name, string dllName, string entryName, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers, valuetype System.Runtime.InteropServices.CallingConvention nativeCallConv, valuetype System.Runtime.InteropServices.CharSet nativeCharSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, class System.Type[] interfaces)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, int32 typeSize)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.TypeBuilder DefineNestedType(string name, valuetype System.Reflection.TypeAttributes attr, class System.Type parent, valuetype System.Reflection.Emit.PackingSize packSize)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type 'type', valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineField(string fieldName, class System.Type 'type', class System.Type[] requiredCustomModifiers, class System.Type[] optionalCustomModifiers, valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineInitializedData(string name, uint8[] data, valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.FieldBuilder DefineUninitializedData(string name, int32 size, valuetype System.Reflection.FieldAttributes attributes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] parameterTypes)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.PropertyBuilder DefineProperty(string name, valuetype System.Reflection.PropertyAttributes attributes, class System.Type returnType, class System.Type[] returnTypeRequiredCustomModifiers, class System.Type[] returnTypeOptionalCustomModifiers, class System.Type[] parameterTypes, class System.Type[][] parameterTypeRequiredCustomModifiers, class System.Type[][] parameterTypeOptionalCustomModifiers)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Reflection.Emit.EventBuilder DefineEvent(string name, valuetype System.Reflection.EventAttributes attributes, class System.Type eventtype)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Type CreateType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Size()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.PackingSize get_PackingSize()
		{
			ret
		}
		.method public hidebysig 
			instance void SetParent(class System.Type parent)
		{
			ret
		}
		.method public hidebysig 
			instance void AddInterfaceImplementation(class System.Type interfaceType)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddDeclarativeSecurity(valuetype System.Security.Permissions.SecurityAction action, class System.Security.PermissionSet pset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Reflection.Emit.TypeToken get_TypeToken()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.ConstructorInfo con, uint8[] binaryAttribute)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig 
			instance void SetCustomAttribute(class System.Reflection.Emit.CustomAttributeBuilder customBuilder)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._TypeBuilder::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._TypeBuilder::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._TypeBuilder::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._TypeBuilder.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._TypeBuilder::Invoke
			ret
		}
		.field static public literal int32 UnspecifiedTypeSize = int32(0x00000000)
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Reflection.Emit.TypeBuilder::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Reflection.Emit.TypeBuilder::get_AssemblyQualifiedName()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Reflection.Emit.TypeBuilder::get_BaseType()
		}
		.property instance class System.Reflection.MethodBase DeclaringMethod()
		{
			.get instance class System.Reflection.MethodBase System.Reflection.Emit.TypeBuilder::get_DeclaringMethod()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Reflection.Emit.TypeBuilder::get_DeclaringType()
		}
		.property instance string FullName()
		{
			.get instance string System.Reflection.Emit.TypeBuilder::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Reflection.Emit.TypeBuilder::get_GUID()
		}
		.property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes()
		{
			.get instance valuetype System.Reflection.GenericParameterAttributes System.Reflection.Emit.TypeBuilder::get_GenericParameterAttributes()
		}
		.property instance int32 GenericParameterPosition()
		{
			.get instance int32 System.Reflection.Emit.TypeBuilder::get_GenericParameterPosition()
		}
		.property instance bool IsGenericParameter()
		{
			.get instance bool System.Reflection.Emit.TypeBuilder::get_IsGenericParameter()
		}
		.property instance bool IsGenericType()
		{
			.get instance bool System.Reflection.Emit.TypeBuilder::get_IsGenericType()
		}
		.property instance bool IsGenericTypeDefinition()
		{
			.get instance bool System.Reflection.Emit.TypeBuilder::get_IsGenericTypeDefinition()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Reflection.Emit.TypeBuilder::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Reflection.Emit.TypeBuilder::get_Name()
		}
		.property instance string Namespace()
		{
			.get instance string System.Reflection.Emit.TypeBuilder::get_Namespace()
		}
		.property instance valuetype System.Reflection.Emit.PackingSize PackingSize()
		{
			.get instance valuetype System.Reflection.Emit.PackingSize System.Reflection.Emit.TypeBuilder::get_PackingSize()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Reflection.Emit.TypeBuilder::get_ReflectedType()
		}
		.property instance int32 Size()
		{
			.get instance int32 System.Reflection.Emit.TypeBuilder::get_Size()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Reflection.Emit.TypeBuilder::get_TypeHandle()
		}
		.property instance valuetype System.Reflection.Emit.TypeToken TypeToken()
		{
			.get instance valuetype System.Reflection.Emit.TypeToken System.Reflection.Emit.TypeBuilder::get_TypeToken()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Reflection.Emit.TypeBuilder::get_UnderlyingSystemType()
		}
	}
	.class public sequential sealed serializable TypeToken
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_Token()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Reflection.Emit.TypeToken obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Reflection.Emit.TypeToken a, valuetype System.Reflection.Emit.TypeToken b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Reflection.Emit.TypeToken a, valuetype System.Reflection.Emit.TypeToken b)
		{
			ret
		}
		.field static public initonly valuetype System.Reflection.Emit.TypeToken Empty

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance int32 Token()
		{
			.get instance int32 System.Reflection.Emit.TypeToken::get_Token()
		}
	}
	.class public sealed serializable UnmanagedMarshal
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 78 41 6E 20 61 6C 74 65 72 6E 61 74 65 20 41 50 49 20 69 73 20 61 76 61 69 6C 61 62 6C 65 3A 20 45 6D 69 74 20 74 68 65 20 4D 61 72 73 68 61 6C 41 73 20 63 75 73 74 6F 6D 20 61 74 74 72 69 62 75 74 65 20 69 6E 73 74 65 61 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal(valuetype System.Runtime.InteropServices.UnmanagedType unmanagedType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.UnmanagedMarshal DefineByValTStr(int32 elemCount)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.UnmanagedMarshal DefineByValArray(int32 elemCount)
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Emit.UnmanagedMarshal DefineLPArray(valuetype System.Runtime.InteropServices.UnmanagedType elemType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.UnmanagedType get_GetUnmanagedType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Guid get_IIDGuid()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ElementCount()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.UnmanagedType get_BaseType()
		{
			ret
		}
		.property instance valuetype System.Runtime.InteropServices.UnmanagedType BaseType()
		{
			.get instance valuetype System.Runtime.InteropServices.UnmanagedType System.Reflection.Emit.UnmanagedMarshal::get_BaseType()
		}
		.property instance int32 ElementCount()
		{
			.get instance int32 System.Reflection.Emit.UnmanagedMarshal::get_ElementCount()
		}
		.property instance valuetype System.Runtime.InteropServices.UnmanagedType GetUnmanagedType()
		{
			.get instance valuetype System.Runtime.InteropServices.UnmanagedType System.Reflection.Emit.UnmanagedMarshal::get_GetUnmanagedType()
		}
		.property instance valuetype System.Guid IIDGuid()
		{
			.get instance valuetype System.Guid System.Reflection.Emit.UnmanagedMarshal::get_IIDGuid()
		}
	}
}
.namespace System.Resources
{
	.class public interface abstract IResourceReader
		implements System.Collections.IEnumerable, System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Close()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
		}
	}
	.class public interface abstract IResourceWriter
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void AddResource(string name, string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddResource(string name, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddResource(string name, uint8[] 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Close()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Generate()
		{
		}
	}
	.class public serializable MissingManifestResourceException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable MissingSatelliteAssemblyException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, string cultureName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CultureName()
		{
			ret
		}
		.property instance string CultureName()
		{
			.get instance string System.Resources.MissingSatelliteAssemblyException::get_CultureName()
		}
	}
	.class public sealed NeutralResourcesLanguageAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string cultureName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string cultureName, valuetype System.Resources.UltimateResourceFallbackLocation location)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CultureName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Resources.UltimateResourceFallbackLocation get_Location()
		{
			ret
		}
		.property instance string CultureName()
		{
			.get instance string System.Resources.NeutralResourcesLanguageAttribute::get_CultureName()
		}
		.property instance valuetype System.Resources.UltimateResourceFallbackLocation Location()
		{
			.get instance valuetype System.Resources.UltimateResourceFallbackLocation System.Resources.NeutralResourcesLanguageAttribute::get_Location()
		}
	}
	.class public serializable ResourceManager
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string baseName, class System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string baseName, class System.Reflection.Assembly 'assembly', class System.Type usingResourceSet)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type resourceSource)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_BaseName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IgnoreCase()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_IgnoreCase(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Type get_ResourceSetType()
		{
			ret
		}
		.method family hidebysig specialname 
			instance valuetype System.Resources.UltimateResourceFallbackLocation get_FallbackLocation()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void set_FallbackLocation(valuetype System.Resources.UltimateResourceFallbackLocation 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ReleaseAllResources()
		{
			ret
		}
		.method public static hidebysig 
			class System.Resources.ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, class System.Type usingResourceSet)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance string GetResourceFileName(class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Resources.ResourceSet GetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class System.Resources.ResourceSet InternalGetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents)
		{
			ret
		}
		.method family static hidebysig 
			class System.Version GetSatelliteContractVersion(class System.Reflection.Assembly a)
		{
			ret
		}
		.method family static hidebysig 
			class System.Globalization.CultureInfo GetNeutralResourcesLanguage(class System.Reflection.Assembly a)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetString(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetString(string name, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetObject(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetObject(string name, class System.Globalization.CultureInfo culture)
		{
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.UnmanagedMemoryStream' GetStream(string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class 'System.IO.UnmanagedMemoryStream' GetStream(string name, class System.Globalization.CultureInfo culture)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.field family string BaseNameField
		.field static public initonly int32 HeaderVersionNumber
		.field static public initonly int32 MagicNumber
		.field family class System.Reflection.Assembly MainAssembly
		.field family class System.Collections.Hashtable ResourceSets
		.property instance string BaseName()
		{
			.get instance string System.Resources.ResourceManager::get_BaseName()
		}
		.property instance valuetype System.Resources.UltimateResourceFallbackLocation FallbackLocation()
		{
			.get instance valuetype System.Resources.UltimateResourceFallbackLocation System.Resources.ResourceManager::get_FallbackLocation()
			.set instance void System.Resources.ResourceManager::set_FallbackLocation(valuetype System.Resources.UltimateResourceFallbackLocation)
		}
		.property instance bool IgnoreCase()
		{
			.get instance bool System.Resources.ResourceManager::get_IgnoreCase()
			.set instance void System.Resources.ResourceManager::set_IgnoreCase(bool)
		}
		.property instance class System.Type ResourceSetType()
		{
			.get instance class System.Type System.Resources.ResourceManager::get_ResourceSetType()
		}
	}
	.class public sealed ResourceReader
		extends System.Object
		implements System.Resources.IResourceReader, System.Collections.IEnumerable, System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			ret
		}
		.method public hidebysig 
			instance void GetResourceData(string resourceName, [out] string& resourceType, [out] uint8[]& resourceData)
		{
			ret
		}
	}
	.class public serializable ResourceSet
		extends System.Object
		implements System.IDisposable, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Resources.IResourceReader reader)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetDefaultReader()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Type GetDefaultWriter()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetString(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetString(string name, bool ignoreCase)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetObject(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetObject(string name, bool ignoreCase)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ReadResources()
		{
			ret
		}
		.field family notserialized class System.Resources.IResourceReader Reader
		.field family class System.Collections.Hashtable Table
	}
	.class public sealed ResourceWriter
		extends System.Object
		implements System.Resources.IResourceWriter, System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string fileName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddResource(string name, string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddResource(string name, object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddResource(string name, uint8[] 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddResourceData(string name, string typeName, uint8[] serializedData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Generate()
		{
			ret
		}
	}
	.class public sealed SatelliteContractVersionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Version()
		{
			ret
		}
		.property instance string Version()
		{
			.get instance string System.Resources.SatelliteContractVersionAttribute::get_Version()
		}
	}
	.class public sealed serializable UltimateResourceFallbackLocation
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Resources.UltimateResourceFallbackLocation MainAssembly = int32(0x00000000)
		.field static public literal valuetype System.Resources.UltimateResourceFallbackLocation Satellite = int32(0x00000001)
	}
}
.namespace System.Runtime
{
	.class public abstract sealed GCSettings
		extends System.Object
	{
		.method public static hidebysig specialname 
			bool get_IsServerGC()
		{
			ret
		}
		.property bool IsServerGC()
		{
			.get bool System.Runtime.GCSettings::get_IsServerGC()
		}
	}
	.class public sealed MemoryFailPoint
		extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject
		implements System.IDisposable
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 sizeInMegabytes)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
	}
}
.namespace System.Runtime.CompilerServices
{
	.class public sealed AccessedThroughPropertyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string propertyName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PropertyName()
		{
			ret
		}
		.property instance string PropertyName()
		{
			.get instance string System.Runtime.CompilerServices.AccessedThroughPropertyAttribute::get_PropertyName()
		}
	}
	.class public CallConvCdecl
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public CallConvFastcall
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public CallConvStdcall
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public CallConvThiscall
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable CompilationRelaxations
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.CompilerServices.CompilationRelaxations NoStringInterning = int32(0x00000008)
	}
	.class public serializable CompilationRelaxationsAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 47 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 relaxations)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.CompilerServices.CompilationRelaxations relaxations)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CompilationRelaxations()
		{
			ret
		}
		.property instance int32 CompilationRelaxations()
		{
			.get instance int32 System.Runtime.CompilerServices.CompilationRelaxationsAttribute::get_CompilationRelaxations()
		}
	}
	.class public sealed serializable CompilerGeneratedAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 7F 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 01)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable CompilerGlobalScopeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed CompilerMarshalOverride
		extends System.Object
	{
	}
	.class public abstract serializable CustomConstantAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 09 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Value()
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance object Value()
		{
			.get instance object System.Runtime.CompilerServices.CustomConstantAttribute::get_Value()
		}
	}
	.class public sealed serializable DateTimeConstantAttribute
		extends System.Runtime.CompilerServices.CustomConstantAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 09 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int64 ticks)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.property instance object Value()
		{
			.get instance object System.Runtime.CompilerServices.DateTimeConstantAttribute::get_Value()
		}
	}
	.class public sealed serializable DecimalConstantAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 09 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8 scale, uint8 sign, uint32 hi, uint32 mid, uint32 low)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8 scale, uint8 sign, int32 hi, int32 mid, int32 low)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.CompilerServices.DecimalConstantAttribute::get_Value()
		}
	}
	.class public sealed serializable DefaultDependencyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.CompilerServices.LoadHint loadHintArgument)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.CompilerServices.LoadHint get_LoadHint()
		{
			ret
		}
		.property instance valuetype System.Runtime.CompilerServices.LoadHint LoadHint()
		{
			.get instance valuetype System.Runtime.CompilerServices.LoadHint System.Runtime.CompilerServices.DefaultDependencyAttribute::get_LoadHint()
		}
	}
	.class public sealed serializable DependencyAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01)
		.method public hidebysig specialname 
			instance void .ctor(string dependentAssemblyArgument, valuetype System.Runtime.CompilerServices.LoadHint loadHintArgument)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DependentAssembly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.CompilerServices.LoadHint get_LoadHint()
		{
			ret
		}
		.property instance string DependentAssembly()
		{
			.get instance string System.Runtime.CompilerServices.DependencyAttribute::get_DependentAssembly()
		}
		.property instance valuetype System.Runtime.CompilerServices.LoadHint LoadHint()
		{
			.get instance valuetype System.Runtime.CompilerServices.LoadHint System.Runtime.CompilerServices.DependencyAttribute::get_LoadHint()
		}
	}
	.class public DiscardableAttribute
		extends System.Attribute
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable FixedAddressValueTypeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed FixedBufferAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type elementType, int32 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ElementType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Length()
		{
			ret
		}
		.property instance class System.Type ElementType()
		{
			.get instance class System.Type System.Runtime.CompilerServices.FixedBufferAttribute::get_ElementType()
		}
		.property instance int32 Length()
		{
			.get instance int32 System.Runtime.CompilerServices.FixedBufferAttribute::get_Length()
		}
	}
	.class public sealed serializable HasCopySemanticsAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 08 00 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable IndexerNameAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 80 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string indexerName)
		{
			ret
		}
	}
	.class public sealed InternalsVisibleToAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor(string assemblyName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AssemblyName()
		{
			ret
		}
		.property instance string AssemblyName()
		{
			.get instance string System.Runtime.CompilerServices.InternalsVisibleToAttribute::get_AssemblyName()
		}
	}
	.class public abstract sealed IsBoxed
		extends System.Object
	{
	}
	.class public abstract sealed IsByValue
		extends System.Object
	{
	}
	.class public abstract sealed IsConst
		extends System.Object
	{
	}
	.class public abstract sealed IsCopyConstructed
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public abstract sealed IsExplicitlyDereferenced
		extends System.Object
	{
	}
	.class public abstract sealed IsImplicitlyDereferenced
		extends System.Object
	{
	}
	.class public abstract sealed IsJitIntrinsic
		extends System.Object
	{
	}
	.class public abstract sealed IsLong
		extends System.Object
	{
	}
	.class public abstract sealed IsPinned
		extends System.Object
	{
	}
	.class public abstract sealed IsSignUnspecifiedByte
		extends System.Object
	{
	}
	.class public abstract sealed IsUdtReturn
		extends System.Object
	{
	}
	.class public abstract sealed IsVolatile
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public sealed serializable LoadHint
		extends System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.CompilerServices.LoadHint Always = int32(0x00000001)
		.field static public literal valuetype System.Runtime.CompilerServices.LoadHint Default = int32(0x00000000)
		.field static public literal valuetype System.Runtime.CompilerServices.LoadHint Sometimes = int32(0x00000002)
	}
	.class public sealed serializable MethodCodeType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.CompilerServices.MethodCodeType IL = int32(0x00000000)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodCodeType Native = int32(0x00000001)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodCodeType 'OPTIL' = int32(0x00000002)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodCodeType Runtime = int32(0x00000003)
	}
	.class public sealed serializable MethodImplAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 60 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.CompilerServices.MethodImplOptions methodImplOptions)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int16 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.CompilerServices.MethodImplOptions get_Value()
		{
			ret
		}
		.field public valuetype System.Runtime.CompilerServices.MethodCodeType MethodCodeType
		.property instance valuetype System.Runtime.CompilerServices.MethodImplOptions Value()
		{
			.get instance valuetype System.Runtime.CompilerServices.MethodImplOptions System.Runtime.CompilerServices.MethodImplAttribute::get_Value()
		}
	}
	.class public sealed serializable MethodImplOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions ForwardRef = int32(0x00000010)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions InternalCall = int32(0x00001000)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions NoInlining = int32(0x00000008)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions PreserveSig = int32(0x00000080)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions Synchronized = int32(0x00000020)
		.field static public literal valuetype System.Runtime.CompilerServices.MethodImplOptions Unmanaged = int32(0x00000004)
	}
	.class public sealed serializable NativeCppClassAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 08 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable RequiredAttributeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 1C 04 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type requiredContract)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_RequiredContract()
		{
			ret
		}
		.property instance class System.Type RequiredContract()
		{
			.get instance class System.Type System.Runtime.CompilerServices.RequiredAttributeAttribute::get_RequiredContract()
		}
	}
	.class public sealed serializable RuntimeCompatibilityAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 09 49 6E 68 65 72 69 74 65 64 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_WrapNonExceptionThrows()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_WrapNonExceptionThrows(bool 'value')
		{
			ret
		}
		.property instance bool WrapNonExceptionThrows()
		{
			.get instance bool System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::get_WrapNonExceptionThrows()
			.set instance void System.Runtime.CompilerServices.RuntimeCompatibilityAttribute::set_WrapNonExceptionThrows(bool)
		}
	}
	.class public abstract sealed RuntimeHelpers
		extends System.Object
	{
		.class nested public sealed CleanupCode
			extends System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(object userData, bool exceptionThrown)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class System.IAsyncResult BeginInvoke(object userData, bool exceptionThrown, class System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed TryCode
			extends System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(object userData)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class System.IAsyncResult BeginInvoke(object userData, class System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class System.IAsyncResult result)
				runtime 
			{
			}
		}
		.method public static hidebysig 
			void InitializeArray(class System.Array 'array', valuetype System.RuntimeFieldHandle fldHandle)
			internalcall 
		{
		}
		.method public static hidebysig 
			object GetObjectValue(object obj)
			internalcall 
		{
		}
		.method public static hidebysig 
			void RunClassConstructor(valuetype System.RuntimeTypeHandle 'type')
		{
			ret
		}
		.method public static hidebysig 
			void RunModuleConstructor(valuetype System.ModuleHandle module)
		{
			ret
		}
		.method public static hidebysig 
			void PrepareMethod(valuetype System.RuntimeMethodHandle 'method')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void PrepareMethod(valuetype System.RuntimeMethodHandle 'method', valuetype System.RuntimeTypeHandle[] instantiation)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void PrepareDelegate(class System.Delegate d)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			int32 GetHashCode(object o)
		{
			ret
		}
		.method public static hidebysig 
			bool Equals(object o1, object o2)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_OffsetToStringData()
		{
			ret
		}
		.method public static hidebysig 
			void ProbeForSufficientStack()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void PrepareConstrainedRegions()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void PrepareConstrainedRegionsNoOP()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void ExecuteCodeWithGuaranteedCleanup(class System.Runtime.CompilerServices.RuntimeHelpers/TryCode code, class System.Runtime.CompilerServices.RuntimeHelpers/CleanupCode backoutCode, object userData)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.property int32 OffsetToStringData()
		{
			.get int32 System.Runtime.CompilerServices.RuntimeHelpers::get_OffsetToStringData()
		}
	}
	.class public sealed serializable RuntimeWrappedException
		extends System.Exception
	{
		.method public hidebysig specialname 
			instance object get_WrappedException()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance object WrappedException()
		{
			.get instance object System.Runtime.CompilerServices.RuntimeWrappedException::get_WrappedException()
		}
	}
	.class public sealed serializable ScopelessEnumAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 10 00 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed SpecialNameAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 CC 03 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable StringFreezingAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed SuppressIldasmAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 03 00 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed TypeForwardedToAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type destination)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_Destination()
		{
			ret
		}
		.property instance class System.Type Destination()
		{
			.get instance class System.Type System.Runtime.CompilerServices.TypeForwardedToAttribute::get_Destination()
		}
	}
	.class public sealed serializable UnsafeValueTypeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 08 00 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
}
.namespace System.Runtime.ConstrainedExecution
{
	.class public sealed serializable Cer
		extends System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Cer MayFail = int32(0x00000001)
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Cer None = int32(0x00000000)
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Cer Success = int32(0x00000002)
	}
	.class public sealed serializable Consistency
		extends System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptAppDomain = int32(0x00000001)
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptInstance = int32(0x00000002)
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Consistency MayCorruptProcess = int32(0x00000000)
		.field static public literal valuetype System.Runtime.ConstrainedExecution.Consistency WillNotCorruptState = int32(0x00000003)
	}
	.class public abstract CriticalFinalizerObject
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
	}
	.class public sealed PrePrepareMethodAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 60 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed ReliabilityContractAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 04 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, valuetype System.Runtime.ConstrainedExecution.Cer cer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.ConstrainedExecution.Consistency get_ConsistencyGuarantee()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.ConstrainedExecution.Cer get_Cer()
		{
			ret
		}
		.property instance valuetype System.Runtime.ConstrainedExecution.Cer Cer()
		{
			.get instance valuetype System.Runtime.ConstrainedExecution.Cer System.Runtime.ConstrainedExecution.ReliabilityContractAttribute::get_Cer()
		}
		.property instance valuetype System.Runtime.ConstrainedExecution.Consistency ConsistencyGuarantee()
		{
			.get instance valuetype System.Runtime.ConstrainedExecution.Consistency System.Runtime.ConstrainedExecution.ReliabilityContractAttribute::get_ConsistencyGuarantee()
		}
	}
}
.namespace System.Runtime.Hosting
{
	.class public sealed serializable ActivationArguments
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance string[] get_ActivationData()
		{
			ret
		}
		.property instance string[] ActivationData()
		{
			.get instance string[] System.Runtime.Hosting.ActivationArguments::get_ActivationData()
		}
	}
}
.namespace System.Runtime.InteropServices
{
	.class public sequential sealed serializable ArrayWithOffset
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'array', int32 offset)
		{
			ret
		}
		.method public hidebysig 
			instance object GetArray()
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetOffset()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Runtime.InteropServices.ArrayWithOffset obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Runtime.InteropServices.ArrayWithOffset a, valuetype System.Runtime.InteropServices.ArrayWithOffset b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Runtime.InteropServices.ArrayWithOffset a, valuetype System.Runtime.InteropServices.ArrayWithOffset b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed BestFitMappingAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 0D 04 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool BestFitMapping)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_BestFitMapping()
		{
			ret
		}
		.field public bool ThrowOnUnmappableChar
		.property instance bool BestFitMapping()
		{
			.get instance bool System.Runtime.InteropServices.BestFitMappingAttribute::get_BestFitMapping()
		}
	}
	.class public serializable COMException
		extends System.Runtime.InteropServices.ExternalException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, int32 errorCode)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public sealed serializable CallingConvention
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.CallingConvention Cdecl = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.CallingConvention FastCall = int32(0x00000005)
		.field static public literal valuetype System.Runtime.InteropServices.CallingConvention StdCall = int32(0x00000003)
		.field static public literal valuetype System.Runtime.InteropServices.CallingConvention ThisCall = int32(0x00000004)
		.field static public literal valuetype System.Runtime.InteropServices.CallingConvention Winapi = int32(0x00000001)
	}
	.class public sealed serializable CharSet
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.CharSet Ansi = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.CharSet Auto = int32(0x00000004)
		.field static public literal valuetype System.Runtime.InteropServices.CharSet None = int32(0x00000001)
		.field static public literal valuetype System.Runtime.InteropServices.CharSet Unicode = int32(0x00000003)
	}
	.class public sealed ClassInterfaceAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 05 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType classInterfaceType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int16 classInterfaceType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.ClassInterfaceType get_Value()
		{
			ret
		}
		.property instance valuetype System.Runtime.InteropServices.ClassInterfaceType Value()
		{
			.get instance valuetype System.Runtime.InteropServices.ClassInterfaceType System.Runtime.InteropServices.ClassInterfaceAttribute::get_Value()
		}
	}
	.class public sealed serializable ClassInterfaceType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.ClassInterfaceType AutoDispatch = int32(0x00000001)
		.field static public literal valuetype System.Runtime.InteropServices.ClassInterfaceType AutoDual = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.ClassInterfaceType None = int32(0x00000000)
	}
	.class public sealed ComDefaultInterfaceAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type defaultInterface)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_Value()
		{
			ret
		}
		.property instance class System.Type Value()
		{
			.get instance class System.Type System.Runtime.InteropServices.ComDefaultInterfaceAttribute::get_Value()
		}
	}
	.class public sealed ComImportAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 04 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable ComInterfaceType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.ComInterfaceType InterfaceIsDual = int32(0x00000000)
		.field static public literal valuetype System.Runtime.InteropServices.ComInterfaceType InterfaceIsIDispatch = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.ComInterfaceType InterfaceIsIUnknown = int32(0x00000001)
	}
	.class public sealed ComVisibleAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 DD 15 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool visibility)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Value()
		{
			ret
		}
		.property instance bool Value()
		{
			.get instance bool System.Runtime.InteropServices.ComVisibleAttribute::get_Value()
		}
	}
	.class public abstract CriticalHandle
		extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject
		implements System.IDisposable
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor(native int invalidHandleValue)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method family hidebysig 
			instance void SetHandle(native int handle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsClosed()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsInvalid()
		{
		}
		.method public hidebysig 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public hidebysig 
			instance void SetHandleAsInvalid()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance bool ReleaseHandle()
		{
		}
		.field family native int handle
		.property instance bool IsClosed()
		{
			.get instance bool System.Runtime.InteropServices.CriticalHandle::get_IsClosed()
		}
		.property instance bool IsInvalid()
		{
			.get instance bool System.Runtime.InteropServices.CriticalHandle::get_IsInvalid()
		}
	}
	.class public sealed DefaultCharSetAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 02 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.CharSet charSet)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.CharSet get_CharSet()
		{
			ret
		}
		.property instance valuetype System.Runtime.InteropServices.CharSet CharSet()
		{
			.get instance valuetype System.Runtime.InteropServices.CharSet System.Runtime.InteropServices.DefaultCharSetAttribute::get_CharSet()
		}
	}
	.class public sealed DispIdAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 C0 03 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 dispId)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Value()
		{
			ret
		}
		.property instance int32 Value()
		{
			.get instance int32 System.Runtime.InteropServices.DispIdAttribute::get_Value()
		}
	}
	.class public sealed DllImportAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string dllName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.field public bool BestFitMapping
		.field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention
		.field public valuetype System.Runtime.InteropServices.CharSet CharSet
		.field public string EntryPoint
		.field public bool ExactSpelling
		.field public bool PreserveSig
		.field public bool SetLastError
		.field public bool ThrowOnUnmappableChar
		.property instance string Value()
		{
			.get instance string System.Runtime.InteropServices.DllImportAttribute::get_Value()
		}
	}
	.class public serializable ExternalException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, int32 errorCode)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ErrorCode()
		{
			ret
		}
		.property instance int32 ErrorCode()
		{
			.get instance int32 System.Runtime.InteropServices.ExternalException::get_ErrorCode()
		}
	}
	.class public sealed FieldOffsetAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(int32 offset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Value()
		{
			ret
		}
		.property instance int32 Value()
		{
			.get instance int32 System.Runtime.InteropServices.FieldOffsetAttribute::get_Value()
		}
	}
	.class public sequential sealed GCHandle
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			valuetype System.Runtime.InteropServices.GCHandle Alloc(object 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Runtime.InteropServices.GCHandle Alloc(object 'value', valuetype System.Runtime.InteropServices.GCHandleType 'type')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void Free()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance object get_Target()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void set_Target(object 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance native int AddrOfPinnedObject()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsAllocated()
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Runtime.InteropServices.GCHandle op_Explicit(native int 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Runtime.InteropServices.GCHandle FromIntPtr(native int 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			native int op_Explicit(valuetype System.Runtime.InteropServices.GCHandle 'value')
		{
			ret
		}
		.method public static hidebysig 
			native int ToIntPtr(valuetype System.Runtime.InteropServices.GCHandle 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Runtime.InteropServices.GCHandle a, valuetype System.Runtime.InteropServices.GCHandle b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Runtime.InteropServices.GCHandle a, valuetype System.Runtime.InteropServices.GCHandle b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance bool IsAllocated()
		{
			.get instance bool System.Runtime.InteropServices.GCHandle::get_IsAllocated()
		}
		.property instance object Target()
		{
			.get instance object System.Runtime.InteropServices.GCHandle::get_Target()
			.set instance void System.Runtime.InteropServices.GCHandle::set_Target(object)
		}
	}
	.class public sealed serializable GCHandleType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.GCHandleType Normal = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.GCHandleType Pinned = int32(0x00000003)
		.field static public literal valuetype System.Runtime.InteropServices.GCHandleType Weak = int32(0x00000000)
		.field static public literal valuetype System.Runtime.InteropServices.GCHandleType WeakTrackResurrection = int32(0x00000001)
	}
	.class public sealed GuidAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 1D 14 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string guid)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.InteropServices.GuidAttribute::get_Value()
		}
	}
	.class public sequential sealed HandleRef
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object wrapper, native int handle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Wrapper()
		{
			ret
		}
		.method public hidebysig specialname 
			instance native int get_Handle()
		{
			ret
		}
		.method public static hidebysig specialname 
			native int op_Explicit(valuetype System.Runtime.InteropServices.HandleRef 'value')
		{
			ret
		}
		.method public static hidebysig 
			native int ToIntPtr(valuetype System.Runtime.InteropServices.HandleRef 'value')
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance native int Handle()
		{
			.get instance native int System.Runtime.InteropServices.HandleRef::get_Handle()
		}
		.property instance object Wrapper()
		{
			.get instance object System.Runtime.InteropServices.HandleRef::get_Wrapper()
		}
	}
	.class public interface abstract ICustomMarshaler
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object MarshalNativeToManaged(native int pNativeData)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance native int MarshalManagedToNative(object ManagedObj)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CleanUpNativeData(native int pNativeData)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void CleanUpManagedData(object ManagedObj)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetNativeDataSize()
		{
		}
	}
	.class public sealed InAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 08 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed InterfaceTypeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 04 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.ComInterfaceType interfaceType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int16 interfaceType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.ComInterfaceType get_Value()
		{
			ret
		}
		.property instance valuetype System.Runtime.InteropServices.ComInterfaceType Value()
		{
			.get instance valuetype System.Runtime.InteropServices.ComInterfaceType System.Runtime.InteropServices.InterfaceTypeAttribute::get_Value()
		}
	}
	.class public serializable InvalidOleVariantTypeException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable LayoutKind
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.LayoutKind Auto = int32(0x00000003)
		.field static public literal valuetype System.Runtime.InteropServices.LayoutKind Explicit = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.LayoutKind Sequential = int32(0x00000000)
	}
	.class public abstract sealed Marshal
		extends System.Object
	{
		.method public static hidebysig 
			string PtrToStringAnsi(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			string PtrToStringAnsi(native int ptr, int32 len)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			string PtrToStringUni(native int ptr, int32 len)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			string PtrToStringAuto(native int ptr, int32 len)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			string PtrToStringUni(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			string PtrToStringAuto(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 SizeOf(object structure)
			internalcall 
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		}
		.method public static hidebysig 
			int32 SizeOf(class System.Type t)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			native int OffsetOf(class System.Type t, string fieldName)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int UnsafeAddrOfPinnedArrayElement(class System.Array arr, int32 index)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void Copy(int32[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(char[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(int16[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(int64[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(float32[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(float64[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(uint8[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int[] source, int32 startIndex, native int destination, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, int32[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, char[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, int16[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, int64[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, float32[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, float64[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, uint8[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Copy(native int source, native int[] destination, int32 startIndex, int32 length)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			uint8 ReadByte([in] object marshal(as any) ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			uint8 ReadByte(native int ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig 
			uint8 ReadByte(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int16 ReadInt16([in] object marshal(as any) ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int16 ReadInt16(native int ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig 
			int16 ReadInt16(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 ReadInt32([in] object marshal(as any) ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 ReadInt32(native int ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 ReadInt32(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int ReadIntPtr([in] object marshal(as any) ptr, int32 ofs)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int ReadIntPtr(native int ptr, int32 ofs)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int ReadIntPtr(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int64 ReadInt64([in] object marshal(as any) ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int64 ReadInt64(native int ptr, int32 ofs)
			preservesig 
		{
		}
		.method public static hidebysig 
			int64 ReadInt64(native int ptr)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteByte(native int ptr, int32 ofs, uint8 val)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteByte([in][out] object marshal(as any) ptr, int32 ofs, uint8 val)
			preservesig 
		{
		}
		.method public static hidebysig 
			void WriteByte(native int ptr, uint8 val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt16(native int ptr, int32 ofs, int16 val)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt16([in][out] object marshal(as any) ptr, int32 ofs, int16 val)
			preservesig 
		{
		}
		.method public static hidebysig 
			void WriteInt16(native int ptr, int16 val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteInt16(native int ptr, int32 ofs, char val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteInt16([in][out] object ptr, int32 ofs, char val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteInt16(native int ptr, char val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt32(native int ptr, int32 ofs, int32 val)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt32([in][out] object marshal(as any) ptr, int32 ofs, int32 val)
			preservesig 
		{
		}
		.method public static hidebysig 
			void WriteInt32(native int ptr, int32 val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteIntPtr(native int ptr, int32 ofs, native int val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteIntPtr([in][out] object marshal(as any) ptr, int32 ofs, native int val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void WriteIntPtr(native int ptr, native int val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt64(native int ptr, int32 ofs, int64 val)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void WriteInt64([in][out] object marshal(as any) ptr, int32 ofs, int64 val)
			preservesig 
		{
		}
		.method public static hidebysig 
			void WriteInt64(native int ptr, int64 val)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 GetLastWin32Error()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			int32 GetHRForLastWin32Error()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Prelink(class System.Reflection.MethodInfo m)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void PrelinkAll(class System.Type c)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 NumParamBytes(class System.Reflection.MethodInfo m)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int GetExceptionPointers()
			internalcall 
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		}
		.method public static hidebysig 
			int32 GetExceptionCode()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void StructureToPtr(object structure, native int ptr, bool fDeleteOld)
			internalcall 
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		}
		.method public static hidebysig 
			void PtrToStructure(native int ptr, object structure)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object PtrToStructure(native int ptr, class System.Type structureType)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			void DestroyStructure(native int ptr, class System.Type structuretype)
			internalcall 
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		}
		.method public static hidebysig 
			native int GetHINSTANCE(class System.Reflection.Module m)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void ThrowExceptionForHR(int32 errorCode)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void ThrowExceptionForHR(int32 errorCode, native int errorInfo)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Exception GetExceptionForHR(int32 errorCode)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Exception GetExceptionForHR(int32 errorCode, native int errorInfo)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			int32 GetHRForException(class System.Exception e)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			native int AllocHGlobal(native int cb)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int AllocHGlobal(int32 cb)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void FreeHGlobal(native int hglobal)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool IsComObject(object o)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Delegate GetDelegateForFunctionPointer(native int ptr, class System.Type t)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			native int GetFunctionPointerForDelegate(class System.Delegate d)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.field static public initonly int32 SystemDefaultCharSize
		.field static public initonly int32 SystemMaxDBCSCharSize
	}
	.class public sealed MarshalAsAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 29 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.UnmanagedType unmanagedType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int16 unmanagedType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.UnmanagedType get_Value()
		{
			ret
		}
		.field public valuetype System.Runtime.InteropServices.UnmanagedType ArraySubType
		.field public string MarshalCookie
		.field public string MarshalType
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public class System.Type MarshalTypeRef
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public int32 SizeConst
		.field public int16 SizeParamIndex
		.property instance valuetype System.Runtime.InteropServices.UnmanagedType Value()
		{
			.get instance valuetype System.Runtime.InteropServices.UnmanagedType System.Runtime.InteropServices.MarshalAsAttribute::get_Value()
		}
	}
	.class public serializable MarshalDirectiveException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed OptionalAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 08 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed OutAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 08 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed PreserveSigAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public RuntimeEnvironment
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool FromGlobalAccessCache(class System.Reflection.Assembly a)
			internalcall 
		{
		}
		.method public static hidebysig 
			string GetSystemVersion()
		{
			ret
		}
		.method public static hidebysig 
			string GetRuntimeDirectory()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_SystemConfigurationFile()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property string SystemConfigurationFile()
		{
			.get string System.Runtime.InteropServices.RuntimeEnvironment::get_SystemConfigurationFile()
		}
	}
	.class public serializable SEHException
		extends System.Runtime.InteropServices.ExternalException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool CanResume()
		{
			ret
		}
	}
	.class public abstract SafeHandle
		extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject
		implements System.IDisposable
	{
		.permissionset linkcheck = (00)
		.method family hidebysig specialname 
			instance void .ctor(native int invalidHandleValue, bool ownsHandle)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method family hidebysig 
			instance void SetHandle(native int handle)
		{
			ret
		}
		.method public hidebysig 
			instance native int DangerousGetHandle()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsClosed()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsInvalid()
		{
		}
		.method public hidebysig 
			instance void Close()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method public hidebysig 
			instance void SetHandleAsInvalid()
			internalcall 
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance bool ReleaseHandle()
		{
		}
		.method public hidebysig 
			instance void DangerousAddRef(bool& success)
			internalcall 
		{
		}
		.method public hidebysig 
			instance void DangerousRelease()
			internalcall 
		{
		}
		.field family native int handle
		.property instance bool IsClosed()
		{
			.get instance bool System.Runtime.InteropServices.SafeHandle::get_IsClosed()
		}
		.property instance bool IsInvalid()
		{
			.get instance bool System.Runtime.InteropServices.SafeHandle::get_IsInvalid()
		}
	}
	.class public sealed SetWin32ContextInIDispatchAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 7C 54 68 69 73 20 61 74 74 72 69 62 75 74 65 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 41 70 70 6C 69 63 61 74 69 6F 6E 20 44 6F 6D 61 69 6E 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 72 65 73 70 65 63 74 20 41 63 74 69 76 61 74 69 6F 6E 20 43 6F 6E 74 65 78 74 20 62 6F 75 6E 64 61 72 69 65 73 20 69 6E 20 49 44 69 73 70 61 74 63 68 20 63 61 6C 6C 73 2E 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed StructLayoutAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 0C 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int16 layoutKind)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.LayoutKind get_Value()
		{
			ret
		}
		.field public valuetype System.Runtime.InteropServices.CharSet CharSet
		.field public int32 Pack
		.field public int32 Size
		.property instance valuetype System.Runtime.InteropServices.LayoutKind Value()
		{
			.get instance valuetype System.Runtime.InteropServices.LayoutKind System.Runtime.InteropServices.StructLayoutAttribute::get_Value()
		}
	}
	.class public sealed TypeLibImportClassAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 04 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type importClass)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.InteropServices.TypeLibImportClassAttribute::get_Value()
		}
	}
	.class public sealed UnmanagedFunctionPointerAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 10 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.InteropServices.CallingConvention callingConvention)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.InteropServices.CallingConvention get_CallingConvention()
		{
			ret
		}
		.field public bool BestFitMapping
		.field public valuetype System.Runtime.InteropServices.CharSet CharSet
		.field public bool SetLastError
		.field public bool ThrowOnUnmappableChar
		.property instance valuetype System.Runtime.InteropServices.CallingConvention CallingConvention()
		{
			.get instance valuetype System.Runtime.InteropServices.CallingConvention System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute::get_CallingConvention()
		}
	}
	.class public sealed serializable UnmanagedType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType AsAny = int32(0x00000028)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType Bool = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType ByValArray = int32(0x0000001E)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType ByValTStr = int32(0x00000017)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType Currency = int32(0x0000000F)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType CustomMarshaler = int32(0x0000002C)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType Error = int32(0x0000002D)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType FunctionPtr = int32(0x00000026)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType I1 = int32(0x00000003)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType I2 = int32(0x00000005)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType I4 = int32(0x00000007)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType I8 = int32(0x00000009)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType IUnknown = int32(0x00000019)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType LPArray = int32(0x0000002A)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType LPStr = int32(0x00000014)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType LPStruct = int32(0x0000002B)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType LPTStr = int32(0x00000016)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType LPWStr = int32(0x00000015)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType R4 = int32(0x0000000B)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType R8 = int32(0x0000000C)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType Struct = int32(0x0000001B)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType SysInt = int32(0x0000001F)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType SysUInt = int32(0x00000020)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType U1 = int32(0x00000004)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType U2 = int32(0x00000006)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType U4 = int32(0x00000008)
		.field static public literal valuetype System.Runtime.InteropServices.UnmanagedType U8 = int32(0x0000000A)
	}
	.class public sealed serializable VarEnum
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_ARRAY' = int32(0x00002000)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_BLOB' = int32(0x00000041)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_BLOB_OBJECT' = int32(0x00000046)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_BOOL' = int32(0x0000000B)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_BSTR' = int32(0x00000008)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_BYREF' = int32(0x00004000)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_CARRAY' = int32(0x0000001C)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_CF' = int32(0x00000047)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_CLSID' = int32(0x00000048)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_CY' = int32(0x00000006)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_DATE' = int32(0x00000007)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_DECIMAL' = int32(0x0000000E)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_EMPTY' = int32(0x00000000)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_ERROR' = int32(0x0000000A)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_FILETIME' = int32(0x00000040)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_HRESULT' = int32(0x00000019)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_I1' = int32(0x00000010)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_I2' = int32(0x00000002)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_I4' = int32(0x00000003)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_I8' = int32(0x00000014)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_INT' = int32(0x00000016)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_LPSTR' = int32(0x0000001E)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_LPWSTR' = int32(0x0000001F)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_NULL' = int32(0x00000001)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_PTR' = int32(0x0000001A)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_R4' = int32(0x00000004)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_R8' = int32(0x00000005)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_RECORD' = int32(0x00000024)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_SAFEARRAY' = int32(0x0000001B)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_STORAGE' = int32(0x00000043)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_STORED_OBJECT' = int32(0x00000045)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_STREAM' = int32(0x00000042)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_STREAMED_OBJECT' = int32(0x00000044)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UI1' = int32(0x00000011)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UI2' = int32(0x00000012)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UI4' = int32(0x00000013)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UI8' = int32(0x00000015)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UINT' = int32(0x00000017)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_UNKNOWN' = int32(0x0000000D)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_USERDEFINED' = int32(0x0000001D)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_VARIANT' = int32(0x0000000C)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_VECTOR' = int32(0x00001000)
		.field static public literal valuetype System.Runtime.InteropServices.VarEnum 'VT_VOID' = int32(0x00000018)
	}
	.class public interface abstract _Activator
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 30 33 39 37 33 35 35 31 2D 35 37 41 31 2D 33 39 30 30 2D 41 32 42 35 2D 39 30 38 33 45 33 46 46 32 39 34 33 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _Assembly
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 31 37 31 35 36 33 36 30 2D 32 66 31 61 2D 33 38 34 61 2D 62 63 35 32 2D 66 64 65 39 33 63 32 31 35 63 35 62 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 00 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_CodeBase()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_EscapedCodeBase()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.AssemblyName GetName()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.AssemblyName GetName(bool copiedName)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_FullName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.MethodInfo get_EntryPoint()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType(string name, bool throwOnError)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetExportedTypes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetTypes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.Stream' GetManifestResourceStream(class System.Type 'type', string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.Stream' GetManifestResourceStream(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.FileStream' GetFile(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.FileStream'[] GetFiles()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.FileStream'[] GetFiles(bool getResourceModules)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string[] GetManifestResourceNames()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ManifestResourceInfo GetManifestResourceInfo(string resourceName)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Location()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Security.Policy.Evidence get_Evidence()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void add_ModuleResolve(class System.Reflection.ModuleResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void remove_ModuleResolve(class System.Reflection.ModuleResolveEventHandler 'value')
			synchronized 
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType(string name, bool throwOnError, bool ignoreCase)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Assembly GetSatelliteAssembly(class System.Globalization.CultureInfo culture, class System.Version version)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module LoadModule(string moduleName, uint8[] rawModule)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module LoadModule(string moduleName, uint8[] rawModule, uint8[] rawSymbolStore)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object CreateInstance(string typeName)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object CreateInstance(string typeName, bool ignoreCase)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object CreateInstance(string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module[] GetLoadedModules()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module[] GetLoadedModules(bool getResourceModules)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module[] GetModules()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module[] GetModules(bool getResourceModules)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.Module GetModule(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.AssemblyName[] GetReferencedAssemblies()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_GlobalAssemblyCache()
		{
		}
		.event System.Reflection.ModuleResolveEventHandler ModuleResolve
		{
			.addon instance void System.Runtime.InteropServices._Assembly::add_ModuleResolve(class System.Reflection.ModuleResolveEventHandler)
			.removeon instance void System.Runtime.InteropServices._Assembly::remove_ModuleResolve(class System.Reflection.ModuleResolveEventHandler)
		}
		.property instance string CodeBase()
		{
			.get instance string System.Runtime.InteropServices._Assembly::get_CodeBase()
		}
		.property instance class System.Reflection.MethodInfo EntryPoint()
		{
			.get instance class System.Reflection.MethodInfo System.Runtime.InteropServices._Assembly::get_EntryPoint()
		}
		.property instance string EscapedCodeBase()
		{
			.get instance string System.Runtime.InteropServices._Assembly::get_EscapedCodeBase()
		}
		.property instance class System.Security.Policy.Evidence Evidence()
		{
			.get instance class System.Security.Policy.Evidence System.Runtime.InteropServices._Assembly::get_Evidence()
		}
		.property instance string FullName()
		{
			.get instance string System.Runtime.InteropServices._Assembly::get_FullName()
		}
		.property instance bool GlobalAssemblyCache()
		{
			.get instance bool System.Runtime.InteropServices._Assembly::get_GlobalAssemblyCache()
		}
		.property instance string Location()
		{
			.get instance string System.Runtime.InteropServices._Assembly::get_Location()
		}
	}
	.class public interface abstract _AssemblyBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 42 45 42 42 32 35 30 35 2D 38 42 35 34 2D 33 34 34 33 2D 41 45 41 44 2D 31 34 32 41 31 36 44 44 39 43 43 37 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _AssemblyName
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 42 34 32 42 36 41 41 43 2D 33 31 37 45 2D 33 34 44 35 2D 39 46 41 39 2D 30 39 33 42 42 34 31 36 30 43 35 30 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _Attribute
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 39 31 37 42 31 34 44 30 2D 32 44 39 45 2D 33 38 42 38 2D 39 32 41 39 2D 33 38 31 41 43 46 35 32 46 37 43 30 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _ConstructorBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 45 44 33 45 34 33 38 34 2D 44 37 45 32 2D 33 46 41 37 2D 38 46 46 44 2D 38 39 34 30 44 33 33 30 35 31 39 41 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _ConstructorInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 45 39 41 31 39 34 37 38 2D 39 36 34 36 2D 33 36 37 39 2D 39 42 31 30 2D 38 34 31 31 41 45 31 46 44 35 37 44 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke_2(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPrivate()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamily()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyAndAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyOrAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsStatic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFinal()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsVirtual()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsHideBySig()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAbstract()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsConstructor()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke_3(object obj, object[] parameters)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke_4(valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke_5(object[] parameters)
		{
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Runtime.InteropServices._ConstructorInfo::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Runtime.InteropServices._ConstructorInfo::get_CallingConvention()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._ConstructorInfo::get_DeclaringType()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsAbstract()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsAssembly()
		}
		.property instance bool IsConstructor()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsConstructor()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsFamilyOrAssembly()
		}
		.property instance bool IsFinal()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsFinal()
		}
		.property instance bool IsHideBySig()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsHideBySig()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsStatic()
		}
		.property instance bool IsVirtual()
		{
			.get instance bool System.Runtime.InteropServices._ConstructorInfo::get_IsVirtual()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._ConstructorInfo::get_MemberType()
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Runtime.InteropServices._ConstructorInfo::get_MethodHandle()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._ConstructorInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._ConstructorInfo::get_ReflectedType()
		}
	}
	.class public interface abstract _CustomAttributeBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 42 45 39 41 43 43 45 38 2D 41 41 46 46 2D 33 42 39 31 2D 38 31 41 45 2D 38 32 31 31 36 36 33 46 35 43 41 44 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _EnumBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 43 37 42 44 37 33 44 45 2D 39 46 38 35 2D 33 32 39 30 2D 38 38 45 45 2D 30 39 30 42 38 42 44 46 45 32 44 46 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _EventBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 41 41 44 41 42 41 39 39 2D 38 39 35 44 2D 33 44 36 35 2D 39 37 36 30 2D 42 31 46 31 32 36 32 31 46 41 45 38 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _EventInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 39 44 45 35 39 43 36 34 2D 44 38 38 39 2D 33 35 41 31 2D 42 38 39 37 2D 35 38 37 44 37 34 34 36 39 45 35 42 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetAddMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRemoveMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRaiseMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.EventAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetAddMethod()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRemoveMethod()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetRaiseMethod()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddEventHandler(object target, class System.Delegate 'handler')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveEventHandler(object target, class System.Delegate 'handler')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_EventHandlerType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsMulticast()
		{
		}
		.property instance valuetype System.Reflection.EventAttributes Attributes()
		{
			.get instance valuetype System.Reflection.EventAttributes System.Runtime.InteropServices._EventInfo::get_Attributes()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._EventInfo::get_DeclaringType()
		}
		.property instance class System.Type EventHandlerType()
		{
			.get instance class System.Type System.Runtime.InteropServices._EventInfo::get_EventHandlerType()
		}
		.property instance bool IsMulticast()
		{
			.get instance bool System.Runtime.InteropServices._EventInfo::get_IsMulticast()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._EventInfo::get_IsSpecialName()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._EventInfo::get_MemberType()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._EventInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._EventInfo::get_ReflectedType()
		}
	}
	.class public interface abstract _Exception
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 62 33 36 62 35 63 36 33 2D 34 32 65 66 2D 33 38 62 63 2D 61 30 37 65 2D 30 62 33 34 63 39 38 66 31 36 34 61 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 00 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object obj)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Message()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Exception GetBaseException()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_StackTrace()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_HelpLink()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_HelpLink(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Source()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Source(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Exception get_InnerException()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.MethodBase get_TargetSite()
		{
		}
		.property instance string HelpLink()
		{
			.get instance string System.Runtime.InteropServices._Exception::get_HelpLink()
			.set instance void System.Runtime.InteropServices._Exception::set_HelpLink(string)
		}
		.property instance class System.Exception InnerException()
		{
			.get instance class System.Exception System.Runtime.InteropServices._Exception::get_InnerException()
		}
		.property instance string Message()
		{
			.get instance string System.Runtime.InteropServices._Exception::get_Message()
		}
		.property instance string Source()
		{
			.get instance string System.Runtime.InteropServices._Exception::get_Source()
			.set instance void System.Runtime.InteropServices._Exception::set_Source(string)
		}
		.property instance string StackTrace()
		{
			.get instance string System.Runtime.InteropServices._Exception::get_StackTrace()
		}
		.property instance class System.Reflection.MethodBase TargetSite()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.InteropServices._Exception::get_TargetSite()
		}
	}
	.class public interface abstract _FieldBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 43 45 31 41 33 42 46 35 2D 39 37 35 45 2D 33 30 43 43 2D 39 37 43 39 2D 31 45 46 37 30 46 38 46 33 39 39 33 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _FieldInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 38 41 37 43 31 34 34 32 2D 41 39 46 42 2D 33 36 36 42 2D 38 30 44 38 2D 34 39 33 39 46 46 41 36 44 42 45 30 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_FieldType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValue(object obj)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValueDirect(typedref obj)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value', valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValueDirect(typedref obj, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeFieldHandle get_FieldHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.FieldAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPrivate()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamily()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyAndAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyOrAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsStatic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsInitOnly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsLiteral()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNotSerialized()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPinvokeImpl()
		{
		}
		.property instance valuetype System.Reflection.FieldAttributes Attributes()
		{
			.get instance valuetype System.Reflection.FieldAttributes System.Runtime.InteropServices._FieldInfo::get_Attributes()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._FieldInfo::get_DeclaringType()
		}
		.property instance valuetype System.RuntimeFieldHandle FieldHandle()
		{
			.get instance valuetype System.RuntimeFieldHandle System.Runtime.InteropServices._FieldInfo::get_FieldHandle()
		}
		.property instance class System.Type FieldType()
		{
			.get instance class System.Type System.Runtime.InteropServices._FieldInfo::get_FieldType()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsAssembly()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsFamilyOrAssembly()
		}
		.property instance bool IsInitOnly()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsInitOnly()
		}
		.property instance bool IsLiteral()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsLiteral()
		}
		.property instance bool IsNotSerialized()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsNotSerialized()
		}
		.property instance bool IsPinvokeImpl()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsPinvokeImpl()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Runtime.InteropServices._FieldInfo::get_IsStatic()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._FieldInfo::get_MemberType()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._FieldInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._FieldInfo::get_ReflectedType()
		}
	}
	.class public interface abstract _ILGenerator
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 41 34 39 32 34 42 32 37 2D 36 45 33 42 2D 33 37 46 37 2D 39 42 38 33 2D 41 34 35 30 31 39 35 35 45 36 41 37 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _LocalBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 34 45 36 33 35 30 44 31 2D 41 30 38 42 2D 33 44 45 43 2D 39 41 33 45 2D 43 34 36 35 46 39 41 45 45 43 30 43 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _MemberInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 66 37 31 30 32 66 61 39 2D 63 61 62 62 2D 33 61 37 34 2D 61 36 64 61 2D 62 34 35 36 37 65 66 31 62 30 37 39 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MemberInfo::get_DeclaringType()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo::get_MemberType()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._MemberInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MemberInfo::get_ReflectedType()
		}
	}
	.class public interface abstract _MethodBase
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 36 32 34 30 38 33 37 41 2D 37 30 37 46 2D 33 31 38 31 2D 38 45 39 38 2D 41 33 36 41 45 30 38 36 37 36 36 42 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPrivate()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamily()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyAndAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyOrAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsStatic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFinal()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsVirtual()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsHideBySig()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAbstract()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsConstructor()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(object obj, object[] parameters)
		{
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase::get_CallingConvention()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MethodBase::get_DeclaringType()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsAbstract()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsAssembly()
		}
		.property instance bool IsConstructor()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsConstructor()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsFamilyOrAssembly()
		}
		.property instance bool IsFinal()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsFinal()
		}
		.property instance bool IsHideBySig()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsHideBySig()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsStatic()
		}
		.property instance bool IsVirtual()
		{
			.get instance bool System.Runtime.InteropServices._MethodBase::get_IsVirtual()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase::get_MemberType()
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase::get_MethodHandle()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._MethodBase::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MethodBase::get_ReflectedType()
		}
	}
	.class public interface abstract _MethodBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 30 30 37 44 38 41 31 34 2D 46 44 46 33 2D 33 36 33 45 2D 39 41 30 42 2D 46 45 43 30 36 31 38 32 36 30 41 32 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _MethodInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 46 46 43 43 31 42 35 44 2D 45 43 42 38 2D 33 38 44 44 2D 39 42 30 31 2D 33 44 43 38 41 42 43 32 41 41 35 46 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetParameters()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeMethodHandle get_MethodHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MethodAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.CallingConventions get_CallingConvention()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPrivate()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamily()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyAndAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFamilyOrAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsStatic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsFinal()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsVirtual()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsHideBySig()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAbstract()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsConstructor()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Invoke(object obj, object[] parameters)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReturnType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.ICustomAttributeProvider get_ReturnTypeCustomAttributes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetBaseDefinition()
		{
		}
		.property instance valuetype System.Reflection.MethodAttributes Attributes()
		{
			.get instance valuetype System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodInfo::get_Attributes()
		}
		.property instance valuetype System.Reflection.CallingConventions CallingConvention()
		{
			.get instance valuetype System.Reflection.CallingConventions System.Runtime.InteropServices._MethodInfo::get_CallingConvention()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MethodInfo::get_DeclaringType()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsAbstract()
		}
		.property instance bool IsAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsAssembly()
		}
		.property instance bool IsConstructor()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsConstructor()
		}
		.property instance bool IsFamily()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsFamily()
		}
		.property instance bool IsFamilyAndAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsFamilyAndAssembly()
		}
		.property instance bool IsFamilyOrAssembly()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsFamilyOrAssembly()
		}
		.property instance bool IsFinal()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsFinal()
		}
		.property instance bool IsHideBySig()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsHideBySig()
		}
		.property instance bool IsPrivate()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsPrivate()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsPublic()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsSpecialName()
		}
		.property instance bool IsStatic()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsStatic()
		}
		.property instance bool IsVirtual()
		{
			.get instance bool System.Runtime.InteropServices._MethodInfo::get_IsVirtual()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._MethodInfo::get_MemberType()
		}
		.property instance valuetype System.RuntimeMethodHandle MethodHandle()
		{
			.get instance valuetype System.RuntimeMethodHandle System.Runtime.InteropServices._MethodInfo::get_MethodHandle()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._MethodInfo::get_Name()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MethodInfo::get_ReflectedType()
		}
		.property instance class System.Type ReturnType()
		{
			.get instance class System.Type System.Runtime.InteropServices._MethodInfo::get_ReturnType()
		}
		.property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes()
		{
			.get instance class System.Reflection.ICustomAttributeProvider System.Runtime.InteropServices._MethodInfo::get_ReturnTypeCustomAttributes()
		}
	}
	.class public interface abstract _MethodRental
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 43 32 33 32 33 43 32 35 2D 46 35 37 46 2D 33 38 38 30 2D 38 41 34 44 2D 31 32 45 42 45 41 37 41 35 38 35 32 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _Module
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 44 30 30 32 45 39 42 41 2D 44 39 45 33 2D 33 37 34 39 2D 42 31 44 33 2D 44 35 36 35 41 30 38 42 31 33 45 37 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _ModuleBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 44 30 35 46 46 41 39 41 2D 30 34 41 46 2D 33 35 31 39 2D 38 45 45 31 2D 38 44 39 33 41 44 37 33 34 33 30 42 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _ParameterBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 33 36 33 32 39 45 42 41 2D 46 39 37 41 2D 33 35 36 35 2D 42 43 30 37 2D 30 45 44 35 43 36 45 46 31 39 46 43 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _ParameterInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 39 39 33 36 33 34 43 34 2D 45 34 37 41 2D 33 32 43 43 2D 42 45 30 38 2D 38 35 46 35 36 37 44 43 32 37 44 36 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _PropertyBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 31 35 46 39 41 34 37 39 2D 39 33 39 37 2D 33 41 36 33 2D 41 43 42 44 2D 46 35 31 39 37 37 46 42 30 46 30 32 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _PropertyInfo
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 46 35 39 45 44 34 45 34 2D 45 36 38 46 2D 33 32 31 38 2D 42 44 37 37 2D 30 36 31 41 41 38 32 38 32 34 42 46 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_PropertyType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValue(object obj, object[] index)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetValue(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value', object[] index)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetValue(object obj, object 'value', valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] index, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetAccessors(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetGetMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetSetMethod(bool nonPublic)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ParameterInfo[] GetIndexParameters()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.PropertyAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanRead()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanWrite()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetAccessors()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetGetMethod()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetSetMethod()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.property instance valuetype System.Reflection.PropertyAttributes Attributes()
		{
			.get instance valuetype System.Reflection.PropertyAttributes System.Runtime.InteropServices._PropertyInfo::get_Attributes()
		}
		.property instance bool CanRead()
		{
			.get instance bool System.Runtime.InteropServices._PropertyInfo::get_CanRead()
		}
		.property instance bool CanWrite()
		{
			.get instance bool System.Runtime.InteropServices._PropertyInfo::get_CanWrite()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._PropertyInfo::get_DeclaringType()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._PropertyInfo::get_IsSpecialName()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._PropertyInfo::get_MemberType()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._PropertyInfo::get_Name()
		}
		.property instance class System.Type PropertyType()
		{
			.get instance class System.Type System.Runtime.InteropServices._PropertyInfo::get_PropertyType()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._PropertyInfo::get_ReflectedType()
		}
	}
	.class public interface abstract _SignatureHelper
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 37 44 31 33 44 44 33 37 2D 35 41 30 34 2D 33 39 33 43 2D 42 42 43 41 2D 41 35 46 45 41 38 30 32 38 39 33 44 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _Thread
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 43 32 38 31 43 37 46 31 2D 34 41 41 39 2D 33 35 31 37 2D 39 36 31 41 2D 34 36 33 43 46 45 44 35 37 45 37 35 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
	.class public interface abstract _Type
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 42 43 41 38 42 34 34 44 2D 41 41 44 36 2D 33 41 38 36 2D 38 41 42 37 2D 30 33 33 34 39 46 34 46 32 44 41 32 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object other)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetHashCode()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.MemberTypes get_MemberType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_DeclaringType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ReflectedType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object[] GetCustomAttributes(bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsDefined(class System.Type attributeType, bool inherit)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Guid get_GUID()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.Module get_Module()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.Assembly get_Assembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.RuntimeTypeHandle get_TypeHandle()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_FullName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Namespace()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_AssemblyQualifiedName()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetArrayRank()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_BaseType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetInterface(string name, bool ignoreCase)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetInterfaces()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter 'filter', object filterCriteria)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo[] GetEvents()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes 'type', valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetDefaultMembers()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter 'filter', object filterCriteria)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetElementType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsSubclassOf(class System.Type c)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsInstanceOfType(object o)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsAssignableFrom(class System.Type c)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_UnderlyingSystemType()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.ConstructorInfo[] GetConstructors()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.ConstructorInfo get_TypeInitializer()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo GetMethod(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo[] GetMethods()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo GetField(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo[] GetFields()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetInterface(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.EventInfo GetEvent(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo GetProperty(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo[] GetProperties()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type[] GetNestedTypes()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Type GetNestedType(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMember(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MemberInfo[] GetMembers()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Reflection.TypeAttributes get_Attributes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNotPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedPublic()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedPrivate()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedFamily()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedAssembly()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedFamANDAssem()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsNestedFamORAssem()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAutoLayout()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsLayoutSequential()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsExplicitLayout()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsClass()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsInterface()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsValueType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAbstract()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSealed()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsEnum()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSpecialName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsImport()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSerializable()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAnsiClass()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsUnicodeClass()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAutoClass()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsArray()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsByRef()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPointer()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsPrimitive()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsCOMObject()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_HasElementType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsContextful()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsMarshalByRef()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(class System.Type o)
		{
		}
		.property instance class System.Reflection.Assembly Assembly()
		{
			.get instance class System.Reflection.Assembly System.Runtime.InteropServices._Type::get_Assembly()
		}
		.property instance string AssemblyQualifiedName()
		{
			.get instance string System.Runtime.InteropServices._Type::get_AssemblyQualifiedName()
		}
		.property instance valuetype System.Reflection.TypeAttributes Attributes()
		{
			.get instance valuetype System.Reflection.TypeAttributes System.Runtime.InteropServices._Type::get_Attributes()
		}
		.property instance class System.Type BaseType()
		{
			.get instance class System.Type System.Runtime.InteropServices._Type::get_BaseType()
		}
		.property instance class System.Type DeclaringType()
		{
			.get instance class System.Type System.Runtime.InteropServices._Type::get_DeclaringType()
		}
		.property instance string FullName()
		{
			.get instance string System.Runtime.InteropServices._Type::get_FullName()
		}
		.property instance valuetype System.Guid 'GUID'()
		{
			.get instance valuetype System.Guid System.Runtime.InteropServices._Type::get_GUID()
		}
		.property instance bool HasElementType()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_HasElementType()
		}
		.property instance bool IsAbstract()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsAbstract()
		}
		.property instance bool IsAnsiClass()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsAnsiClass()
		}
		.property instance bool IsArray()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsArray()
		}
		.property instance bool IsAutoClass()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsAutoClass()
		}
		.property instance bool IsAutoLayout()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsAutoLayout()
		}
		.property instance bool IsByRef()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsByRef()
		}
		.property instance bool IsCOMObject()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsCOMObject()
		}
		.property instance bool IsClass()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsClass()
		}
		.property instance bool IsContextful()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsContextful()
		}
		.property instance bool IsEnum()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsEnum()
		}
		.property instance bool IsExplicitLayout()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsExplicitLayout()
		}
		.property instance bool IsImport()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsImport()
		}
		.property instance bool IsInterface()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsInterface()
		}
		.property instance bool IsLayoutSequential()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsLayoutSequential()
		}
		.property instance bool IsMarshalByRef()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsMarshalByRef()
		}
		.property instance bool IsNestedAssembly()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedAssembly()
		}
		.property instance bool IsNestedFamANDAssem()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedFamANDAssem()
		}
		.property instance bool IsNestedFamORAssem()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedFamORAssem()
		}
		.property instance bool IsNestedFamily()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedFamily()
		}
		.property instance bool IsNestedPrivate()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedPrivate()
		}
		.property instance bool IsNestedPublic()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNestedPublic()
		}
		.property instance bool IsNotPublic()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsNotPublic()
		}
		.property instance bool IsPointer()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsPointer()
		}
		.property instance bool IsPrimitive()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsPrimitive()
		}
		.property instance bool IsPublic()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsPublic()
		}
		.property instance bool IsSealed()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsSealed()
		}
		.property instance bool IsSerializable()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsSerializable()
		}
		.property instance bool IsSpecialName()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsSpecialName()
		}
		.property instance bool IsUnicodeClass()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsUnicodeClass()
		}
		.property instance bool IsValueType()
		{
			.get instance bool System.Runtime.InteropServices._Type::get_IsValueType()
		}
		.property instance valuetype System.Reflection.MemberTypes MemberType()
		{
			.get instance valuetype System.Reflection.MemberTypes System.Runtime.InteropServices._Type::get_MemberType()
		}
		.property instance class System.Reflection.Module Module()
		{
			.get instance class System.Reflection.Module System.Runtime.InteropServices._Type::get_Module()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.InteropServices._Type::get_Name()
		}
		.property instance string Namespace()
		{
			.get instance string System.Runtime.InteropServices._Type::get_Namespace()
		}
		.property instance class System.Type ReflectedType()
		{
			.get instance class System.Type System.Runtime.InteropServices._Type::get_ReflectedType()
		}
		.property instance valuetype System.RuntimeTypeHandle TypeHandle()
		{
			.get instance valuetype System.RuntimeTypeHandle System.Runtime.InteropServices._Type::get_TypeHandle()
		}
		.property instance class System.Reflection.ConstructorInfo TypeInitializer()
		{
			.get instance class System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type::get_TypeInitializer()
		}
		.property instance class System.Type UnderlyingSystemType()
		{
			.get instance class System.Type System.Runtime.InteropServices._Type::get_UnderlyingSystemType()
		}
	}
	.class public interface abstract _TypeBuilder
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 37 45 35 36 37 38 45 45 2D 34 38 42 33 2D 33 46 38 33 2D 42 30 37 36 2D 43 35 38 35 34 33 34 39 38 41 35 38 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfoCount([out] uint32& pcTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
		}
	}
}
.namespace System.Runtime.InteropServices.Expando
{
	.class public interface abstract IExpando
		implements System.Reflection.IReflect
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 41 46 42 46 31 35 45 36 2D 43 33 37 43 2D 31 31 64 32 2D 42 38 38 45 2D 30 30 41 30 43 39 42 34 37 31 42 38 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.FieldInfo AddField(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.PropertyInfo AddProperty(string name)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Reflection.MethodInfo AddMethod(string name, class System.Delegate 'method')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveMember(class System.Reflection.MemberInfo m)
		{
		}
	}
}
.namespace System.Runtime.Remoting
{
	.class public ActivatedClientTypeEntry
		extends System.Runtime.Remoting.TypeEntry
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string typeName, string assemblyName, string appUrl)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type', string appUrl)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ApplicationUrl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[] 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string ApplicationUrl()
		{
			.get instance string System.Runtime.Remoting.ActivatedClientTypeEntry::get_ApplicationUrl()
		}
		.property instance class System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes()
		{
			.get instance class System.Runtime.Remoting.Contexts.IContextAttribute[] System.Runtime.Remoting.ActivatedClientTypeEntry::get_ContextAttributes()
			.set instance void System.Runtime.Remoting.ActivatedClientTypeEntry::set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[])
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Remoting.ActivatedClientTypeEntry::get_ObjectType()
		}
	}
	.class public ActivatedServiceTypeEntry
		extends System.Runtime.Remoting.TypeEntry
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string typeName, string assemblyName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[] 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes()
		{
			.get instance class System.Runtime.Remoting.Contexts.IContextAttribute[] System.Runtime.Remoting.ActivatedServiceTypeEntry::get_ContextAttributes()
			.set instance void System.Runtime.Remoting.ActivatedServiceTypeEntry::set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[])
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Remoting.ActivatedServiceTypeEntry::get_ObjectType()
		}
	}
	.class public sealed CustomErrorsModes
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.CustomErrorsModes Off = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Remoting.CustomErrorsModes On = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.CustomErrorsModes RemoteOnly = int32(0x00000002)
	}
	.class public interface abstract IChannelInfo
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_ChannelData()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ChannelData(object[] 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance object[] ChannelData()
		{
			.get instance object[] System.Runtime.Remoting.IChannelInfo::get_ChannelData()
			.set instance void System.Runtime.Remoting.IChannelInfo::set_ChannelData(object[])
		}
	}
	.class public interface abstract IEnvoyInfo
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Messaging.IMessageSink get_EnvoySinks()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_EnvoySinks(class System.Runtime.Remoting.Messaging.IMessageSink 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Messaging.IMessageSink EnvoySinks()
		{
			.get instance class System.Runtime.Remoting.Messaging.IMessageSink System.Runtime.Remoting.IEnvoyInfo::get_EnvoySinks()
			.set instance void System.Runtime.Remoting.IEnvoyInfo::set_EnvoySinks(class System.Runtime.Remoting.Messaging.IMessageSink)
		}
	}
	.class public interface abstract IObjectHandle
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.custom instance void System.Runtime.InteropServices.GuidAttribute::.ctor(string) = (01 00 24 43 34 36 30 45 32 42 34 2D 45 31 39 39 2D 34 31 32 61 2D 38 34 35 36 2D 38 34 44 43 33 45 34 38 33 38 43 33 00 00)
		.custom instance void System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype System.Runtime.InteropServices.ComInterfaceType) = (01 00 01 00 00 00 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Unwrap()
		{
		}
	}
	.class public interface abstract IRemotingTypeInfo
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_TypeName()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_TypeName(string 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance bool CanCastTo(class System.Type fromType, object o)
		{
			.permissionset linkcheck = (00)
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.IRemotingTypeInfo::get_TypeName()
			.set instance void System.Runtime.Remoting.IRemotingTypeInfo::set_TypeName(string)
		}
	}
	.class public InternalRemotingServices
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void DebugOutChnl(string s)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 08 5F 4C 4F 47 47 49 4E 47 00 00)
			ret
		}
		.method public static hidebysig 
			void RemotingTrace(object[] messages)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 08 5F 4C 4F 47 47 49 4E 47 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			void RemotingAssert(bool condition, string message)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 06 5F 44 45 42 55 47 00 00)
			ret
		}
		.method public static hidebysig 
			void SetServerIdentity(class System.Runtime.Remoting.Messaging.MethodCall m, object srvID)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute(object reflectionObject)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable ObjRef
		extends System.Object
		implements System.Runtime.Serialization.IObjectReference, System.Runtime.Serialization.ISerializable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.MarshalByRefObject o, class System.Type requestedType)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_URI()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_URI(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.IRemotingTypeInfo get_TypeInfo()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_TypeInfo(class System.Runtime.Remoting.IRemotingTypeInfo 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.IEnvoyInfo get_EnvoyInfo()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_EnvoyInfo(class System.Runtime.Remoting.IEnvoyInfo 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.IChannelInfo get_ChannelInfo()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ChannelInfo(class System.Runtime.Remoting.IChannelInfo 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsFromThisProcess()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsFromThisAppDomain()
		{
			ret
		}
		.property instance class System.Runtime.Remoting.IChannelInfo ChannelInfo()
		{
			.get instance class System.Runtime.Remoting.IChannelInfo System.Runtime.Remoting.ObjRef::get_ChannelInfo()
			.set instance void System.Runtime.Remoting.ObjRef::set_ChannelInfo(class System.Runtime.Remoting.IChannelInfo)
		}
		.property instance class System.Runtime.Remoting.IEnvoyInfo EnvoyInfo()
		{
			.get instance class System.Runtime.Remoting.IEnvoyInfo System.Runtime.Remoting.ObjRef::get_EnvoyInfo()
			.set instance void System.Runtime.Remoting.ObjRef::set_EnvoyInfo(class System.Runtime.Remoting.IEnvoyInfo)
		}
		.property instance class System.Runtime.Remoting.IRemotingTypeInfo TypeInfo()
		{
			.get instance class System.Runtime.Remoting.IRemotingTypeInfo System.Runtime.Remoting.ObjRef::get_TypeInfo()
			.set instance void System.Runtime.Remoting.ObjRef::set_TypeInfo(class System.Runtime.Remoting.IRemotingTypeInfo)
		}
		.property instance string URI()
		{
			.get instance string System.Runtime.Remoting.ObjRef::get_URI()
			.set instance void System.Runtime.Remoting.ObjRef::set_URI(string)
		}
	}
	.class public ObjectHandle
		extends System.MarshalByRefObject
		implements System.Runtime.Remoting.IObjectHandle
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 02 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object o)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Unwrap()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InitializeLifetimeService()
		{
			.permissionset linkcheck = (00)
			ret
		}
	}
	.class public abstract sealed RemotingConfiguration
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void Configure(string filename)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 6A 55 73 65 20 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 52 65 6D 6F 74 69 6E 67 2E 52 65 6D 6F 74 69 6E 67 43 6F 6E 66 69 67 75 72 61 74 69 6F 6E 2E 43 6F 6E 66 69 67 75 72 65 28 73 74 72 69 6E 67 20 66 69 6C 65 4E 61 6D 65 2C 20 62 6F 6F 6C 20 65 6E 73 75 72 65 53 65 63 75 72 69 74 79 29 20 69 6E 73 74 65 61 64 2E 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Configure(string filename, bool ensureSecurity)
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_ApplicationName()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_ApplicationName(string 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_ApplicationId()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			string get_ProcessId()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.Runtime.Remoting.CustomErrorsModes get_CustomErrorsMode()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_CustomErrorsMode(valuetype System.Runtime.Remoting.CustomErrorsModes 'value')
		{
			ret
		}
		.method public static hidebysig 
			bool CustomErrorsEnabled(bool isLocalRequest)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterActivatedServiceType(class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			void RegisterActivatedServiceType(class System.Runtime.Remoting.ActivatedServiceTypeEntry entry)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterWellKnownServiceType(class System.Type 'type', string objectUri, valuetype System.Runtime.Remoting.WellKnownObjectMode mode)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterWellKnownServiceType(class System.Runtime.Remoting.WellKnownServiceTypeEntry entry)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterActivatedClientType(class System.Type 'type', string appUrl)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterActivatedClientType(class System.Runtime.Remoting.ActivatedClientTypeEntry entry)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterWellKnownClientType(class System.Type 'type', string objectUrl)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterWellKnownClientType(class System.Runtime.Remoting.WellKnownClientTypeEntry entry)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(class System.Type svrType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(string typeName, string assemblyName)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(class System.Type svrType)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(string typeName, string assemblyName)
		{
			ret
		}
		.method public static hidebysig 
			bool IsActivationAllowed(class System.Type svrType)
		{
			ret
		}
		.property string ApplicationId()
		{
			.get string System.Runtime.Remoting.RemotingConfiguration::get_ApplicationId()
		}
		.property string ApplicationName()
		{
			.get string System.Runtime.Remoting.RemotingConfiguration::get_ApplicationName()
			.set void System.Runtime.Remoting.RemotingConfiguration::set_ApplicationName(string)
		}
		.property valuetype System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode()
		{
			.get valuetype System.Runtime.Remoting.CustomErrorsModes System.Runtime.Remoting.RemotingConfiguration::get_CustomErrorsMode()
			.set void System.Runtime.Remoting.RemotingConfiguration::set_CustomErrorsMode(valuetype System.Runtime.Remoting.CustomErrorsModes)
		}
		.property string ProcessId()
		{
			.get string System.Runtime.Remoting.RemotingConfiguration::get_ProcessId()
		}
	}
	.class public serializable RemotingException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception InnerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed RemotingServices
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool IsTransparentProxy(object proxy)
			internalcall 
		{
		}
		.method public static hidebysig 
			bool IsObjectOutOfContext(object tp)
		{
			ret
		}
		.method public static hidebysig 
			bool IsObjectOutOfAppDomain(object tp)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Proxies.RealProxy GetRealProxy(object proxy)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			string GetSessionIdForMethodMessage(class System.Runtime.Remoting.Messaging.IMethodMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetLifetimeService(class System.MarshalByRefObject obj)
		{
			ret
		}
		.method public static hidebysig 
			string GetObjectUri(class System.MarshalByRefObject obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetObjectUriForMarshal(class System.MarshalByRefObject obj, string uri)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjRef Marshal(class System.MarshalByRefObject Obj)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjRef Marshal(class System.MarshalByRefObject Obj, string URI)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjRef Marshal(class System.MarshalByRefObject Obj, string ObjURI, class System.Type RequestedType)
		{
			ret
		}
		.method public static hidebysig 
			void GetObjectData(object obj, class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object Unmarshal(class System.Runtime.Remoting.ObjRef objectRef)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object Unmarshal(class System.Runtime.Remoting.ObjRef objectRef, bool fRefine)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object Connect(class System.Type classToProxy, string url)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			object Connect(class System.Type classToProxy, string url, object data)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public static hidebysig 
			bool Disconnect(class System.MarshalByRefObject obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Messaging.IMessageSink GetEnvoyChainForProxy(class System.MarshalByRefObject obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.ObjRef GetObjRefForProxy(class System.MarshalByRefObject obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Reflection.MethodBase GetMethodBaseFromMethodMessage(class System.Runtime.Remoting.Messaging.IMethodMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool IsMethodOverloaded(class System.Runtime.Remoting.Messaging.IMethodMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool IsOneWay(class System.Reflection.MethodBase 'method')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Type GetServerTypeForUri(string URI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Messaging.IMethodReturnMessage ExecuteMessage(class System.MarshalByRefObject target, class System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void LogRemotingStage(int32 stage)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 0D 52 45 4D 4F 54 49 4E 47 5F 50 45 52 46 00 00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 6A 55 73 65 20 6F 66 20 74 68 69 73 20 6D 65 74 68 6F 64 20 69 73 20 6E 6F 74 20 72 65 63 6F 6D 6D 65 6E 64 65 64 2E 20 54 68 65 20 4C 6F 67 52 65 6D 6F 74 69 6E 67 53 74 61 67 65 20 65 78 69 73 74 65 64 20 66 6F 72 20 69 6E 74 65 72 6E 61 6C 20 64 69 61 67 6E 6F 73 74 69 63 20 70 75 72 70 6F 73 65 73 20 6F 6E 6C 79 2E 00 00)
			ret
		}
	}
	.class public serializable RemotingTimeoutException
		extends System.Runtime.Remoting.RemotingException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception InnerException)
		{
			ret
		}
	}
	.class public serializable ServerException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception InnerException)
		{
			ret
		}
	}
	.class public SoapServices
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void RegisterInteropXmlElement(string xmlElement, string xmlNamespace, class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			void RegisterInteropXmlType(string xmlType, string xmlTypeNamespace, class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			void PreLoad(class System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			void PreLoad(class System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetInteropTypeFromXmlElement(string xmlElement, string xmlNamespace)
		{
			ret
		}
		.method public static hidebysig 
			class System.Type GetInteropTypeFromXmlType(string xmlType, string xmlTypeNamespace)
		{
			ret
		}
		.method public static hidebysig 
			void GetInteropFieldTypeAndNameFromXmlElement(class System.Type containingType, string xmlElement, string xmlNamespace, [out] class System.Type& 'type', [out] string& name)
		{
			ret
		}
		.method public static hidebysig 
			void GetInteropFieldTypeAndNameFromXmlAttribute(class System.Type containingType, string xmlAttribute, string xmlNamespace, [out] class System.Type& 'type', [out] string& name)
		{
			ret
		}
		.method public static hidebysig 
			bool GetXmlElementForInteropType(class System.Type 'type', [out] string& xmlElement, [out] string& xmlNamespace)
		{
			ret
		}
		.method public static hidebysig 
			bool GetXmlTypeForInteropType(class System.Type 'type', [out] string& xmlType, [out] string& xmlTypeNamespace)
		{
			ret
		}
		.method public static hidebysig 
			string GetXmlNamespaceForMethodCall(class System.Reflection.MethodBase mb)
		{
			ret
		}
		.method public static hidebysig 
			string GetXmlNamespaceForMethodResponse(class System.Reflection.MethodBase mb)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterSoapActionForMethodBase(class System.Reflection.MethodBase mb)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterSoapActionForMethodBase(class System.Reflection.MethodBase mb, string soapAction)
		{
			ret
		}
		.method public static hidebysig 
			string GetSoapActionFromMethodBase(class System.Reflection.MethodBase mb)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSoapActionValidForMethodBase(string soapAction, class System.Reflection.MethodBase mb)
		{
			ret
		}
		.method public static hidebysig 
			bool GetTypeAndMethodNameFromSoapAction(string soapAction, [out] string& typeName, [out] string& methodName)
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_XmlNsForClrType()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_XmlNsForClrTypeWithAssembly()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_XmlNsForClrTypeWithNs()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_XmlNsForClrTypeWithNsAndAssembly()
		{
			ret
		}
		.method public static hidebysig 
			bool IsClrTypeNamespace(string namespaceString)
		{
			ret
		}
		.method public static hidebysig 
			string CodeXmlNamespaceForClrTypeNamespace(string typeNamespace, string assemblyName)
		{
			ret
		}
		.method public static hidebysig 
			bool DecodeXmlNamespaceForClrTypeNamespace(string inNamespace, [out] string& typeNamespace, [out] string& assemblyName)
		{
			ret
		}
		.property string XmlNsForClrType()
		{
			.get string System.Runtime.Remoting.SoapServices::get_XmlNsForClrType()
		}
		.property string XmlNsForClrTypeWithAssembly()
		{
			.get string System.Runtime.Remoting.SoapServices::get_XmlNsForClrTypeWithAssembly()
		}
		.property string XmlNsForClrTypeWithNs()
		{
			.get string System.Runtime.Remoting.SoapServices::get_XmlNsForClrTypeWithNs()
		}
		.property string XmlNsForClrTypeWithNsAndAssembly()
		{
			.get string System.Runtime.Remoting.SoapServices::get_XmlNsForClrTypeWithNsAndAssembly()
		}
	}
	.class public TypeEntry
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AssemblyName(string 'value')
		{
			ret
		}
		.property instance string AssemblyName()
		{
			.get instance string System.Runtime.Remoting.TypeEntry::get_AssemblyName()
			.set instance void System.Runtime.Remoting.TypeEntry::set_AssemblyName(string)
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.TypeEntry::get_TypeName()
			.set instance void System.Runtime.Remoting.TypeEntry::set_TypeName(string)
		}
	}
	.class public WellKnownClientTypeEntry
		extends System.Runtime.Remoting.TypeEntry
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string typeName, string assemblyName, string objectUrl)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type', string objectUrl)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ObjectUrl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ApplicationUrl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ApplicationUrl(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string ApplicationUrl()
		{
			.get instance string System.Runtime.Remoting.WellKnownClientTypeEntry::get_ApplicationUrl()
			.set instance void System.Runtime.Remoting.WellKnownClientTypeEntry::set_ApplicationUrl(string)
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Remoting.WellKnownClientTypeEntry::get_ObjectType()
		}
		.property instance string ObjectUrl()
		{
			.get instance string System.Runtime.Remoting.WellKnownClientTypeEntry::get_ObjectUrl()
		}
	}
	.class public sealed serializable WellKnownObjectMode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.WellKnownObjectMode SingleCall = int32(0x00000002)
		.field static public literal valuetype System.Runtime.Remoting.WellKnownObjectMode Singleton = int32(0x00000001)
	}
	.class public WellKnownServiceTypeEntry
		extends System.Runtime.Remoting.TypeEntry
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string typeName, string assemblyName, string objectUri, valuetype System.Runtime.Remoting.WellKnownObjectMode mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type', string objectUri, valuetype System.Runtime.Remoting.WellKnownObjectMode mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ObjectUri()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Remoting.WellKnownObjectMode get_Mode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Runtime.Remoting.Contexts.IContextAttribute[] get_ContextAttributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[] 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes()
		{
			.get instance class System.Runtime.Remoting.Contexts.IContextAttribute[] System.Runtime.Remoting.WellKnownServiceTypeEntry::get_ContextAttributes()
			.set instance void System.Runtime.Remoting.WellKnownServiceTypeEntry::set_ContextAttributes(class System.Runtime.Remoting.Contexts.IContextAttribute[])
		}
		.property instance valuetype System.Runtime.Remoting.WellKnownObjectMode Mode()
		{
			.get instance valuetype System.Runtime.Remoting.WellKnownObjectMode System.Runtime.Remoting.WellKnownServiceTypeEntry::get_Mode()
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Remoting.WellKnownServiceTypeEntry::get_ObjectType()
		}
		.property instance string ObjectUri()
		{
			.get instance string System.Runtime.Remoting.WellKnownServiceTypeEntry::get_ObjectUri()
		}
	}
}
.namespace System.Runtime.Remoting.Activation
{
	.class public sealed serializable ActivatorLevel
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Activation.ActivatorLevel AppDomain = int32(0x0000000C)
		.field static public literal valuetype System.Runtime.Remoting.Activation.ActivatorLevel Construction = int32(0x00000004)
		.field static public literal valuetype System.Runtime.Remoting.Activation.ActivatorLevel Context = int32(0x00000008)
		.field static public literal valuetype System.Runtime.Remoting.Activation.ActivatorLevel Machine = int32(0x00000014)
		.field static public literal valuetype System.Runtime.Remoting.Activation.ActivatorLevel Process = int32(0x00000010)
	}
	.class public interface abstract IActivator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Activation.IActivator get_NextActivator()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_NextActivator(class System.Runtime.Remoting.Activation.IActivator 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Runtime.Remoting.Activation.ActivatorLevel get_Level()
		{
			.permissionset linkcheck = (00)
		}
		.property instance valuetype System.Runtime.Remoting.Activation.ActivatorLevel Level()
		{
			.get instance valuetype System.Runtime.Remoting.Activation.ActivatorLevel System.Runtime.Remoting.Activation.IActivator::get_Level()
		}
		.property instance class System.Runtime.Remoting.Activation.IActivator NextActivator()
		{
			.get instance class System.Runtime.Remoting.Activation.IActivator System.Runtime.Remoting.Activation.IActivator::get_NextActivator()
			.set instance void System.Runtime.Remoting.Activation.IActivator::set_NextActivator(class System.Runtime.Remoting.Activation.IActivator)
		}
	}
	.class public interface abstract IConstructionCallMessage
		implements System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Activation.IActivator get_Activator()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Activator(class System.Runtime.Remoting.Activation.IActivator 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_CallSiteActivationAttributes()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ActivationTypeName()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type get_ActivationType()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Collections.IList get_ContextProperties()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Type ActivationType()
		{
			.get instance class System.Type System.Runtime.Remoting.Activation.IConstructionCallMessage::get_ActivationType()
		}
		.property instance string ActivationTypeName()
		{
			.get instance string System.Runtime.Remoting.Activation.IConstructionCallMessage::get_ActivationTypeName()
		}
		.property instance class System.Runtime.Remoting.Activation.IActivator Activator()
		{
			.get instance class System.Runtime.Remoting.Activation.IActivator System.Runtime.Remoting.Activation.IConstructionCallMessage::get_Activator()
			.set instance void System.Runtime.Remoting.Activation.IConstructionCallMessage::set_Activator(class System.Runtime.Remoting.Activation.IActivator)
		}
		.property instance object[] CallSiteActivationAttributes()
		{
			.get instance object[] System.Runtime.Remoting.Activation.IConstructionCallMessage::get_CallSiteActivationAttributes()
		}
		.property instance class System.Collections.IList ContextProperties()
		{
			.get instance class System.Collections.IList System.Runtime.Remoting.Activation.IConstructionCallMessage::get_ContextProperties()
		}
	}
	.class public interface abstract IConstructionReturnMessage
		implements System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public sealed serializable UrlAttribute
		extends System.Runtime.Remoting.Contexts.ContextAttribute
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string callsiteURL)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsContextOK(class System.Runtime.Remoting.Contexts.Context ctx, class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance void GetPropertiesForNewContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance string get_UrlValue()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string UrlValue()
		{
			.get instance string System.Runtime.Remoting.Activation.UrlAttribute::get_UrlValue()
		}
	}
}
.namespace System.Runtime.Remoting.Channels
{
	.class public abstract BaseChannelObjectWithProperties
		extends System.Object
		implements System.Collections.IDictionary, System.Collections.ICollection, System.Collections.IEnumerable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Keys()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.ICollection get_Values()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Contains(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsFixedSize()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Add(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Remove(object key)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Collections.IDictionaryEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			.override System.Collections.IEnumerable::GetEnumerator
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_Count()
		}
		.property instance bool IsFixedSize()
		{
			.get instance bool System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_IsFixedSize()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_IsSynchronized()
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::set_Item(object, object)
		}
		.property instance class System.Collections.ICollection Keys()
		{
			.get instance class System.Collections.ICollection System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_Keys()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_Properties()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_SyncRoot()
		}
		.property instance class System.Collections.ICollection Values()
		{
			.get instance class System.Collections.ICollection System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties::get_Values()
		}
	}
	.class public abstract BaseChannelSinkWithProperties
		extends System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract BaseChannelWithProperties
		extends System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.field family class System.Runtime.Remoting.Channels.IChannelSinkBase SinksWithProperties
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Channels.BaseChannelWithProperties::get_Properties()
		}
	}
	.class public serializable ChannelDataStore
		extends System.Object
		implements System.Runtime.Remoting.Channels.IChannelDataStore
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string[] channelURIs)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string[] get_ChannelUris()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ChannelUris(string[] 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.property instance string[] ChannelUris()
		{
			.get instance string[] System.Runtime.Remoting.Channels.ChannelDataStore::get_ChannelUris()
			.set instance void System.Runtime.Remoting.Channels.ChannelDataStore::set_ChannelUris(string[])
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.ChannelDataStore::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.ChannelDataStore::set_Item(object, object)
		}
	}
	.class public sealed ChannelServices
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void RegisterChannel(class System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity)
		{
			ret
		}
		.method public static hidebysig 
			void RegisterChannel(class System.Runtime.Remoting.Channels.IChannel chnl)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 68 55 73 65 20 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 52 65 6D 6F 74 69 6E 67 2E 43 68 61 6E 6E 65 6C 53 65 72 76 69 63 65 73 2E 52 65 67 69 73 74 65 72 43 68 61 6E 6E 65 6C 28 49 43 68 61 6E 6E 65 6C 20 63 68 6E 6C 2C 20 62 6F 6F 6C 20 65 6E 73 75 72 65 53 65 63 75 72 69 74 79 29 20 69 6E 73 74 65 61 64 2E 00 00 00)
			ret
		}
		.method public static hidebysig 
			void UnregisterChannel(class System.Runtime.Remoting.Channels.IChannel chnl)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Runtime.Remoting.Channels.IChannel[] get_RegisteredChannels()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Channels.IChannel GetChannel(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			string[] GetUrlsForObject(class System.MarshalByRefObject obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Collections.IDictionary GetChannelSinkProperties(object obj)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Runtime.Remoting.Channels.ServerProcessing DispatchMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage msg, [out] class System.Runtime.Remoting.Messaging.IMessage& replyMsg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncDispatchMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Channels.IServerChannelSink CreateServerChannelSinkChain(class System.Runtime.Remoting.Channels.IServerChannelSinkProvider provider, class System.Runtime.Remoting.Channels.IChannelReceiver channel)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property class System.Runtime.Remoting.Channels.IChannel[] RegisteredChannels()
		{
			.get class System.Runtime.Remoting.Channels.IChannel[] System.Runtime.Remoting.Channels.ChannelServices::get_RegisteredChannels()
		}
	}
	.class public ClientChannelSinkStack
		extends System.Object
		implements System.Runtime.Remoting.Channels.IClientChannelSinkStack, System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Push(class System.Runtime.Remoting.Channels.IClientChannelSink sink, object state)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Pop(class System.Runtime.Remoting.Channels.IClientChannelSink sink)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void DispatchReplyMessage(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void DispatchException(class System.Exception e)
		{
			ret
		}
	}
	.class public interface abstract IChannel
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.IChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.IChannel::get_ChannelPriority()
		}
	}
	.class public interface abstract IChannelDataStore
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string[] get_ChannelUris()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Item(object key)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(object key, object 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance string[] ChannelUris()
		{
			.get instance string[] System.Runtime.Remoting.Channels.IChannelDataStore::get_ChannelUris()
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.IChannelDataStore::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.IChannelDataStore::set_Item(object, object)
		}
	}
	.class public interface abstract IChannelReceiver
		implements System.Runtime.Remoting.Channels.IChannel
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_ChannelData()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance string[] GetUrlsForUri(string objectURI)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void StartListening(object data)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void StopListening(object data)
		{
			.permissionset linkcheck = (00)
		}
		.property instance object ChannelData()
		{
			.get instance object System.Runtime.Remoting.Channels.IChannelReceiver::get_ChannelData()
		}
	}
	.class public interface abstract IChannelReceiverHook
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_ChannelScheme()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_WantsToListen()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Channels.IServerChannelSink get_ChannelSinkChain()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddHookChannelUri(string channelUri)
		{
			.permissionset linkcheck = (00)
		}
		.property instance string ChannelScheme()
		{
			.get instance string System.Runtime.Remoting.Channels.IChannelReceiverHook::get_ChannelScheme()
		}
		.property instance class System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain()
		{
			.get instance class System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.IChannelReceiverHook::get_ChannelSinkChain()
		}
		.property instance bool WantsToListen()
		{
			.get instance bool System.Runtime.Remoting.Channels.IChannelReceiverHook::get_WantsToListen()
		}
	}
	.class public interface abstract IChannelSender
		implements System.Runtime.Remoting.Channels.IChannel
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IChannelSinkBase
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Channels.IChannelSinkBase::get_Properties()
		}
	}
	.class public interface abstract IClientChannelSink
		implements System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void ProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class 'System.IO.Stream' requestStream, [out] class System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class 'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void AsyncProcessRequest(class System.Runtime.Remoting.Channels.IClientChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.Stream' GetRequestStream(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Channels.IClientChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Channels.IClientChannelSink NextChannelSink()
		{
			.get instance class System.Runtime.Remoting.Channels.IClientChannelSink System.Runtime.Remoting.Channels.IClientChannelSink::get_NextChannelSink()
		}
	}
	.class public interface abstract IClientChannelSinkProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Channels.IClientChannelSink CreateSink(class System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Channels.IClientChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Next(class System.Runtime.Remoting.Channels.IClientChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next()
		{
			.get instance class System.Runtime.Remoting.Channels.IClientChannelSinkProvider System.Runtime.Remoting.Channels.IClientChannelSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.IClientChannelSinkProvider::set_Next(class System.Runtime.Remoting.Channels.IClientChannelSinkProvider)
		}
	}
	.class public interface abstract IClientChannelSinkStack
		implements System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Push(class System.Runtime.Remoting.Channels.IClientChannelSink sink, object state)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object Pop(class System.Runtime.Remoting.Channels.IClientChannelSink sink)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IClientFormatterSink
		implements System.Runtime.Remoting.Messaging.IMessageSink, System.Runtime.Remoting.Channels.IClientChannelSink, System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public interface abstract IClientFormatterSinkProvider
		implements System.Runtime.Remoting.Channels.IClientChannelSinkProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public interface abstract IClientResponseChannelSinkStack
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void DispatchReplyMessage(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void DispatchException(class System.Exception e)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract ISecurableChannel
	{
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.ISecurableChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.ISecurableChannel::set_IsSecured(bool)
		}
	}
	.class public interface abstract IServerChannelSink
		implements System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage requestMsg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class 'System.IO.Stream' requestStream, [out] class System.Runtime.Remoting.Messaging.IMessage& responseMsg, [out] class System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class 'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.Stream' GetResponseStream(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Channels.IServerChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink()
		{
			.get instance class System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.IServerChannelSink::get_NextChannelSink()
		}
	}
	.class public interface abstract IServerChannelSinkProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetChannelData(class System.Runtime.Remoting.Channels.IChannelDataStore channelData)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Channels.IServerChannelSink CreateSink(class System.Runtime.Remoting.Channels.IChannelReceiver channel)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Channels.IServerChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Next(class System.Runtime.Remoting.Channels.IServerChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Channels.IServerChannelSinkProvider Next()
		{
			.get instance class System.Runtime.Remoting.Channels.IServerChannelSinkProvider System.Runtime.Remoting.Channels.IServerChannelSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.IServerChannelSinkProvider::set_Next(class System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
		}
	}
	.class public interface abstract IServerChannelSinkStack
		implements System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Push(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object Pop(class System.Runtime.Remoting.Channels.IServerChannelSink sink)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void Store(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void StoreAndDispatch(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void ServerCallback(class System.IAsyncResult ar)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IServerFormatterSinkProvider
		implements System.Runtime.Remoting.Channels.IServerChannelSinkProvider
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public interface abstract IServerResponseChannelSinkStack
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class 'System.IO.Stream' GetResponseStream(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract ITransportHeaders
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_Item(object key)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Item(object key, object 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			.permissionset linkcheck = (00)
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.ITransportHeaders::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.ITransportHeaders::set_Item(object, object)
		}
	}
	.class public ServerChannelSinkStack
		extends System.Object
		implements System.Runtime.Remoting.Channels.IServerChannelSinkStack, System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance void Push(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Pop(class System.Runtime.Remoting.Channels.IServerChannelSink sink)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Store(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StoreAndDispatch(class System.Runtime.Remoting.Channels.IServerChannelSink sink, object state)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class 'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class 'System.IO.Stream' GetResponseStream(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void ServerCallback(class System.IAsyncResult ar)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable ServerProcessing
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Channels.ServerProcessing Async = int32(0x00000002)
		.field static public literal valuetype System.Runtime.Remoting.Channels.ServerProcessing Complete = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.Channels.ServerProcessing OneWay = int32(0x00000001)
	}
	.class public SinkProviderData
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.IList get_Children()
		{
			ret
		}
		.property instance class System.Collections.IList Children()
		{
			.get instance class System.Collections.IList System.Runtime.Remoting.Channels.SinkProviderData::get_Children()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Channels.SinkProviderData::get_Name()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Channels.SinkProviderData::get_Properties()
		}
	}
	.class public serializable TransportHeaders
		extends System.Object
		implements System.Runtime.Remoting.Channels.ITransportHeaders
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.TransportHeaders::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.TransportHeaders::set_Item(object, object)
		}
	}
}
.namespace System.Runtime.Remoting.Contexts
{
	.class public Context
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ContextID()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class System.Runtime.Remoting.Contexts.Context get_DefaultContext()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Contexts.IContextProperty GetProperty(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetProperty(class System.Runtime.Remoting.Contexts.IContextProperty prop)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Freeze()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Contexts.IContextProperty[] get_ContextProperties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance void DoCallBack(class System.Runtime.Remoting.Contexts.CrossContextDelegate deleg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot AllocateDataSlot()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot AllocateNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot GetNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void FreeNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetData(class System.LocalDataStoreSlot slot, object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetData(class System.LocalDataStoreSlot slot)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool RegisterDynamicProperty(class System.Runtime.Remoting.Contexts.IDynamicProperty prop, class System.ContextBoundObject obj, class System.Runtime.Remoting.Contexts.Context ctx)
		{
			ret
		}
		.method public static hidebysig 
			bool UnregisterDynamicProperty(string name, class System.ContextBoundObject obj, class System.Runtime.Remoting.Contexts.Context ctx)
		{
			ret
		}
		.property instance int32 ContextID()
		{
			.get instance int32 System.Runtime.Remoting.Contexts.Context::get_ContextID()
		}
		.property instance class System.Runtime.Remoting.Contexts.IContextProperty[] ContextProperties()
		{
			.get instance class System.Runtime.Remoting.Contexts.IContextProperty[] System.Runtime.Remoting.Contexts.Context::get_ContextProperties()
		}
		.property class System.Runtime.Remoting.Contexts.Context DefaultContext()
		{
			.get class System.Runtime.Remoting.Contexts.Context System.Runtime.Remoting.Contexts.Context::get_DefaultContext()
		}
	}
	.class public serializable ContextAttribute
		extends System.Attribute
		implements System.Runtime.Remoting.Contexts.IContextAttribute, System.Runtime.Remoting.Contexts.IContextProperty
	{
		.permissionset linkcheck = (00)
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsNewContextOK(class System.Runtime.Remoting.Contexts.Context newCtx)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Freeze(class System.Runtime.Remoting.Contexts.Context newContext)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsContextOK(class System.Runtime.Remoting.Contexts.Context ctx, class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetPropertiesForNewContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg)
		{
			ret
		}
		.field family string AttributeName
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Contexts.ContextAttribute::get_Name()
		}
	}
	.class public ContextProperty
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Property()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Contexts.ContextProperty::get_Name()
		}
		.property instance object Property()
		{
			.get instance object System.Runtime.Remoting.Contexts.ContextProperty::get_Property()
		}
	}
	.class public sealed CrossContextDelegate
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public interface abstract IContextAttribute
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool IsContextOK(class System.Runtime.Remoting.Contexts.Context ctx, class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetPropertiesForNewContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContextProperty
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsNewContextOK(class System.Runtime.Remoting.Contexts.Context newCtx)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void Freeze(class System.Runtime.Remoting.Contexts.Context newContext)
		{
			.permissionset linkcheck = (00)
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Contexts.IContextProperty::get_Name()
		}
	}
	.class public interface abstract IContextPropertyActivator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool IsOKToActivate(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void CollectFromClientContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance bool DeliverClientContextToServerContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void CollectFromServerContext(class System.Runtime.Remoting.Activation.IConstructionReturnMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance bool DeliverServerContextToClientContext(class System.Runtime.Remoting.Activation.IConstructionReturnMessage msg)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContributeClientContextSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContributeDynamicSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink()
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContributeEnvoySink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink(class System.MarshalByRefObject obj, class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContributeObjectSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink(class System.MarshalByRefObject obj, class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IContributeServerContextSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IDynamicMessageSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void ProcessMessageStart(class System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void ProcessMessageFinish(class System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IDynamicProperty
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
			.permissionset linkcheck = (00)
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Contexts.IDynamicProperty::get_Name()
		}
	}
	.class public serializable SynchronizationAttribute
		extends System.Runtime.Remoting.Contexts.ContextAttribute
		implements System.Runtime.Remoting.Contexts.IContributeServerContextSink, System.Runtime.Remoting.Contexts.IContributeClientContextSink
	{
		.permissionset linkcheck = (00)
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance bool get_Locked()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Locked(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReEntrant()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool reEntrant)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 flag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 flag, bool reEntrant)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsContextOK(class System.Runtime.Remoting.Contexts.Context ctx, class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance void GetPropertiesForNewContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink(class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink(class System.Runtime.Remoting.Messaging.IMessageSink nextSink)
		{
			ret
		}
		.field static public literal int32 'NOT_SUPPORTED' = int32(0x00000001)
		.field static public literal int32 'REQUIRED' = int32(0x00000004)
		.field static public literal int32 'REQUIRES_NEW' = int32(0x00000008)
		.field static public literal int32 'SUPPORTED' = int32(0x00000002)
		.property instance bool IsReEntrant()
		{
			.get instance bool System.Runtime.Remoting.Contexts.SynchronizationAttribute::get_IsReEntrant()
		}
		.property instance bool Locked()
		{
			.get instance bool System.Runtime.Remoting.Contexts.SynchronizationAttribute::get_Locked()
			.set instance void System.Runtime.Remoting.Contexts.SynchronizationAttribute::set_Locked(bool)
		}
	}
}
.namespace System.Runtime.Remoting.Lifetime
{
	.class public ClientSponsor
		extends System.MarshalByRefObject
		implements System.Runtime.Remoting.Lifetime.ISponsor
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.TimeSpan renewalTime)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.TimeSpan get_RenewalTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_RenewalTime(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public hidebysig 
			instance bool Register(class System.MarshalByRefObject obj)
		{
			ret
		}
		.method public hidebysig 
			instance void Unregister(class System.MarshalByRefObject obj)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.TimeSpan Renewal(class System.Runtime.Remoting.Lifetime.ILease lease)
		{
			ret
		}
		.method public hidebysig 
			instance void Close()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object InitializeLifetimeService()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.property instance valuetype System.TimeSpan RenewalTime()
		{
			.get instance valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.ClientSponsor::get_RenewalTime()
			.set instance void System.Runtime.Remoting.Lifetime.ClientSponsor::set_RenewalTime(valuetype System.TimeSpan)
		}
	}
	.class public interface abstract ILease
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Register(class System.Runtime.Remoting.Lifetime.ISponsor obj, valuetype System.TimeSpan renewalTime)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void Register(class System.Runtime.Remoting.Lifetime.ISponsor obj)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void Unregister(class System.Runtime.Remoting.Lifetime.ISponsor obj)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.TimeSpan Renew(valuetype System.TimeSpan renewalTime)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.TimeSpan get_RenewOnCallTime()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_RenewOnCallTime(valuetype System.TimeSpan 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.TimeSpan get_SponsorshipTimeout()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_SponsorshipTimeout(valuetype System.TimeSpan 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.TimeSpan get_InitialLeaseTime()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_InitialLeaseTime(valuetype System.TimeSpan 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.TimeSpan get_CurrentLeaseTime()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Runtime.Remoting.Lifetime.LeaseState get_CurrentState()
		{
			.permissionset linkcheck = (00)
		}
		.property instance valuetype System.TimeSpan CurrentLeaseTime()
		{
			.get instance valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.ILease::get_CurrentLeaseTime()
		}
		.property instance valuetype System.Runtime.Remoting.Lifetime.LeaseState CurrentState()
		{
			.get instance valuetype System.Runtime.Remoting.Lifetime.LeaseState System.Runtime.Remoting.Lifetime.ILease::get_CurrentState()
		}
		.property instance valuetype System.TimeSpan InitialLeaseTime()
		{
			.get instance valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.ILease::get_InitialLeaseTime()
			.set instance void System.Runtime.Remoting.Lifetime.ILease::set_InitialLeaseTime(valuetype System.TimeSpan)
		}
		.property instance valuetype System.TimeSpan RenewOnCallTime()
		{
			.get instance valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.ILease::get_RenewOnCallTime()
			.set instance void System.Runtime.Remoting.Lifetime.ILease::set_RenewOnCallTime(valuetype System.TimeSpan)
		}
		.property instance valuetype System.TimeSpan SponsorshipTimeout()
		{
			.get instance valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.ILease::get_SponsorshipTimeout()
			.set instance void System.Runtime.Remoting.Lifetime.ILease::set_SponsorshipTimeout(valuetype System.TimeSpan)
		}
	}
	.class public interface abstract ISponsor
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.TimeSpan Renewal(class System.Runtime.Remoting.Lifetime.ILease lease)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public sealed serializable LeaseState
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Lifetime.LeaseState Active = int32(0x00000002)
		.field static public literal valuetype System.Runtime.Remoting.Lifetime.LeaseState Expired = int32(0x00000004)
		.field static public literal valuetype System.Runtime.Remoting.Lifetime.LeaseState Initial = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Remoting.Lifetime.LeaseState Null = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.Lifetime.LeaseState Renewing = int32(0x00000003)
	}
	.class public sealed LifetimeServices
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			valuetype System.TimeSpan get_LeaseTime()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_LeaseTime(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan get_RenewOnCallTime()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_RenewOnCallTime(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan get_SponsorshipTimeout()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_SponsorshipTimeout(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			valuetype System.TimeSpan get_LeaseManagerPollTime()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_LeaseManagerPollTime(valuetype System.TimeSpan 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property valuetype System.TimeSpan LeaseManagerPollTime()
		{
			.get valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.LifetimeServices::get_LeaseManagerPollTime()
			.set void System.Runtime.Remoting.Lifetime.LifetimeServices::set_LeaseManagerPollTime(valuetype System.TimeSpan)
		}
		.property valuetype System.TimeSpan LeaseTime()
		{
			.get valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.LifetimeServices::get_LeaseTime()
			.set void System.Runtime.Remoting.Lifetime.LifetimeServices::set_LeaseTime(valuetype System.TimeSpan)
		}
		.property valuetype System.TimeSpan RenewOnCallTime()
		{
			.get valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.LifetimeServices::get_RenewOnCallTime()
			.set void System.Runtime.Remoting.Lifetime.LifetimeServices::set_RenewOnCallTime(valuetype System.TimeSpan)
		}
		.property valuetype System.TimeSpan SponsorshipTimeout()
		{
			.get valuetype System.TimeSpan System.Runtime.Remoting.Lifetime.LifetimeServices::get_SponsorshipTimeout()
			.set void System.Runtime.Remoting.Lifetime.LifetimeServices::set_SponsorshipTimeout(valuetype System.TimeSpan)
		}
	}
}
.namespace System.Runtime.Remoting.Messaging
{
	.class public AsyncResult
		extends System.Object
		implements System.IAsyncResult, System.Runtime.Remoting.Messaging.IMessageSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsCompleted()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_AsyncDelegate()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_AsyncState()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_CompletedSynchronously()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_EndInvokeCalled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_EndInvokeCalled(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Threading.WaitHandle get_AsyncWaitHandle()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetMessageCtrl(class System.Runtime.Remoting.Messaging.IMessageCtrl mc)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.IMessageSink get_NextSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Messaging.IMessage GetReplyMessage()
		{
			ret
		}
		.property instance object AsyncDelegate()
		{
			.get instance object System.Runtime.Remoting.Messaging.AsyncResult::get_AsyncDelegate()
		}
		.property instance object AsyncState()
		{
			.get instance object System.Runtime.Remoting.Messaging.AsyncResult::get_AsyncState()
		}
		.property instance class System.Threading.WaitHandle AsyncWaitHandle()
		{
			.get instance class System.Threading.WaitHandle System.Runtime.Remoting.Messaging.AsyncResult::get_AsyncWaitHandle()
		}
		.property instance bool CompletedSynchronously()
		{
			.get instance bool System.Runtime.Remoting.Messaging.AsyncResult::get_CompletedSynchronously()
		}
		.property instance bool EndInvokeCalled()
		{
			.get instance bool System.Runtime.Remoting.Messaging.AsyncResult::get_EndInvokeCalled()
			.set instance void System.Runtime.Remoting.Messaging.AsyncResult::set_EndInvokeCalled(bool)
		}
		.property instance bool IsCompleted()
		{
			.get instance bool System.Runtime.Remoting.Messaging.AsyncResult::get_IsCompleted()
		}
		.property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink()
		{
			.get instance class System.Runtime.Remoting.Messaging.IMessageSink System.Runtime.Remoting.Messaging.AsyncResult::get_NextSink()
		}
	}
	.class public sealed serializable CallContext
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void FreeNamedDataSlot(string name)
		{
			ret
		}
		.method public static hidebysig 
			object LogicalGetData(string name)
		{
			ret
		}
		.method public static hidebysig specialname 
			object get_HostContext()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_HostContext(object 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetData(string name)
		{
			ret
		}
		.method public static hidebysig 
			void SetData(string name, object data)
		{
			ret
		}
		.method public static hidebysig 
			void LogicalSetData(string name, object data)
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Messaging.Header[] GetHeaders()
		{
			ret
		}
		.method public static hidebysig 
			void SetHeaders(class System.Runtime.Remoting.Messaging.Header[] headers)
		{
			ret
		}
		.property object HostContext()
		{
			.get object System.Runtime.Remoting.Messaging.CallContext::get_HostContext()
			.set void System.Runtime.Remoting.Messaging.CallContext::set_HostContext(object)
		}
	}
	.class public serializable ConstructionCall
		extends System.Runtime.Remoting.Messaging.MethodCall
		implements System.Runtime.Remoting.Activation.IConstructionCallMessage, System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.permissionset linkcheck = (00)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.Header[] headers)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMessage m)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_CallSiteActivationAttributes()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Type get_ActivationType()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ActivationTypeName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Collections.IList get_ContextProperties()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Activation.IActivator get_Activator()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Activator(class System.Runtime.Remoting.Activation.IActivator 'value')
		{
			ret
		}
		.property instance class System.Type ActivationType()
		{
			.get instance class System.Type System.Runtime.Remoting.Messaging.ConstructionCall::get_ActivationType()
		}
		.property instance string ActivationTypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.ConstructionCall::get_ActivationTypeName()
		}
		.property instance class System.Runtime.Remoting.Activation.IActivator Activator()
		{
			.get instance class System.Runtime.Remoting.Activation.IActivator System.Runtime.Remoting.Messaging.ConstructionCall::get_Activator()
			.set instance void System.Runtime.Remoting.Messaging.ConstructionCall::set_Activator(class System.Runtime.Remoting.Activation.IActivator)
		}
		.property instance object[] CallSiteActivationAttributes()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.ConstructionCall::get_CallSiteActivationAttributes()
		}
		.property instance class System.Collections.IList ContextProperties()
		{
			.get instance class System.Collections.IList System.Runtime.Remoting.Messaging.ConstructionCall::get_ContextProperties()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.ConstructionCall::get_Properties()
		}
	}
	.class public serializable ConstructionResponse
		extends System.Runtime.Remoting.Messaging.MethodResponse
		implements System.Runtime.Remoting.Activation.IConstructionReturnMessage, System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.permissionset linkcheck = (00)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.Header[] h, class System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.ConstructionResponse::get_Properties()
		}
	}
	.class public serializable Header
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string _Name, object _Value)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string _Name, object _Value, bool _MustUnderstand)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace)
		{
			ret
		}
		.field public string HeaderNamespace
		.field public bool MustUnderstand
		.field public string Name
		.field public object Value
	}
	.class public sealed HeaderHandler
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance object Invoke(class System.Runtime.Remoting.Messaging.Header[] headers)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.Runtime.Remoting.Messaging.Header[] headers, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance object EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public interface abstract ILogicalThreadAffinative
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
	}
	.class public interface abstract IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.IMessage::get_Properties()
		}
	}
	.class public interface abstract IMessageCtrl
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Cancel(int32 msToCancel)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract IMessageSink
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Messaging.IMessageSink get_NextSink()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Runtime.Remoting.Messaging.IMessageSink NextSink()
		{
			.get instance class System.Runtime.Remoting.Messaging.IMessageSink System.Runtime.Remoting.Messaging.IMessageSink::get_NextSink()
		}
	}
	.class public interface abstract IMethodCallMessage
		implements System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_InArgCount()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance string GetInArgName(int32 index)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetInArg(int32 argNum)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_InArgs()
		{
			.permissionset linkcheck = (00)
		}
		.property instance int32 InArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.IMethodCallMessage::get_InArgCount()
		}
		.property instance object[] InArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.IMethodCallMessage::get_InArgs()
		}
	}
	.class public interface abstract IMethodMessage
		implements System.Runtime.Remoting.Messaging.IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Uri()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_MethodName()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_TypeName()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_MethodSignature()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_ArgCount()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance string GetArgName(int32 index)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetArg(int32 argNum)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_Args()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_HasVarArgs()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			.permissionset linkcheck = (00)
		}
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.IMethodMessage::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.IMethodMessage::get_Args()
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.IMethodMessage::get_HasVarArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.IMethodMessage::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.IMethodMessage::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.IMethodMessage::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.IMethodMessage::get_MethodSignature()
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.IMethodMessage::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.IMethodMessage::get_Uri()
		}
	}
	.class public interface abstract IMethodReturnMessage
		implements System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_OutArgCount()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance string GetOutArgName(int32 index)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object GetOutArg(int32 argNum)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_OutArgs()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Exception get_Exception()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_ReturnValue()
		{
			.permissionset linkcheck = (00)
		}
		.property instance class System.Exception Exception()
		{
			.get instance class System.Exception System.Runtime.Remoting.Messaging.IMethodReturnMessage::get_Exception()
		}
		.property instance int32 OutArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.IMethodReturnMessage::get_OutArgCount()
		}
		.property instance object[] OutArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.IMethodReturnMessage::get_OutArgs()
		}
		.property instance object ReturnValue()
		{
			.get instance object System.Runtime.Remoting.Messaging.IMethodReturnMessage::get_ReturnValue()
		}
	}
	.class public interface abstract IRemotingFormatter
		implements System.Runtime.Serialization.IFormatter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Deserialize(class 'System.IO.Stream' serializationStream, class System.Runtime.Remoting.Messaging.HeaderHandler 'handler')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Serialize(class 'System.IO.Stream' serializationStream, object graph, class System.Runtime.Remoting.Messaging.Header[] headers)
		{
		}
	}
	.class public InternalMessageWrapper
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			ret
		}
		.field family class System.Runtime.Remoting.Messaging.IMessage WrappedMessage
	}
	.class public sealed serializable LogicalCallContext
		extends System.Object
		implements System.Runtime.Serialization.ISerializable, System.ICloneable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_HasInfo()
		{
			ret
		}
		.method public hidebysig 
			instance void FreeNamedDataSlot(string name)
		{
			ret
		}
		.method public hidebysig 
			instance object GetData(string name)
		{
			ret
		}
		.method public hidebysig 
			instance void SetData(string name, object data)
		{
			ret
		}
		.property instance bool HasInfo()
		{
			.get instance bool System.Runtime.Remoting.Messaging.LogicalCallContext::get_HasInfo()
		}
	}
	.class public sealed MessageSurrogateFilter
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool Invoke(string key, object 'value')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(string key, object 'value', class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public serializable MethodCall
		extends System.Object
		implements System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.Header[] h1)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RootSetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext ctx)
		{
			ret
		}
		.method public hidebysig 
			instance void ResolveMethod()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Init()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_InArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetInArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetInArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_InArgs()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_MethodSignature()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_Uri()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Uri(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_HasVarArgs()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object HeaderHandler(class System.Runtime.Remoting.Messaging.Header[] h)
		{
			ret
		}
		.field family class System.Collections.IDictionary ExternalProperties
		.field family class System.Collections.IDictionary InternalProperties
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodCall::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodCall::get_Args()
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.MethodCall::get_HasVarArgs()
		}
		.property instance int32 InArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodCall::get_InArgCount()
		}
		.property instance object[] InArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodCall::get_InArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.MethodCall::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.MethodCall::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCall::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodCall::get_MethodSignature()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.MethodCall::get_Properties()
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCall::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCall::get_Uri()
			.set instance void System.Runtime.Remoting.Messaging.MethodCall::set_Uri(string)
		}
	}
	.class public MethodCallMessageWrapper
		extends System.Runtime.Remoting.Messaging.InternalMessageWrapper
		implements System.Runtime.Remoting.Messaging.IMethodCallMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMethodCallMessage msg)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Uri()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Uri(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_MethodSignature()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ArgCount()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetArgName(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetArg(int32 argNum)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Args(object[] 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_HasVarArgs()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_InArgCount()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetInArg(int32 argNum)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetInArgName(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_InArgs()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_Args()
			.set instance void System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::set_Args(object[])
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_HasVarArgs()
		}
		.property instance int32 InArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_InArgCount()
		}
		.property instance object[] InArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_InArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_MethodSignature()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_Properties()
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::get_Uri()
			.set instance void System.Runtime.Remoting.Messaging.MethodCallMessageWrapper::set_Uri(string)
		}
	}
	.class public serializable MethodResponse
		extends System.Object
		implements System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage, System.Runtime.Serialization.ISerializable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.Header[] h1, class System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object HeaderHandler(class System.Runtime.Remoting.Messaging.Header[] h)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void RootSetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext ctx)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_Uri()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Uri(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_MethodSignature()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_HasVarArgs()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_OutArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetOutArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetOutArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_OutArgs()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Exception get_Exception()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_ReturnValue()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			ret
		}
		.field family class System.Collections.IDictionary ExternalProperties
		.field family class System.Collections.IDictionary InternalProperties
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodResponse::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodResponse::get_Args()
		}
		.property instance class System.Exception Exception()
		{
			.get instance class System.Exception System.Runtime.Remoting.Messaging.MethodResponse::get_Exception()
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.MethodResponse::get_HasVarArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.MethodResponse::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.MethodResponse::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodResponse::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodResponse::get_MethodSignature()
		}
		.property instance int32 OutArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodResponse::get_OutArgCount()
		}
		.property instance object[] OutArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodResponse::get_OutArgs()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.MethodResponse::get_Properties()
		}
		.property instance object ReturnValue()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodResponse::get_ReturnValue()
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodResponse::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodResponse::get_Uri()
			.set instance void System.Runtime.Remoting.Messaging.MethodResponse::set_Uri(string)
		}
	}
	.class public MethodReturnMessageWrapper
		extends System.Runtime.Remoting.Messaging.InternalMessageWrapper
		implements System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Remoting.Messaging.IMethodReturnMessage msg)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_Uri()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Uri(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_MethodSignature()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ArgCount()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetArgName(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetArg(int32 argNum)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Args(object[] 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_HasVarArgs()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_OutArgCount()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetOutArg(int32 argNum)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetOutArgName(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_OutArgs()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Exception get_Exception()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Exception(class System.Exception 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_ReturnValue()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ReturnValue(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_Args()
			.set instance void System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::set_Args(object[])
		}
		.property instance class System.Exception Exception()
		{
			.get instance class System.Exception System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_Exception()
			.set instance void System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::set_Exception(class System.Exception)
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_HasVarArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_MethodSignature()
		}
		.property instance int32 OutArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_OutArgCount()
		}
		.property instance object[] OutArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_OutArgs()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_Properties()
		}
		.property instance object ReturnValue()
		{
			.get instance object System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_ReturnValue()
			.set instance void System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::set_ReturnValue(object)
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::get_Uri()
			.set instance void System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper::set_Uri(string)
		}
	}
	.class public OneWayAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public RemotingSurrogateSelector
		extends System.Object
		implements System.Runtime.Serialization.ISurrogateSelector
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Filter(class System.Runtime.Remoting.Messaging.MessageSurrogateFilter 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Runtime.Remoting.Messaging.MessageSurrogateFilter get_Filter()
		{
			ret
		}
		.method public hidebysig 
			instance void SetRootObject(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance object GetRootObject()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ChainSelector(class System.Runtime.Serialization.ISurrogateSelector selector)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context, [out] class System.Runtime.Serialization.ISurrogateSelector& ssout)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Serialization.ISurrogateSelector GetNextSelector()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void UseSoapFormat()
		{
			ret
		}
		.property instance class System.Runtime.Remoting.Messaging.MessageSurrogateFilter Filter()
		{
			.get instance class System.Runtime.Remoting.Messaging.MessageSurrogateFilter System.Runtime.Remoting.Messaging.RemotingSurrogateSelector::get_Filter()
			.set instance void System.Runtime.Remoting.Messaging.RemotingSurrogateSelector::set_Filter(class System.Runtime.Remoting.Messaging.MessageSurrogateFilter)
		}
	}
	.class public ReturnMessage
		extends System.Object
		implements System.Runtime.Remoting.Messaging.IMethodReturnMessage, System.Runtime.Remoting.Messaging.IMethodMessage, System.Runtime.Remoting.Messaging.IMessage
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'ret', object[] outArgs, int32 outArgsCount, class System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, class System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Exception e, class System.Runtime.Remoting.Messaging.IMethodCallMessage mcm)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_Uri()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Uri(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_MethodSignature()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Reflection.MethodBase get_MethodBase()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_HasVarArgs()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_OutArgCount()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object GetOutArg(int32 argNum)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetOutArgName(int32 index)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_OutArgs()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Exception get_Exception()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_ReturnValue()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.LogicalCallContext get_LogicalCallContext()
		{
			ret
		}
		.property instance int32 ArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.ReturnMessage::get_ArgCount()
		}
		.property instance object[] Args()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.ReturnMessage::get_Args()
		}
		.property instance class System.Exception Exception()
		{
			.get instance class System.Exception System.Runtime.Remoting.Messaging.ReturnMessage::get_Exception()
		}
		.property instance bool HasVarArgs()
		{
			.get instance bool System.Runtime.Remoting.Messaging.ReturnMessage::get_HasVarArgs()
		}
		.property instance class System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext()
		{
			.get instance class System.Runtime.Remoting.Messaging.LogicalCallContext System.Runtime.Remoting.Messaging.ReturnMessage::get_LogicalCallContext()
		}
		.property instance class System.Reflection.MethodBase MethodBase()
		{
			.get instance class System.Reflection.MethodBase System.Runtime.Remoting.Messaging.ReturnMessage::get_MethodBase()
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Remoting.Messaging.ReturnMessage::get_MethodName()
		}
		.property instance object MethodSignature()
		{
			.get instance object System.Runtime.Remoting.Messaging.ReturnMessage::get_MethodSignature()
		}
		.property instance int32 OutArgCount()
		{
			.get instance int32 System.Runtime.Remoting.Messaging.ReturnMessage::get_OutArgCount()
		}
		.property instance object[] OutArgs()
		{
			.get instance object[] System.Runtime.Remoting.Messaging.ReturnMessage::get_OutArgs()
		}
		.property instance class System.Collections.IDictionary Properties()
		{
			.get instance class System.Collections.IDictionary System.Runtime.Remoting.Messaging.ReturnMessage::get_Properties()
		}
		.property instance object ReturnValue()
		{
			.get instance object System.Runtime.Remoting.Messaging.ReturnMessage::get_ReturnValue()
		}
		.property instance string TypeName()
		{
			.get instance string System.Runtime.Remoting.Messaging.ReturnMessage::get_TypeName()
		}
		.property instance string Uri()
		{
			.get instance string System.Runtime.Remoting.Messaging.ReturnMessage::get_Uri()
			.set instance void System.Runtime.Remoting.Messaging.ReturnMessage::set_Uri(string)
		}
	}
}
.namespace System.Runtime.Remoting.Metadata
{
	.class public SoapAttribute
		extends System.Attribute
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot specialname 
			instance string get_XmlNamespace()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_XmlNamespace(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_UseAttribute()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_UseAttribute(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Embedded()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Embedded(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field family string ProtXmlNamespace
		.field family object ReflectInfo
		.property instance bool Embedded()
		{
			.get instance bool System.Runtime.Remoting.Metadata.SoapAttribute::get_Embedded()
			.set instance void System.Runtime.Remoting.Metadata.SoapAttribute::set_Embedded(bool)
		}
		.property instance bool UseAttribute()
		{
			.get instance bool System.Runtime.Remoting.Metadata.SoapAttribute::get_UseAttribute()
			.set instance void System.Runtime.Remoting.Metadata.SoapAttribute::set_UseAttribute(bool)
		}
		.property instance string XmlNamespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapAttribute::get_XmlNamespace()
			.set instance void System.Runtime.Remoting.Metadata.SoapAttribute::set_XmlNamespace(string)
		}
	}
	.class public sealed SoapFieldAttribute
		extends System.Runtime.Remoting.Metadata.SoapAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance bool IsInteropXmlElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XmlElementName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XmlElementName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Order()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Order(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Order()
		{
			.get instance int32 System.Runtime.Remoting.Metadata.SoapFieldAttribute::get_Order()
			.set instance void System.Runtime.Remoting.Metadata.SoapFieldAttribute::set_Order(int32)
		}
		.property instance string XmlElementName()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapFieldAttribute::get_XmlElementName()
			.set instance void System.Runtime.Remoting.Metadata.SoapFieldAttribute::set_XmlElementName(string)
		}
	}
	.class public sealed SoapMethodAttribute
		extends System.Runtime.Remoting.Metadata.SoapAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance string get_SoapAction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SoapAction(string 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_UseAttribute()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_UseAttribute(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_XmlNamespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_XmlNamespace(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ResponseXmlElementName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ResponseXmlElementName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ResponseXmlNamespace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ResponseXmlNamespace(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ReturnXmlElementName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ReturnXmlElementName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance string ResponseXmlElementName()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_ResponseXmlElementName()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_ResponseXmlElementName(string)
		}
		.property instance string ResponseXmlNamespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_ResponseXmlNamespace()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_ResponseXmlNamespace(string)
		}
		.property instance string ReturnXmlElementName()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_ReturnXmlElementName()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_ReturnXmlElementName(string)
		}
		.property instance string SoapAction()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_SoapAction()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_SoapAction(string)
		}
		.property instance bool UseAttribute()
		{
			.get instance bool System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_UseAttribute()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_UseAttribute(bool)
		}
		.property instance string XmlNamespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapMethodAttribute::get_XmlNamespace()
			.set instance void System.Runtime.Remoting.Metadata.SoapMethodAttribute::set_XmlNamespace(string)
		}
	}
	.class public sealed serializable SoapOption
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption AlwaysIncludeTypes = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption EmbedAll = int32(0x00000004)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption None = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption Option1 = int32(0x00000008)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption Option2 = int32(0x00000010)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.SoapOption XsdString = int32(0x00000002)
	}
	.class public sealed SoapParameterAttribute
		extends System.Runtime.Remoting.Metadata.SoapAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 08 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed SoapTypeAttribute
		extends System.Runtime.Remoting.Metadata.SoapAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 1C 04 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Remoting.Metadata.SoapOption get_SoapOptions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SoapOptions(valuetype System.Runtime.Remoting.Metadata.SoapOption 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XmlElementName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XmlElementName(string 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_XmlNamespace()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_XmlNamespace(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XmlTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XmlTypeName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XmlTypeNamespace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XmlTypeNamespace(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption get_XmlFieldOrder()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XmlFieldOrder(valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_UseAttribute()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_UseAttribute(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance valuetype System.Runtime.Remoting.Metadata.SoapOption SoapOptions()
		{
			.get instance valuetype System.Runtime.Remoting.Metadata.SoapOption System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_SoapOptions()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_SoapOptions(valuetype System.Runtime.Remoting.Metadata.SoapOption)
		}
		.property instance bool UseAttribute()
		{
			.get instance bool System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_UseAttribute()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_UseAttribute(bool)
		}
		.property instance string XmlElementName()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_XmlElementName()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_XmlElementName(string)
		}
		.property instance valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption XmlFieldOrder()
		{
			.get instance valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_XmlFieldOrder()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_XmlFieldOrder(valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption)
		}
		.property instance string XmlNamespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_XmlNamespace()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_XmlNamespace(string)
		}
		.property instance string XmlTypeName()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_XmlTypeName()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_XmlTypeName(string)
		}
		.property instance string XmlTypeNamespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.SoapTypeAttribute::get_XmlTypeNamespace()
			.set instance void System.Runtime.Remoting.Metadata.SoapTypeAttribute::set_XmlTypeNamespace(string)
		}
	}
	.class public sealed serializable XmlFieldOrderOption
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption All = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption Choice = int32(0x00000002)
		.field static public literal valuetype System.Runtime.Remoting.Metadata.XmlFieldOrderOption Sequence = int32(0x00000001)
	}
}
.namespace System.Runtime.Remoting.Metadata.W3cXsd2001
{
	.class public interface abstract ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance string GetXsdType()
		{
		}
	}
	.class public sealed serializable SoapAnyUri
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri::get_XsdType()
		}
	}
	.class public sealed serializable SoapBase64Binary
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8[] get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(uint8[] 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary Parse(string 'value')
		{
			ret
		}
		.property instance uint8[] Value()
		{
			.get instance uint8[] System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary::set_Value(uint8[])
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary::get_XsdType()
		}
	}
	.class public sealed serializable SoapDate
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value', int32 sign)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Sign()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Sign(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate Parse(string 'value')
		{
			ret
		}
		.property instance int32 Sign()
		{
			.get instance int32 System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate::get_Sign()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate::set_Sign(int32)
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate::get_XsdType()
		}
	}
	.class public sealed SoapDateTime
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.DateTime Parse(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime::get_XsdType()
		}
	}
	.class public sealed serializable SoapDay
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay::get_XsdType()
		}
	}
	.class public sealed SoapDuration
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public static hidebysig 
			string ToString(valuetype System.TimeSpan timeSpan)
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.TimeSpan Parse(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration::get_XsdType()
		}
	}
	.class public sealed serializable SoapEntities
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities::get_XsdType()
		}
	}
	.class public sealed serializable SoapEntity
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity::get_XsdType()
		}
	}
	.class public sealed serializable SoapHexBinary
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(uint8[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8[] get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(uint8[] 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary Parse(string 'value')
		{
			ret
		}
		.property instance uint8[] Value()
		{
			.get instance uint8[] System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary::set_Value(uint8[])
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary::get_XsdType()
		}
	}
	.class public sealed serializable SoapId
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId::get_XsdType()
		}
	}
	.class public sealed serializable SoapIdref
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref::get_XsdType()
		}
	}
	.class public sealed serializable SoapIdrefs
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs::get_XsdType()
		}
	}
	.class public sealed serializable SoapInteger
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger::set_Value(valuetype System.Decimal)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger::get_XsdType()
		}
	}
	.class public sealed serializable SoapLanguage
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage::get_XsdType()
		}
	}
	.class public sealed serializable SoapMonth
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth::get_XsdType()
		}
	}
	.class public sealed serializable SoapMonthDay
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay::get_XsdType()
		}
	}
	.class public sealed serializable SoapName
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName::get_XsdType()
		}
	}
	.class public sealed serializable SoapNcName
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName::get_XsdType()
		}
	}
	.class public sealed serializable SoapNegativeInteger
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger::set_Value(valuetype System.Decimal)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger::get_XsdType()
		}
	}
	.class public sealed serializable SoapNmtoken
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken::get_XsdType()
		}
	}
	.class public sealed serializable SoapNmtokens
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens::get_XsdType()
		}
	}
	.class public sealed serializable SoapNonNegativeInteger
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger::set_Value(valuetype System.Decimal)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger::get_XsdType()
		}
	}
	.class public sealed serializable SoapNonPositiveInteger
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger::set_Value(valuetype System.Decimal)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger::get_XsdType()
		}
	}
	.class public sealed serializable SoapNormalizedString
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString::get_XsdType()
		}
	}
	.class public sealed serializable SoapNotation
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation::get_XsdType()
		}
	}
	.class public sealed serializable SoapPositiveInteger
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Decimal get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.Decimal Value()
		{
			.get instance valuetype System.Decimal System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger::set_Value(valuetype System.Decimal)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger::get_XsdType()
		}
	}
	.class public sealed serializable SoapQName
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string key, string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string key, string name, string namespaceValue)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Namespace(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Key()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Key(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName Parse(string 'value')
		{
			ret
		}
		.property instance string Key()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::get_Key()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::set_Key(string)
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::get_Name()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::set_Name(string)
		}
		.property instance string Namespace()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::get_Namespace()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::set_Namespace(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName::get_XsdType()
		}
	}
	.class public sealed serializable SoapTime
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime Parse(string 'value')
		{
			ret
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime::get_XsdType()
		}
	}
	.class public sealed serializable SoapToken
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken Parse(string 'value')
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken::set_Value(string)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken::get_XsdType()
		}
	}
	.class public sealed serializable SoapYear
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value', int32 sign)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Sign()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Sign(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear Parse(string 'value')
		{
			ret
		}
		.property instance int32 Sign()
		{
			.get instance int32 System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear::get_Sign()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear::set_Sign(int32)
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear::get_XsdType()
		}
	}
	.class public sealed serializable SoapYearMonth
		extends System.Object
		implements System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig specialname 
			string get_XsdType()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string GetXsdType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.DateTime 'value', int32 sign)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.DateTime get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Sign()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Sign(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth Parse(string 'value')
		{
			ret
		}
		.property instance int32 Sign()
		{
			.get instance int32 System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth::get_Sign()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth::set_Sign(int32)
		}
		.property instance valuetype System.DateTime Value()
		{
			.get instance valuetype System.DateTime System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth::get_Value()
			.set instance void System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth::set_Value(valuetype System.DateTime)
		}
		.property string XsdType()
		{
			.get string System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth::get_XsdType()
		}
	}
}
.namespace System.Runtime.Remoting.Proxies
{
	.class public ProxyAttribute
		extends System.Attribute
		implements System.Runtime.Remoting.Contexts.IContextAttribute
	{
		.permissionset linkcheck = (00)
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 04 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 01)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.MarshalByRefObject CreateInstance(class System.Type serverType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.Proxies.RealProxy CreateProxy(class System.Runtime.Remoting.ObjRef objRef, class System.Type serverType, object serverObject, class System.Runtime.Remoting.Contexts.Context serverContext)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsContextOK(class System.Runtime.Remoting.Contexts.Context ctx, class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetPropertiesForNewContext(class System.Runtime.Remoting.Activation.IConstructionCallMessage msg)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
	}
	.class public abstract RealProxy
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(class System.Type classToProxy)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Type classToProxy, native int stub, object stubData)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance class System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject(class System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
		.method family hidebysig 
			instance class System.MarshalByRefObject GetUnwrappedServer()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig 
			instance class System.MarshalByRefObject DetachServer()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method family hidebysig 
			instance void AttachServer(class System.MarshalByRefObject s)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp, object stubData)
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			object GetStubData(class System.Runtime.Remoting.Proxies.RealProxy rp)
			internalcall 
		{
		}
		.method public hidebysig 
			instance class System.Type GetProxiedType()
			internalcall 
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Remoting.Messaging.IMessage Invoke(class System.Runtime.Remoting.Messaging.IMessage msg)
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Remoting.ObjRef CreateObjRef(class System.Type requestedType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetTransparentProxy()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
}
.namespace System.Runtime.Remoting.Services
{
	.class public interface abstract ITrackingHandler
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void MarshaledObject(object obj, class System.Runtime.Remoting.ObjRef 'or')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void UnmarshaledObject(object obj, class System.Runtime.Remoting.ObjRef 'or')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance void DisconnectedObject(object obj)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public TrackingServices
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void RegisterTrackingHandler(class System.Runtime.Remoting.Services.ITrackingHandler 'handler')
		{
			ret
		}
		.method public static hidebysig 
			void UnregisterTrackingHandler(class System.Runtime.Remoting.Services.ITrackingHandler 'handler')
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Runtime.Remoting.Services.ITrackingHandler[] get_RegisteredHandlers()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class System.Runtime.Remoting.Services.ITrackingHandler[] RegisteredHandlers()
		{
			.get class System.Runtime.Remoting.Services.ITrackingHandler[] System.Runtime.Remoting.Services.TrackingServices::get_RegisteredHandlers()
		}
	}
}
.namespace System.Runtime.Serialization
{
	.class public abstract serializable Formatter
		extends System.Object
		implements System.Runtime.Serialization.IFormatter
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object Deserialize(class 'System.IO.Stream' serializationStream)
		{
		}
		.method family virtual hidebysig newslot 
			instance object GetNext([out] int64& objID)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance int64 Schedule(object obj)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Serialize(class 'System.IO.Stream' serializationStream, object graph)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteArray(object obj, string name, class System.Type memberType)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteBoolean(bool val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteByte(uint8 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteChar(char val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteDateTime(valuetype System.DateTime val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteDecimal(valuetype System.Decimal val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteDouble(float64 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteInt16(int16 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteInt32(int32 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteInt64(int64 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteObjectRef(object obj, string name, class System.Type memberType)
		{
		}
		.method family virtual hidebysig newslot 
			instance void WriteMember(string memberName, object data)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteSByte(int8 val, string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteSingle(float32 val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteTimeSpan(valuetype System.TimeSpan val, string name)
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteUInt16(uint16 val, string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteUInt32(uint32 val, string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteUInt64(uint64 val, string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method family virtual hidebysig newslot abstract 
			instance void WriteValueType(object obj, string name, class System.Type memberType)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Serialization.SerializationBinder get_Binder()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Binder(class System.Runtime.Serialization.SerializationBinder 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Runtime.Serialization.StreamingContext get_Context()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Context(valuetype System.Runtime.Serialization.StreamingContext 'value')
		{
		}
		.field family class System.Runtime.Serialization.ObjectIDGenerator m_idGenerator
		.field family class System.Collections.Queue m_objectQueue
		.property instance class System.Runtime.Serialization.SerializationBinder Binder()
		{
			.get instance class System.Runtime.Serialization.SerializationBinder System.Runtime.Serialization.Formatter::get_Binder()
			.set instance void System.Runtime.Serialization.Formatter::set_Binder(class System.Runtime.Serialization.SerializationBinder)
		}
		.property instance valuetype System.Runtime.Serialization.StreamingContext Context()
		{
			.get instance valuetype System.Runtime.Serialization.StreamingContext System.Runtime.Serialization.Formatter::get_Context()
			.set instance void System.Runtime.Serialization.Formatter::set_Context(valuetype System.Runtime.Serialization.StreamingContext)
		}
		.property instance class System.Runtime.Serialization.ISurrogateSelector SurrogateSelector()
		{
			.get instance class System.Runtime.Serialization.ISurrogateSelector System.Runtime.Serialization.Formatter::get_SurrogateSelector()
			.set instance void System.Runtime.Serialization.Formatter::set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector)
		}
	}
	.class public FormatterConverter
		extends System.Object
		implements System.Runtime.Serialization.IFormatterConverter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Convert(object 'value', class System.Type 'type')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Convert(object 'value', valuetype System.TypeCode typeCode)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool ToBoolean(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance char ToChar(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int8 ToSByte(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance uint8 ToByte(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int16 ToInt16(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance uint16 ToUInt16(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int32 ToInt32(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance uint32 ToUInt32(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance int64 ToInt64(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance uint64 ToUInt64(object 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance float32 ToSingle(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance float64 ToDouble(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.Decimal ToDecimal(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype System.DateTime ToDateTime(object 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string ToString(object 'value')
		{
			ret
		}
	}
	.class public sealed FormatterServices
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Reflection.MemberInfo[] GetSerializableMembers(class System.Type 'type')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Reflection.MemberInfo[] GetSerializableMembers(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void CheckTypeSecurity(class System.Type t, valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel securityLevel)
		{
			ret
		}
		.method public static hidebysig 
			object GetUninitializedObject(class System.Type 'type')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetSafeUninitializedObject(class System.Type 'type')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object PopulateObjectMembers(object obj, class System.Reflection.MemberInfo[] members, object[] data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object[] GetObjectData(object obj, class System.Reflection.MemberInfo[] members)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Type GetTypeFromAssembly(class System.Reflection.Assembly assem, string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
	}
	.class public interface abstract IDeserializationCallback
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void OnDeserialization(object sender)
		{
		}
	}
	.class public interface abstract IFormatter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Deserialize(class 'System.IO.Stream' serializationStream)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Serialize(class 'System.IO.Stream' serializationStream, object graph)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Serialization.SerializationBinder get_Binder()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Binder(class System.Runtime.Serialization.SerializationBinder 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype System.Runtime.Serialization.StreamingContext get_Context()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Context(valuetype System.Runtime.Serialization.StreamingContext 'value')
		{
		}
		.property instance class System.Runtime.Serialization.SerializationBinder Binder()
		{
			.get instance class System.Runtime.Serialization.SerializationBinder System.Runtime.Serialization.IFormatter::get_Binder()
			.set instance void System.Runtime.Serialization.IFormatter::set_Binder(class System.Runtime.Serialization.SerializationBinder)
		}
		.property instance valuetype System.Runtime.Serialization.StreamingContext Context()
		{
			.get instance valuetype System.Runtime.Serialization.StreamingContext System.Runtime.Serialization.IFormatter::get_Context()
			.set instance void System.Runtime.Serialization.IFormatter::set_Context(valuetype System.Runtime.Serialization.StreamingContext)
		}
		.property instance class System.Runtime.Serialization.ISurrogateSelector SurrogateSelector()
		{
			.get instance class System.Runtime.Serialization.ISurrogateSelector System.Runtime.Serialization.IFormatter::get_SurrogateSelector()
			.set instance void System.Runtime.Serialization.IFormatter::set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector)
		}
	}
	.class public interface abstract IFormatterConverter
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object Convert(object 'value', class System.Type 'type')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Convert(object 'value', valuetype System.TypeCode typeCode)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool ToBoolean(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance char ToChar(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int8 ToSByte(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8 ToByte(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int16 ToInt16(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint16 ToUInt16(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 ToInt32(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint32 ToUInt32(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int64 ToInt64(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint64 ToUInt64(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance float32 ToSingle(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance float64 ToDouble(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.Decimal ToDecimal(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype System.DateTime ToDateTime(object 'value')
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString(object 'value')
		{
		}
	}
	.class public interface abstract IObjectReference
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance object GetRealObject(valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract ISerializationSurrogate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void GetObjectData(object obj, class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance object SetObjectData(object obj, class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, class System.Runtime.Serialization.ISurrogateSelector selector)
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public interface abstract ISurrogateSelector
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void ChainSelector(class System.Runtime.Serialization.ISurrogateSelector selector)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context, [out] class System.Runtime.Serialization.ISurrogateSelector& selector)
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Runtime.Serialization.ISurrogateSelector GetNextSelector()
		{
			.permissionset linkcheck = (00)
		}
	}
	.class public serializable ObjectIDGenerator
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int64 GetId(object obj, [out] bool& firstTime)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int64 HasId(object obj, [out] bool& firstTime)
		{
			ret
		}
	}
	.class public ObjectManager
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.ISurrogateSelector selector, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object GetObject(int64 objectID)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RegisterObject(object obj, int64 objectID)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void RegisterObject(object obj, int64 objectID, class System.Runtime.Serialization.SerializationInfo info)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void RegisterObject(object obj, int64 objectID, class System.Runtime.Serialization.SerializationInfo info, int64 idOfContainingObj, class System.Reflection.MemberInfo member)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void RegisterObject(object obj, int64 objectID, class System.Runtime.Serialization.SerializationInfo info, int64 idOfContainingObj, class System.Reflection.MemberInfo member, int32[] arrayIndex)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void DoFixups()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RecordFixup(int64 objectToBeFixed, class System.Reflection.MemberInfo member, int64 objectRequired)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RecordDelayedFixup(int64 objectToBeFixed, string memberName, int64 objectRequired)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RecordArrayElementFixup(int64 arrayToBeFixed, int32 index, int64 objectRequired)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RecordArrayElementFixup(int64 arrayToBeFixed, int32[] indices, int64 objectRequired)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RaiseDeserializationEvent()
		{
			ret
		}
		.method public hidebysig 
			instance void RaiseOnDeserializingEvent(object obj)
		{
			ret
		}
	}
	.class public sealed OnDeserializedAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed OnDeserializingAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed OnSerializedAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed OnSerializingAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 40 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed OptionalFieldAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 00 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_VersionAdded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_VersionAdded(int32 'value')
		{
			ret
		}
		.property instance int32 VersionAdded()
		{
			.get instance int32 System.Runtime.Serialization.OptionalFieldAttribute::get_VersionAdded()
			.set instance void System.Runtime.Serialization.OptionalFieldAttribute::set_VersionAdded(int32)
		}
	}
	.class public abstract serializable SerializationBinder
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Type BindToType(string assemblyName, string typeName)
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sequential sealed SerializationEntry
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance string Name()
		{
			.get instance string System.Runtime.Serialization.SerializationEntry::get_Name()
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Serialization.SerializationEntry::get_ObjectType()
		}
		.property instance object Value()
		{
			.get instance object System.Runtime.Serialization.SerializationEntry::get_Value()
		}
	}
	.class public serializable SerializationException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed SerializationInfo
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Type 'type', class System.Runtime.Serialization.IFormatterConverter converter)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance string get_FullTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FullTypeName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AssemblyName(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void SetType(class System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MemberCount()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator()
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, object 'value', class System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, uint8 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, int16 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, int64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, float32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddValue(string name, valuetype System.DateTime 'value')
		{
			ret
		}
		.method public hidebysig 
			instance object GetValue(string name, class System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance bool GetBoolean(string name)
		{
			ret
		}
		.method public hidebysig 
			instance char GetChar(string name)
		{
			ret
		}
		.method public hidebysig 
			instance int8 GetSByte(string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance uint8 GetByte(string name)
		{
			ret
		}
		.method public hidebysig 
			instance int16 GetInt16(string name)
		{
			ret
		}
		.method public hidebysig 
			instance uint16 GetUInt16(string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance int32 GetInt32(string name)
		{
			ret
		}
		.method public hidebysig 
			instance uint32 GetUInt32(string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance int64 GetInt64(string name)
		{
			ret
		}
		.method public hidebysig 
			instance uint64 GetUInt64(string name)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance float32 GetSingle(string name)
		{
			ret
		}
		.method public hidebysig 
			instance float64 GetDouble(string name)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Decimal GetDecimal(string name)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.DateTime GetDateTime(string name)
		{
			ret
		}
		.method public hidebysig 
			instance string GetString(string name)
		{
			ret
		}
		.property instance string AssemblyName()
		{
			.get instance string System.Runtime.Serialization.SerializationInfo::get_AssemblyName()
			.set instance void System.Runtime.Serialization.SerializationInfo::set_AssemblyName(string)
		}
		.property instance string FullTypeName()
		{
			.get instance string System.Runtime.Serialization.SerializationInfo::get_FullTypeName()
			.set instance void System.Runtime.Serialization.SerializationInfo::set_FullTypeName(string)
		}
		.property instance int32 MemberCount()
		{
			.get instance int32 System.Runtime.Serialization.SerializationInfo::get_MemberCount()
		}
	}
	.class public sealed SerializationInfoEnumerator
		extends System.Object
		implements System.Collections.IEnumerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot 
			instance bool MoveNext()
		{
			ret
		}
		.method private final virtual hidebysig newslot specialname 
			instance object System.Collections.IEnumerator.get_Current()
		{
			.override System.Collections.IEnumerator::get_Current
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Serialization.SerializationEntry get_Current()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Reset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_ObjectType()
		{
			ret
		}
		.property instance valuetype System.Runtime.Serialization.SerializationEntry Current()
		{
			.get instance valuetype System.Runtime.Serialization.SerializationEntry System.Runtime.Serialization.SerializationInfoEnumerator::get_Current()
		}
		.property instance string Name()
		{
			.get instance string System.Runtime.Serialization.SerializationInfoEnumerator::get_Name()
		}
		.property instance class System.Type ObjectType()
		{
			.get instance class System.Type System.Runtime.Serialization.SerializationInfoEnumerator::get_ObjectType()
		}
		.property instance object System.Collections.IEnumerator.Current()
		{
			.get instance object System.Runtime.Serialization.SerializationInfoEnumerator::System.Collections.IEnumerator.get_Current()
		}
		.property instance object Value()
		{
			.get instance object System.Runtime.Serialization.SerializationInfoEnumerator::get_Value()
		}
	}
	.class public sealed SerializationObjectManager
		extends System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig 
			instance void RegisterObject(object obj)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void RaiseOnSerializedEvent()
		{
			ret
		}
	}
	.class public sequential sealed serializable StreamingContext
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Serialization.StreamingContextStates state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Serialization.StreamingContextStates state, object additional)
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Context()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Serialization.StreamingContextStates get_State()
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
		.property instance object Context()
		{
			.get instance object System.Runtime.Serialization.StreamingContext::get_Context()
		}
		.property instance valuetype System.Runtime.Serialization.StreamingContextStates State()
		{
			.get instance valuetype System.Runtime.Serialization.StreamingContextStates System.Runtime.Serialization.StreamingContext::get_State()
		}
	}
	.class public sealed serializable StreamingContextStates
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates All = int32(0x000000FF)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates Clone = int32(0x00000040)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates CrossAppDomain = int32(0x00000080)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates CrossMachine = int32(0x00000002)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates CrossProcess = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates File = int32(0x00000004)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates Other = int32(0x00000020)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates Persistence = int32(0x00000008)
		.field static public literal valuetype System.Runtime.Serialization.StreamingContextStates Remoting = int32(0x00000010)
	}
	.class public SurrogateSelector
		extends System.Object
		implements System.Runtime.Serialization.ISurrogateSelector
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddSurrogate(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context, class System.Runtime.Serialization.ISerializationSurrogate surrogate)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ChainSelector(class System.Runtime.Serialization.ISurrogateSelector selector)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Serialization.ISurrogateSelector GetNextSelector()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Runtime.Serialization.ISerializationSurrogate GetSurrogate(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context, [out] class System.Runtime.Serialization.ISurrogateSelector& selector)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveSurrogate(class System.Type 'type', valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
}
.namespace System.Runtime.Serialization.Formatters
{
	.class public sealed serializable FormatterAssemblyStyle
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle Full = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle Simple = int32(0x00000000)
	}
	.class public sealed serializable FormatterTypeStyle
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesAlways = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesWhenNeeded = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle XsdString = int32(0x00000002)
	}
	.class public interface abstract IFieldInfo
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string[] get_FieldNames()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_FieldNames(string[] 'value')
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type[] get_FieldTypes()
		{
			.permissionset linkcheck = (00)
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_FieldTypes(class System.Type[] 'value')
		{
			.permissionset linkcheck = (00)
		}
		.property instance string[] FieldNames()
		{
			.get instance string[] System.Runtime.Serialization.Formatters.IFieldInfo::get_FieldNames()
			.set instance void System.Runtime.Serialization.Formatters.IFieldInfo::set_FieldNames(string[])
		}
		.property instance class System.Type[] FieldTypes()
		{
			.get instance class System.Type[] System.Runtime.Serialization.Formatters.IFieldInfo::get_FieldTypes()
			.set instance void System.Runtime.Serialization.Formatters.IFieldInfo::set_FieldTypes(class System.Type[])
		}
	}
	.class public interface abstract ISoapMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string[] get_ParamNames()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ParamNames(string[] 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object[] get_ParamValues()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ParamValues(object[] 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Type[] get_ParamTypes()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ParamTypes(class System.Type[] 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_MethodName()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_MethodName(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_XmlNameSpace()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_XmlNameSpace(string 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Runtime.Remoting.Messaging.Header[] get_Headers()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Headers(class System.Runtime.Remoting.Messaging.Header[] 'value')
		{
		}
		.property instance class System.Runtime.Remoting.Messaging.Header[] Headers()
		{
			.get instance class System.Runtime.Remoting.Messaging.Header[] System.Runtime.Serialization.Formatters.ISoapMessage::get_Headers()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_Headers(class System.Runtime.Remoting.Messaging.Header[])
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Serialization.Formatters.ISoapMessage::get_MethodName()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_MethodName(string)
		}
		.property instance string[] ParamNames()
		{
			.get instance string[] System.Runtime.Serialization.Formatters.ISoapMessage::get_ParamNames()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_ParamNames(string[])
		}
		.property instance class System.Type[] ParamTypes()
		{
			.get instance class System.Type[] System.Runtime.Serialization.Formatters.ISoapMessage::get_ParamTypes()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_ParamTypes(class System.Type[])
		}
		.property instance object[] ParamValues()
		{
			.get instance object[] System.Runtime.Serialization.Formatters.ISoapMessage::get_ParamValues()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_ParamValues(object[])
		}
		.property instance string XmlNameSpace()
		{
			.get instance string System.Runtime.Serialization.Formatters.ISoapMessage::get_XmlNameSpace()
			.set instance void System.Runtime.Serialization.Formatters.ISoapMessage::set_XmlNameSpace(string)
		}
	}
	.class public sealed InternalRM
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void InfoSoap(object[] messages)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 08 5F 4C 4F 47 47 49 4E 47 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool SoapCheckEnabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed InternalST
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void InfoSoap(object[] messages)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 08 5F 4C 4F 47 47 49 4E 47 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool SoapCheckEnabled()
		{
			ret
		}
		.method public static hidebysig 
			void Soap(object[] messages)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 0B 53 45 52 5F 4C 4F 47 47 49 4E 47 00 00)
			.param [1]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public static hidebysig 
			void SoapAssert(bool condition, string message)
		{
			.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 06 5F 44 45 42 55 47 00 00)
			ret
		}
		.method public static hidebysig 
			void SerializationSetValue(class System.Reflection.FieldInfo fi, object target, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.Reflection.Assembly LoadAssemblyFromString(string assemblyString)
		{
			ret
		}
	}
	.class public sealed serializable ServerFault
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string exceptionType, string message, string stackTrace)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ExceptionType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ExceptionType(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ExceptionMessage()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ExceptionMessage(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_StackTrace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_StackTrace(string 'value')
		{
			ret
		}
		.property instance string ExceptionMessage()
		{
			.get instance string System.Runtime.Serialization.Formatters.ServerFault::get_ExceptionMessage()
			.set instance void System.Runtime.Serialization.Formatters.ServerFault::set_ExceptionMessage(string)
		}
		.property instance string ExceptionType()
		{
			.get instance string System.Runtime.Serialization.Formatters.ServerFault::get_ExceptionType()
			.set instance void System.Runtime.Serialization.Formatters.ServerFault::set_ExceptionType(string)
		}
		.property instance string StackTrace()
		{
			.get instance string System.Runtime.Serialization.Formatters.ServerFault::get_StackTrace()
			.set instance void System.Runtime.Serialization.Formatters.ServerFault::set_StackTrace(string)
		}
	}
	.class public sealed serializable SoapFault
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string faultCode, string faultString, string faultActor, class System.Runtime.Serialization.Formatters.ServerFault serverFault)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance string get_FaultCode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FaultCode(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FaultString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FaultString(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FaultActor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FaultActor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Detail()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Detail(object 'value')
		{
			ret
		}
		.property instance object Detail()
		{
			.get instance object System.Runtime.Serialization.Formatters.SoapFault::get_Detail()
			.set instance void System.Runtime.Serialization.Formatters.SoapFault::set_Detail(object)
		}
		.property instance string FaultActor()
		{
			.get instance string System.Runtime.Serialization.Formatters.SoapFault::get_FaultActor()
			.set instance void System.Runtime.Serialization.Formatters.SoapFault::set_FaultActor(string)
		}
		.property instance string FaultCode()
		{
			.get instance string System.Runtime.Serialization.Formatters.SoapFault::get_FaultCode()
			.set instance void System.Runtime.Serialization.Formatters.SoapFault::set_FaultCode(string)
		}
		.property instance string FaultString()
		{
			.get instance string System.Runtime.Serialization.Formatters.SoapFault::get_FaultString()
			.set instance void System.Runtime.Serialization.Formatters.SoapFault::set_FaultString(string)
		}
	}
	.class public serializable SoapMessage
		extends System.Object
		implements System.Runtime.Serialization.Formatters.ISoapMessage
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public final virtual hidebysig newslot specialname 
			instance string[] get_ParamNames()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ParamNames(string[] 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object[] get_ParamValues()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ParamValues(object[] 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Type[] get_ParamTypes()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_ParamTypes(class System.Type[] 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_MethodName()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_MethodName(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_XmlNameSpace()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_XmlNameSpace(string 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Remoting.Messaging.Header[] get_Headers()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Headers(class System.Runtime.Remoting.Messaging.Header[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance class System.Runtime.Remoting.Messaging.Header[] Headers()
		{
			.get instance class System.Runtime.Remoting.Messaging.Header[] System.Runtime.Serialization.Formatters.SoapMessage::get_Headers()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_Headers(class System.Runtime.Remoting.Messaging.Header[])
		}
		.property instance string MethodName()
		{
			.get instance string System.Runtime.Serialization.Formatters.SoapMessage::get_MethodName()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_MethodName(string)
		}
		.property instance string[] ParamNames()
		{
			.get instance string[] System.Runtime.Serialization.Formatters.SoapMessage::get_ParamNames()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_ParamNames(string[])
		}
		.property instance class System.Type[] ParamTypes()
		{
			.get instance class System.Type[] System.Runtime.Serialization.Formatters.SoapMessage::get_ParamTypes()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_ParamTypes(class System.Type[])
		}
		.property instance object[] ParamValues()
		{
			.get instance object[] System.Runtime.Serialization.Formatters.SoapMessage::get_ParamValues()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_ParamValues(object[])
		}
		.property instance string XmlNameSpace()
		{
			.get instance string System.Runtime.Serialization.Formatters.SoapMessage::get_XmlNameSpace()
			.set instance void System.Runtime.Serialization.Formatters.SoapMessage::set_XmlNameSpace(string)
		}
	}
	.class public sealed TypeFilterLevel
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel Full = int32(0x00000003)
		.field static public literal valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel Low = int32(0x00000002)
	}
}
.namespace System.Runtime.Serialization.Formatters.Binary
{
	.class public sealed BinaryFormatter
		extends System.Object
		implements System.Runtime.Remoting.Messaging.IRemotingFormatter, System.Runtime.Serialization.IFormatter
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle get_TypeFormat()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeFormat(valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle get_AssemblyFormat()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AssemblyFormat(valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel get_FilterLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FilterLevel(valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Serialization.ISurrogateSelector get_SurrogateSelector()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class System.Runtime.Serialization.SerializationBinder get_Binder()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Binder(class System.Runtime.Serialization.SerializationBinder 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance valuetype System.Runtime.Serialization.StreamingContext get_Context()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Context(valuetype System.Runtime.Serialization.StreamingContext 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.ISurrogateSelector selector, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Deserialize(class 'System.IO.Stream' serializationStream)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance object Deserialize(class 'System.IO.Stream' serializationStream, class System.Runtime.Remoting.Messaging.HeaderHandler 'handler')
		{
			ret
		}
		.method public hidebysig 
			instance object DeserializeMethodResponse(class 'System.IO.Stream' serializationStream, class System.Runtime.Remoting.Messaging.HeaderHandler 'handler', class System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage)
		{
			ret
		}
		.method public hidebysig 
			instance object UnsafeDeserialize(class 'System.IO.Stream' serializationStream, class System.Runtime.Remoting.Messaging.HeaderHandler 'handler')
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance object UnsafeDeserializeMethodResponse(class 'System.IO.Stream' serializationStream, class System.Runtime.Remoting.Messaging.HeaderHandler 'handler', class System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Serialize(class 'System.IO.Stream' serializationStream, object graph)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Serialize(class 'System.IO.Stream' serializationStream, object graph, class System.Runtime.Remoting.Messaging.Header[] headers)
		{
			ret
		}
		.property instance valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle AssemblyFormat()
		{
			.get instance valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_AssemblyFormat()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_AssemblyFormat(valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle)
		}
		.property instance class System.Runtime.Serialization.SerializationBinder Binder()
		{
			.get instance class System.Runtime.Serialization.SerializationBinder System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_Binder()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_Binder(class System.Runtime.Serialization.SerializationBinder)
		}
		.property instance valuetype System.Runtime.Serialization.StreamingContext Context()
		{
			.get instance valuetype System.Runtime.Serialization.StreamingContext System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_Context()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_Context(valuetype System.Runtime.Serialization.StreamingContext)
		}
		.property instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel FilterLevel()
		{
			.get instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_FilterLevel()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_FilterLevel(valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel)
		}
		.property instance class System.Runtime.Serialization.ISurrogateSelector SurrogateSelector()
		{
			.get instance class System.Runtime.Serialization.ISurrogateSelector System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_SurrogateSelector()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_SurrogateSelector(class System.Runtime.Serialization.ISurrogateSelector)
		}
		.property instance valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat()
		{
			.get instance valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::get_TypeFormat()
			.set instance void System.Runtime.Serialization.Formatters.Binary.BinaryFormatter::set_TypeFormat(valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle)
		}
	}
}
.namespace System.Runtime.Versioning
{
	.class public sealed ResourceConsumptionAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 E0 00 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 18 52 45 53 4F 55 52 43 45 5F 41 4E 4E 4F 54 41 54 49 4F 4E 5F 57 4F 52 4B 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Versioning.ResourceScope resourceScope)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Versioning.ResourceScope resourceScope, valuetype System.Runtime.Versioning.ResourceScope consumptionScope)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Versioning.ResourceScope get_ResourceScope()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Versioning.ResourceScope get_ConsumptionScope()
		{
			ret
		}
		.property instance valuetype System.Runtime.Versioning.ResourceScope ConsumptionScope()
		{
			.get instance valuetype System.Runtime.Versioning.ResourceScope System.Runtime.Versioning.ResourceConsumptionAttribute::get_ConsumptionScope()
		}
		.property instance valuetype System.Runtime.Versioning.ResourceScope ResourceScope()
		{
			.get instance valuetype System.Runtime.Versioning.ResourceScope System.Runtime.Versioning.ResourceConsumptionAttribute::get_ResourceScope()
		}
	}
	.class public sealed ResourceExposureAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 E0 01 00 00 01 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Diagnostics.ConditionalAttribute::.ctor(string) = (01 00 18 52 45 53 4F 55 52 43 45 5F 41 4E 4E 4F 54 41 54 49 4F 4E 5F 57 4F 52 4B 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Versioning.ResourceScope exposureLevel)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Runtime.Versioning.ResourceScope get_ResourceExposureLevel()
		{
			ret
		}
		.property instance valuetype System.Runtime.Versioning.ResourceScope ResourceExposureLevel()
		{
			.get instance valuetype System.Runtime.Versioning.ResourceScope System.Runtime.Versioning.ResourceExposureAttribute::get_ResourceExposureLevel()
		}
	}
	.class public sealed ResourceScope
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope AppDomain = int32(0x00000004)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope Assembly = int32(0x00000020)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope Library = int32(0x00000008)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope Machine = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope None = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope Private = int32(0x00000010)
		.field static public literal valuetype System.Runtime.Versioning.ResourceScope Process = int32(0x00000002)
	}
	.class public abstract sealed VersioningHelper
		extends System.Object
	{
		.method public static hidebysig 
			string MakeVersionSafeName(string name, valuetype System.Runtime.Versioning.ResourceScope from, valuetype System.Runtime.Versioning.ResourceScope 'to')
		{
			ret
		}
		.method public static hidebysig 
			string MakeVersionSafeName(string name, valuetype System.Runtime.Versioning.ResourceScope from, valuetype System.Runtime.Versioning.ResourceScope 'to', class System.Type 'type')
		{
			ret
		}
	}
}
.namespace System.Security
{
	.class public sealed AllowPartiallyTrustedCallersAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract serializable CodeAccessPermission
		extends System.Object
		implements System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.IStackWalk
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void RevertAssert()
		{
			ret
		}
		.method public static hidebysig 
			void RevertDeny()
		{
			ret
		}
		.method public static hidebysig 
			void RevertPermitOnly()
		{
			ret
		}
		.method public static hidebysig 
			void RevertAll()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Demand()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Assert()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Deny()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void PermitOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.IPermission Union(class System.Security.IPermission other)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.SecurityElement ToXml()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void FromXml(class System.Security.SecurityElement elem)
		{
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission Copy()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable HostProtectionException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception e)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, valuetype System.Security.Permissions.HostProtectionResource protectedResources, valuetype System.Security.Permissions.HostProtectionResource demandedResources)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.HostProtectionResource get_ProtectedResources()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.HostProtectionResource get_DemandedResources()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance valuetype System.Security.Permissions.HostProtectionResource DemandedResources()
		{
			.get instance valuetype System.Security.Permissions.HostProtectionResource System.Security.HostProtectionException::get_DemandedResources()
		}
		.property instance valuetype System.Security.Permissions.HostProtectionResource ProtectedResources()
		{
			.get instance valuetype System.Security.Permissions.HostProtectionResource System.Security.HostProtectionException::get_ProtectedResources()
		}
	}
	.class public serializable HostSecurityManager
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype System.Security.HostSecurityManagerOptions get_Flags()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Security.Policy.PolicyLevel get_DomainPolicy()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.Policy.Evidence ProvideAppDomainEvidence(class System.Security.Policy.Evidence inputEvidence)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.Policy.Evidence ProvideAssemblyEvidence(class System.Reflection.Assembly loadedAssembly, class System.Security.Policy.Evidence inputEvidence)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.property instance class System.Security.Policy.PolicyLevel DomainPolicy()
		{
			.get instance class System.Security.Policy.PolicyLevel System.Security.HostSecurityManager::get_DomainPolicy()
		}
		.property instance valuetype System.Security.HostSecurityManagerOptions Flags()
		{
			.get instance valuetype System.Security.HostSecurityManagerOptions System.Security.HostSecurityManager::get_Flags()
		}
	}
	.class public sealed serializable HostSecurityManagerOptions
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.HostSecurityManagerOptions AllFlags = int32(0x0000001F)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions HostAppDomainEvidence = int32(0x00000001)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions HostAssemblyEvidence = int32(0x00000004)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions HostDetermineApplicationTrust = int32(0x00000008)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions HostPolicyLevel = int32(0x00000002)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions HostResolvePolicy = int32(0x00000010)
		.field static public literal valuetype System.Security.HostSecurityManagerOptions None = int32(0x00000000)
	}
	.class public interface abstract IEvidenceFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Security.Policy.Evidence get_Evidence()
		{
		}
		.property instance class System.Security.Policy.Evidence Evidence()
		{
			.get instance class System.Security.Policy.Evidence System.Security.IEvidenceFactory::get_Evidence()
		}
	}
	.class public interface abstract IPermission
		implements System.Security.ISecurityEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission Copy()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Demand()
		{
		}
	}
	.class public interface abstract ISecurityEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.SecurityElement ToXml()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void FromXml(class System.Security.SecurityElement e)
		{
		}
	}
	.class public interface abstract ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
		}
	}
	.class public interface abstract IStackWalk
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance void Assert()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Demand()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Deny()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void PermitOnly()
		{
		}
	}
	.class public sealed serializable NamedPermissionSet
		extends System.Security.PermissionSet
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class System.Security.PermissionSet permSet)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.NamedPermissionSet permSet)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Description(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.PermissionSet Copy()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.NamedPermissionSet Copy(string name)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement et)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance string Description()
		{
			.get instance string System.Security.NamedPermissionSet::get_Description()
			.set instance void System.Security.NamedPermissionSet::set_Description(string)
		}
		.property instance string Name()
		{
			.get instance string System.Security.NamedPermissionSet::get_Name()
			.set instance void System.Security.NamedPermissionSet::set_Name(string)
		}
	}
	.class public serializable PermissionSet
		extends System.Object
		implements System.Security.ISecurityEncodable, System.Collections.ICollection, System.Collections.IEnumerable, System.Security.IStackWalk, System.Runtime.Serialization.IDeserializationCallback
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.PermissionSet permSet)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsEmpty()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.IPermission GetPermission(class System.Type permClass)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.IPermission SetPermission(class System.Security.IPermission perm)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.IPermission AddPermission(class System.Security.IPermission perm)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.IPermission RemovePermission(class System.Type permClass)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsSubsetOf(class System.Security.PermissionSet target)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.PermissionSet Intersect(class System.Security.PermissionSet other)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.PermissionSet Union(class System.Security.PermissionSet other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Demand()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Assert()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Deny()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void PermitOnly()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.PermissionSet Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement et)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public static hidebysig 
			uint8[] ConvertPermissionSet(string inFormat, uint8[] inData, string outFormat)
		{
			ret
		}
		.method public hidebysig 
			instance bool ContainsNonCodeAccessPermissions()
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender)
		{
			.override System.Runtime.Serialization.IDeserializationCallback::OnDeserialization
			ret
		}
		.method public static hidebysig 
			void RevertAssert()
		{
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Security.PermissionSet::get_Count()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Security.PermissionSet::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Security.PermissionSet::get_IsSynchronized()
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Security.PermissionSet::get_SyncRoot()
		}
	}
	.class public sealed serializable PolicyLevelType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.PolicyLevelType AppDomain = int32(0x00000003)
		.field static public literal valuetype System.Security.PolicyLevelType Enterprise = int32(0x00000002)
		.field static public literal valuetype System.Security.PolicyLevelType Machine = int32(0x00000001)
		.field static public literal valuetype System.Security.PolicyLevelType User = int32(0x00000000)
	}
	.class public sealed SecurityContext
		extends System.Object
	{
		.method public static hidebysig 
			valuetype System.Threading.AsyncFlowControl SuppressFlow()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			valuetype System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void RestoreFlow()
		{
			ret
		}
		.method public static hidebysig 
			bool IsFlowSuppressed()
		{
			ret
		}
		.method public static hidebysig 
			bool IsWindowsIdentityFlowSuppressed()
		{
			ret
		}
		.method public static hidebysig 
			void Run(class System.Security.SecurityContext securityContext, class System.Threading.ContextCallback callback, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance class System.Security.SecurityContext CreateCopy()
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.SecurityContext Capture()
		{
			ret
		}
	}
	.class public sealed SecurityCriticalAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 17 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.SecurityCriticalScope scope)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityCriticalScope get_Scope()
		{
			ret
		}
		.property instance valuetype System.Security.SecurityCriticalScope Scope()
		{
			.get instance valuetype System.Security.SecurityCriticalScope System.Security.SecurityCriticalAttribute::get_Scope()
		}
	}
	.class public sealed SecurityCriticalScope
		extends System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.SecurityCriticalScope Everything = int32(0x00000001)
		.field static public literal valuetype System.Security.SecurityCriticalScope Explicit = int32(0x00000000)
	}
	.class public sealed serializable SecurityElement
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Security.SecurityElement FromString(string xml)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tag, string text)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Tag()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Tag(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.Hashtable get_Attributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Attributes(class System.Collections.Hashtable 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Text()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Text(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.ArrayList get_Children()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Children(class System.Collections.ArrayList 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddAttribute(string name, string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddChild(class System.Security.SecurityElement child)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equal(class System.Security.SecurityElement other)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.SecurityElement Copy()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool IsValidTag(string tag)
		{
			ret
		}
		.method public static hidebysig 
			bool IsValidText(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool IsValidAttributeName(string name)
		{
			ret
		}
		.method public static hidebysig 
			bool IsValidAttributeValue(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			string Escape(string str)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string Attribute(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.SecurityElement SearchForChildByTag(string tag)
		{
			ret
		}
		.method public hidebysig 
			instance string SearchForTextOfTag(string tag)
		{
			ret
		}
		.property instance class System.Collections.Hashtable Attributes()
		{
			.get instance class System.Collections.Hashtable System.Security.SecurityElement::get_Attributes()
			.set instance void System.Security.SecurityElement::set_Attributes(class System.Collections.Hashtable)
		}
		.property instance class System.Collections.ArrayList Children()
		{
			.get instance class System.Collections.ArrayList System.Security.SecurityElement::get_Children()
			.set instance void System.Security.SecurityElement::set_Children(class System.Collections.ArrayList)
		}
		.property instance string Tag()
		{
			.get instance string System.Security.SecurityElement::get_Tag()
			.set instance void System.Security.SecurityElement::set_Tag(string)
		}
		.property instance string Text()
		{
			.get instance string System.Security.SecurityElement::get_Text()
			.set instance void System.Security.SecurityElement::set_Text(string)
		}
	}
	.class public serializable SecurityException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Type 'type', string state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Reflection.AssemblyName assemblyName, class System.Security.PermissionSet grant, class System.Security.PermissionSet refused, class System.Reflection.MethodInfo 'method', valuetype System.Security.Permissions.SecurityAction action, object demanded, class System.Security.IPermission permThatFailed, class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, object 'deny', object permitOnly, class System.Reflection.MethodInfo 'method', object demanded, class System.Security.IPermission permThatFailed)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.SecurityAction get_Action()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Action(valuetype System.Security.Permissions.SecurityAction 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Type get_PermissionType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PermissionType(class System.Type 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.IPermission get_FirstPermissionThatFailed()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FirstPermissionThatFailed(class System.Security.IPermission 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PermissionState()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PermissionState(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Demanded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Demanded(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_GrantedSet()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_GrantedSet(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_RefusedSet()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_RefusedSet(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_DenySetInstance()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DenySetInstance(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_PermitOnlySetInstance()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PermitOnlySetInstance(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.AssemblyName get_FailedAssemblyInfo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_FailedAssemblyInfo(class System.Reflection.AssemblyName 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Reflection.MethodInfo get_Method()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Method(class System.Reflection.MethodInfo 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityZone get_Zone()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Zone(valuetype System.Security.SecurityZone 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Url(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance valuetype System.Security.Permissions.SecurityAction Action()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Security.Permissions.SecurityAction System.Security.SecurityException::get_Action()
			.set instance void System.Security.SecurityException::set_Action(valuetype System.Security.Permissions.SecurityAction)
		}
		.property instance object Demanded()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance object System.Security.SecurityException::get_Demanded()
			.set instance void System.Security.SecurityException::set_Demanded(object)
		}
		.property instance object DenySetInstance()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance object System.Security.SecurityException::get_DenySetInstance()
			.set instance void System.Security.SecurityException::set_DenySetInstance(object)
		}
		.property instance class System.Reflection.AssemblyName FailedAssemblyInfo()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Reflection.AssemblyName System.Security.SecurityException::get_FailedAssemblyInfo()
			.set instance void System.Security.SecurityException::set_FailedAssemblyInfo(class System.Reflection.AssemblyName)
		}
		.property instance class System.Security.IPermission FirstPermissionThatFailed()
		{
			.get instance class System.Security.IPermission System.Security.SecurityException::get_FirstPermissionThatFailed()
			.set instance void System.Security.SecurityException::set_FirstPermissionThatFailed(class System.Security.IPermission)
		}
		.property instance string GrantedSet()
		{
			.get instance string System.Security.SecurityException::get_GrantedSet()
			.set instance void System.Security.SecurityException::set_GrantedSet(string)
		}
		.property instance class System.Reflection.MethodInfo Method()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Reflection.MethodInfo System.Security.SecurityException::get_Method()
			.set instance void System.Security.SecurityException::set_Method(class System.Reflection.MethodInfo)
		}
		.property instance string PermissionState()
		{
			.get instance string System.Security.SecurityException::get_PermissionState()
			.set instance void System.Security.SecurityException::set_PermissionState(string)
		}
		.property instance class System.Type PermissionType()
		{
			.get instance class System.Type System.Security.SecurityException::get_PermissionType()
			.set instance void System.Security.SecurityException::set_PermissionType(class System.Type)
		}
		.property instance object PermitOnlySetInstance()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance object System.Security.SecurityException::get_PermitOnlySetInstance()
			.set instance void System.Security.SecurityException::set_PermitOnlySetInstance(object)
		}
		.property instance string RefusedSet()
		{
			.get instance string System.Security.SecurityException::get_RefusedSet()
			.set instance void System.Security.SecurityException::set_RefusedSet(string)
		}
		.property instance string Url()
		{
			.get instance string System.Security.SecurityException::get_Url()
			.set instance void System.Security.SecurityException::set_Url(string)
		}
		.property instance valuetype System.Security.SecurityZone Zone()
		{
			.get instance valuetype System.Security.SecurityZone System.Security.SecurityException::get_Zone()
			.set instance void System.Security.SecurityException::set_Zone(valuetype System.Security.SecurityZone)
		}
	}
	.class public abstract sealed SecurityManager
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			bool IsGranted(class System.Security.IPermission perm)
		{
			ret
		}
		.method public static hidebysig 
			void GetZoneAndOrigin([out] class System.Collections.ArrayList& zone, [out] class System.Collections.ArrayList& origin)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile(string path, valuetype System.Security.PolicyLevelType 'type')
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.PolicyLevel LoadPolicyLevelFromString(string str, valuetype System.Security.PolicyLevelType 'type')
		{
			ret
		}
		.method public static hidebysig 
			void SavePolicyLevel(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet reqdPset, class System.Security.PermissionSet optPset, class System.Security.PermissionSet denyPset, [out] class System.Security.PermissionSet& denied)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.PermissionSet ResolvePolicy(class System.Security.Policy.Evidence[] evidences)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.PermissionSet ResolveSystemPolicy(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IEnumerator ResolvePolicyGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public static hidebysig 
			class System.Collections.IEnumerator PolicyHierarchy()
		{
			ret
		}
		.method public static hidebysig 
			void SavePolicy()
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_CheckExecutionRights()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_CheckExecutionRights(bool 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_SecurityEnabled()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_SecurityEnabled(bool 'value')
		{
			ret
		}
		.property bool CheckExecutionRights()
		{
			.get bool System.Security.SecurityManager::get_CheckExecutionRights()
			.set void System.Security.SecurityManager::set_CheckExecutionRights(bool)
		}
		.property bool SecurityEnabled()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 D3 42 65 63 61 75 73 65 20 73 65 63 75 72 69 74 79 20 63 61 6E 20 6E 6F 20 6C 6F 6E 67 65 72 20 62 65 20 74 75 72 6E 65 64 20 6F 66 66 20 70 65 72 6D 61 6E 65 6E 74 6C 79 2C 20 73 65 74 74 69 6E 67 20 74 68 65 20 53 65 63 75 72 69 74 79 45 6E 61 62 6C 65 64 20 70 72 6F 70 65 72 74 79 20 6E 6F 20 6C 6F 6E 67 65 72 20 68 61 73 20 61 6E 79 20 65 66 66 65 63 74 2E 20 52 65 61 64 69 6E 67 20 74 68 65 20 70 72 6F 70 65 72 74 79 20 77 69 6C 6C 20 73 74 69 6C 6C 20 69 6E 64 69 63 61 74 65 20 77 68 65 74 68 65 72 20 73 65 63 75 72 69 74 79 20 68 61 73 20 62 65 65 6E 20 74 75 72 6E 65 64 20 6F 66 66 20 74 65 6D 70 6F 72 61 72 69 6C 79 2E 00 00)
			.get bool System.Security.SecurityManager::get_SecurityEnabled()
			.set void System.Security.SecurityManager::set_SecurityEnabled(bool)
		}
	}
	.class public sealed SecurityTransparentAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 01 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed SecurityTreatAsSafeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 FF 7F 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 00 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed serializable SecurityZone
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.SecurityZone Internet = int32(0x00000003)
		.field static public literal valuetype System.Security.SecurityZone Intranet = int32(0x00000001)
		.field static public literal valuetype System.Security.SecurityZone MyComputer = int32(0x00000000)
		.field static public literal valuetype System.Security.SecurityZone NoZone = int32(0xFFFFFFFF)
		.field static public literal valuetype System.Security.SecurityZone Trusted = int32(0x00000002)
		.field static public literal valuetype System.Security.SecurityZone Untrusted = int32(0x00000004)
	}
	.class public sealed SuppressUnmanagedCodeSecurityAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 44 14 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed UnverifiableCodeAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 02 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable VerificationException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable XmlSyntaxException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 lineNumber)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 lineNumber, string message)
		{
			ret
		}
	}
}
.namespace System.Security.Cryptography
{
	.class public sealed serializable CipherMode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Cryptography.CipherMode CBC = int32(0x00000001)
		.field static public literal valuetype System.Security.Cryptography.CipherMode CFB = int32(0x00000004)
		.field static public literal valuetype System.Security.Cryptography.CipherMode CTS = int32(0x00000005)
		.field static public literal valuetype System.Security.Cryptography.CipherMode ECB = int32(0x00000002)
		.field static public literal valuetype System.Security.Cryptography.CipherMode OFB = int32(0x00000003)
	}
	.class public serializable CryptographicException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string format, string insert)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 hr)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable CryptographicUnexpectedOperationException
		extends System.Security.Cryptography.CryptographicException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string format, string insert)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public interface abstract ICryptoTransform
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_InputBlockSize()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_OutputBlockSize()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanTransformMultipleBlocks()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_CanReuseTransform()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 TransformBlock(uint8[] inputBuffer, int32 inputOffset, int32 inputCount, uint8[] outputBuffer, int32 outputOffset)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance uint8[] TransformFinalBlock(uint8[] inputBuffer, int32 inputOffset, int32 inputCount)
		{
		}
		.property instance bool CanReuseTransform()
		{
			.get instance bool System.Security.Cryptography.ICryptoTransform::get_CanReuseTransform()
		}
		.property instance bool CanTransformMultipleBlocks()
		{
			.get instance bool System.Security.Cryptography.ICryptoTransform::get_CanTransformMultipleBlocks()
		}
		.property instance int32 InputBlockSize()
		{
			.get instance int32 System.Security.Cryptography.ICryptoTransform::get_InputBlockSize()
		}
		.property instance int32 OutputBlockSize()
		{
			.get instance int32 System.Security.Cryptography.ICryptoTransform::get_OutputBlockSize()
		}
	}
	.class public sealed KeySizes
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance int32 get_MinSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MaxSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_SkipSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 minSize, int32 maxSize, int32 skipSize)
		{
			ret
		}
		.property instance int32 MaxSize()
		{
			.get instance int32 System.Security.Cryptography.KeySizes::get_MaxSize()
		}
		.property instance int32 MinSize()
		{
			.get instance int32 System.Security.Cryptography.KeySizes::get_MinSize()
		}
		.property instance int32 SkipSize()
		{
			.get instance int32 System.Security.Cryptography.KeySizes::get_SkipSize()
		}
	}
	.class public sealed serializable PaddingMode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Cryptography.PaddingMode 'ANSIX923' = int32(0x00000004)
		.field static public literal valuetype System.Security.Cryptography.PaddingMode 'ISO10126' = int32(0x00000005)
		.field static public literal valuetype System.Security.Cryptography.PaddingMode None = int32(0x00000001)
		.field static public literal valuetype System.Security.Cryptography.PaddingMode 'PKCS7' = int32(0x00000002)
		.field static public literal valuetype System.Security.Cryptography.PaddingMode Zeros = int32(0x00000003)
	}
	.class public sealed RNGCryptoServiceProvider
		extends System.Security.Cryptography.RandomNumberGenerator
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetBytes(uint8[] data)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GetNonZeroBytes(uint8[] data)
		{
			ret
		}
	}
	.class public abstract RandomNumberGenerator
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetBytes(uint8[] data)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GetNonZeroBytes(uint8[] data)
		{
		}
	}
}
.namespace System.Security.Cryptography.X509Certificates
{
	.class public sealed X509ContentType
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Authenticode = int32(0x00000006)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Cert = int32(0x00000001)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Pfx = int32(0x00000003)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Pkcs12 = int32(0x00000003)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Pkcs7 = int32(0x00000005)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType SerializedCert = int32(0x00000002)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType SerializedStore = int32(0x00000004)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509ContentType Unknown = int32(0x00000000)
	}
	.class public sealed serializable X509KeyStorageFlags
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags DefaultKeySet = int32(0x00000000)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags Exportable = int32(0x00000004)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags MachineKeySet = int32(0x00000002)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags PersistKeySet = int32(0x00000010)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags UserKeySet = int32(0x00000001)
		.field static public literal valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags UserProtected = int32(0x00000008)
	}
}
.namespace System.Security.Permissions
{
	.class public abstract serializable CodeAccessSecurityAttribute
		extends System.Security.Permissions.SecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
	}
	.class public sealed serializable EnvironmentPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList)
		{
			ret
		}
		.method public hidebysig 
			instance void SetPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList)
		{
			ret
		}
		.method public hidebysig 
			instance void AddPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList)
		{
			ret
		}
		.method public hidebysig 
			instance string GetPathList(valuetype System.Security.Permissions.EnvironmentPermissionAccess flag)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
	}
	.class public sealed serializable EnvironmentPermissionAccess
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.EnvironmentPermissionAccess AllAccess = int32(0x00000003)
		.field static public literal valuetype System.Security.Permissions.EnvironmentPermissionAccess NoAccess = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.EnvironmentPermissionAccess Read = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.EnvironmentPermissionAccess Write = int32(0x00000002)
	}
	.class public sealed serializable EnvironmentPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Read()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Read(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Write()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Write(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_All()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_All(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance string All()
		{
			.get instance string System.Security.Permissions.EnvironmentPermissionAttribute::get_All()
			.set instance void System.Security.Permissions.EnvironmentPermissionAttribute::set_All(string)
		}
		.property instance string Read()
		{
			.get instance string System.Security.Permissions.EnvironmentPermissionAttribute::get_Read()
			.set instance void System.Security.Permissions.EnvironmentPermissionAttribute::set_Read(string)
		}
		.property instance string Write()
		{
			.get instance string System.Security.Permissions.EnvironmentPermissionAttribute::get_Write()
			.set instance void System.Security.Permissions.EnvironmentPermissionAttribute::set_Write(string)
		}
	}
	.class public sealed serializable FileDialogPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.FileDialogPermissionAccess access)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.FileDialogPermissionAccess get_Access()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Access(valuetype System.Security.Permissions.FileDialogPermissionAccess 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.FileDialogPermissionAccess Access()
		{
			.get instance valuetype System.Security.Permissions.FileDialogPermissionAccess System.Security.Permissions.FileDialogPermission::get_Access()
			.set instance void System.Security.Permissions.FileDialogPermission::set_Access(valuetype System.Security.Permissions.FileDialogPermissionAccess)
		}
	}
	.class public sealed serializable FileDialogPermissionAccess
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.FileDialogPermissionAccess None = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.FileDialogPermissionAccess Open = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.FileDialogPermissionAccess OpenSave = int32(0x00000003)
		.field static public literal valuetype System.Security.Permissions.FileDialogPermissionAccess Save = int32(0x00000002)
	}
	.class public sealed serializable FileDialogPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Open()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Open(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Save()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Save(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance bool Open()
		{
			.get instance bool System.Security.Permissions.FileDialogPermissionAttribute::get_Open()
			.set instance void System.Security.Permissions.FileDialogPermissionAttribute::set_Open(bool)
		}
		.property instance bool Save()
		{
			.get instance bool System.Security.Permissions.FileDialogPermissionAttribute::get_Save()
			.set instance void System.Security.Permissions.FileDialogPermissionAttribute::set_Save(bool)
		}
	}
	.class public sealed serializable FileIOPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList)
		{
			ret
		}
		.method public hidebysig 
			instance void SetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path)
		{
			ret
		}
		.method public hidebysig 
			instance void SetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList)
		{
			ret
		}
		.method public hidebysig 
			instance void AddPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string path)
		{
			ret
		}
		.method public hidebysig 
			instance void AddPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access, string[] pathList)
		{
			ret
		}
		.method public hidebysig 
			instance string[] GetPathList(valuetype System.Security.Permissions.FileIOPermissionAccess access)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.FileIOPermissionAccess get_AllLocalFiles()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllLocalFiles(valuetype System.Security.Permissions.FileIOPermissionAccess 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.FileIOPermissionAccess get_AllFiles()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllFiles(valuetype System.Security.Permissions.FileIOPermissionAccess 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllFiles()
		{
			.get instance valuetype System.Security.Permissions.FileIOPermissionAccess System.Security.Permissions.FileIOPermission::get_AllFiles()
			.set instance void System.Security.Permissions.FileIOPermission::set_AllFiles(valuetype System.Security.Permissions.FileIOPermissionAccess)
		}
		.property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllLocalFiles()
		{
			.get instance valuetype System.Security.Permissions.FileIOPermissionAccess System.Security.Permissions.FileIOPermission::get_AllLocalFiles()
			.set instance void System.Security.Permissions.FileIOPermission::set_AllLocalFiles(valuetype System.Security.Permissions.FileIOPermissionAccess)
		}
	}
	.class public sealed serializable FileIOPermissionAccess
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess AllAccess = int32(0x0000000F)
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess Append = int32(0x00000004)
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess NoAccess = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess PathDiscovery = int32(0x00000008)
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess Read = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.FileIOPermissionAccess Write = int32(0x00000002)
	}
	.class public sealed serializable FileIOPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Read()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Read(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Write()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Write(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Append()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Append(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PathDiscovery()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PathDiscovery(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ViewAccessControl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ViewAccessControl(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ChangeAccessControl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ChangeAccessControl(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_All(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_All()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ViewAndModify()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ViewAndModify(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.FileIOPermissionAccess get_AllFiles()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllFiles(valuetype System.Security.Permissions.FileIOPermissionAccess 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.FileIOPermissionAccess get_AllLocalFiles()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllLocalFiles(valuetype System.Security.Permissions.FileIOPermissionAccess 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance string All()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 2E 50 6C 65 61 73 65 20 75 73 65 20 74 68 65 20 56 69 65 77 41 6E 64 4D 6F 64 69 66 79 20 70 72 6F 70 65 72 74 79 20 69 6E 73 74 65 61 64 2E 00 00)
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_All()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_All(string)
		}
		.property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllFiles()
		{
			.get instance valuetype System.Security.Permissions.FileIOPermissionAccess System.Security.Permissions.FileIOPermissionAttribute::get_AllFiles()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_AllFiles(valuetype System.Security.Permissions.FileIOPermissionAccess)
		}
		.property instance valuetype System.Security.Permissions.FileIOPermissionAccess AllLocalFiles()
		{
			.get instance valuetype System.Security.Permissions.FileIOPermissionAccess System.Security.Permissions.FileIOPermissionAttribute::get_AllLocalFiles()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_AllLocalFiles(valuetype System.Security.Permissions.FileIOPermissionAccess)
		}
		.property instance string Append()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_Append()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_Append(string)
		}
		.property instance string ChangeAccessControl()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_ChangeAccessControl()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_ChangeAccessControl(string)
		}
		.property instance string PathDiscovery()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_PathDiscovery()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_PathDiscovery(string)
		}
		.property instance string Read()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_Read()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_Read(string)
		}
		.property instance string ViewAccessControl()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_ViewAccessControl()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_ViewAccessControl(string)
		}
		.property instance string ViewAndModify()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_ViewAndModify()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_ViewAndModify(string)
		}
		.property instance string Write()
		{
			.get instance string System.Security.Permissions.FileIOPermissionAttribute::get_Write()
			.set instance void System.Security.Permissions.FileIOPermissionAttribute::set_Write(string)
		}
	}
	.class public sealed serializable GacIdentityPermission
		extends System.Security.CodeAccessPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement securityElement)
		{
			ret
		}
	}
	.class public sealed serializable GacIdentityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
	}
	.class public sealed serializable HostProtectionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 10 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.HostProtectionResource get_Resources()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Resources(valuetype System.Security.Permissions.HostProtectionResource 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Synchronization()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Synchronization(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SharedState()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SharedState(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ExternalProcessMgmt()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ExternalProcessMgmt(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SelfAffectingProcessMgmt()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SelfAffectingProcessMgmt(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ExternalThreading()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ExternalThreading(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SelfAffectingThreading()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SelfAffectingThreading(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SecurityInfrastructure()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SecurityInfrastructure(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UI()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UI(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_MayLeakOnAbort()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MayLeakOnAbort(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance bool ExternalProcessMgmt()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_ExternalProcessMgmt()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_ExternalProcessMgmt(bool)
		}
		.property instance bool ExternalThreading()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_ExternalThreading()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_ExternalThreading(bool)
		}
		.property instance bool MayLeakOnAbort()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_MayLeakOnAbort()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_MayLeakOnAbort(bool)
		}
		.property instance valuetype System.Security.Permissions.HostProtectionResource Resources()
		{
			.get instance valuetype System.Security.Permissions.HostProtectionResource System.Security.Permissions.HostProtectionAttribute::get_Resources()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_Resources(valuetype System.Security.Permissions.HostProtectionResource)
		}
		.property instance bool SecurityInfrastructure()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_SecurityInfrastructure()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_SecurityInfrastructure(bool)
		}
		.property instance bool SelfAffectingProcessMgmt()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_SelfAffectingProcessMgmt()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_SelfAffectingProcessMgmt(bool)
		}
		.property instance bool SelfAffectingThreading()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_SelfAffectingThreading()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_SelfAffectingThreading(bool)
		}
		.property instance bool SharedState()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_SharedState()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_SharedState(bool)
		}
		.property instance bool Synchronization()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_Synchronization()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_Synchronization(bool)
		}
		.property instance bool UI()
		{
			.get instance bool System.Security.Permissions.HostProtectionAttribute::get_UI()
			.set instance void System.Security.Permissions.HostProtectionAttribute::set_UI(bool)
		}
	}
	.class public sealed serializable HostProtectionResource
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource All = int32(0x000001FF)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource ExternalProcessMgmt = int32(0x00000004)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource ExternalThreading = int32(0x00000010)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource MayLeakOnAbort = int32(0x00000100)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource None = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource SecurityInfrastructure = int32(0x00000040)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource SelfAffectingProcessMgmt = int32(0x00000008)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource SelfAffectingThreading = int32(0x00000020)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource SharedState = int32(0x00000002)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource Synchronization = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.HostProtectionResource UI = int32(0x00000080)
	}
	.class public interface abstract IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool IsUnrestricted()
		{
		}
	}
	.class public sealed serializable IsolatedStorageContainment
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment AdministerIsolatedStorageByUser = int32(0x00000070)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment ApplicationIsolationByMachine = int32(0x00000045)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment ApplicationIsolationByRoamingUser = int32(0x00000065)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment ApplicationIsolationByUser = int32(0x00000015)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment AssemblyIsolationByMachine = int32(0x00000040)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment AssemblyIsolationByRoamingUser = int32(0x00000060)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment AssemblyIsolationByUser = int32(0x00000020)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment DomainIsolationByMachine = int32(0x00000030)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment DomainIsolationByRoamingUser = int32(0x00000050)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment DomainIsolationByUser = int32(0x00000010)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment None = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.IsolatedStorageContainment UnrestrictedIsolatedStorage = int32(0x000000F0)
	}
	.class public sealed serializable IsolatedStorageFilePermission
		extends System.Security.Permissions.IsolatedStoragePermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
	}
	.class public sealed serializable IsolatedStorageFilePermissionAttribute
		extends System.Security.Permissions.IsolatedStoragePermissionAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
	}
	.class public abstract serializable IsolatedStoragePermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UserQuota(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_UserQuota()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UsageAllowed(valuetype System.Security.Permissions.IsolatedStorageContainment 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.IsolatedStorageContainment get_UsageAllowed()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.IsolatedStorageContainment UsageAllowed()
		{
			.get instance valuetype System.Security.Permissions.IsolatedStorageContainment System.Security.Permissions.IsolatedStoragePermission::get_UsageAllowed()
			.set instance void System.Security.Permissions.IsolatedStoragePermission::set_UsageAllowed(valuetype System.Security.Permissions.IsolatedStorageContainment)
		}
		.property instance int64 UserQuota()
		{
			.get instance int64 System.Security.Permissions.IsolatedStoragePermission::get_UserQuota()
			.set instance void System.Security.Permissions.IsolatedStoragePermission::set_UserQuota(int64)
		}
	}
	.class public abstract serializable IsolatedStoragePermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UserQuota(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_UserQuota()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UsageAllowed(valuetype System.Security.Permissions.IsolatedStorageContainment 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.IsolatedStorageContainment get_UsageAllowed()
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.IsolatedStorageContainment UsageAllowed()
		{
			.get instance valuetype System.Security.Permissions.IsolatedStorageContainment System.Security.Permissions.IsolatedStoragePermissionAttribute::get_UsageAllowed()
			.set instance void System.Security.Permissions.IsolatedStoragePermissionAttribute::set_UsageAllowed(valuetype System.Security.Permissions.IsolatedStorageContainment)
		}
		.property instance int64 UserQuota()
		{
			.get instance int64 System.Security.Permissions.IsolatedStoragePermissionAttribute::get_UserQuota()
			.set instance void System.Security.Permissions.IsolatedStoragePermissionAttribute::set_UserQuota(int64)
		}
	}
	.class public sealed serializable PermissionSetAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_File()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_File(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UnicodeEncoded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UnicodeEncoded(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XML()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XML(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Hex()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Hex(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.PermissionSet CreatePermissionSet()
		{
			ret
		}
		.property instance string File()
		{
			.get instance string System.Security.Permissions.PermissionSetAttribute::get_File()
			.set instance void System.Security.Permissions.PermissionSetAttribute::set_File(string)
		}
		.property instance string Hex()
		{
			.get instance string System.Security.Permissions.PermissionSetAttribute::get_Hex()
			.set instance void System.Security.Permissions.PermissionSetAttribute::set_Hex(string)
		}
		.property instance string Name()
		{
			.get instance string System.Security.Permissions.PermissionSetAttribute::get_Name()
			.set instance void System.Security.Permissions.PermissionSetAttribute::set_Name(string)
		}
		.property instance bool UnicodeEncoded()
		{
			.get instance bool System.Security.Permissions.PermissionSetAttribute::get_UnicodeEncoded()
			.set instance void System.Security.Permissions.PermissionSetAttribute::set_UnicodeEncoded(bool)
		}
		.property instance string XML()
		{
			.get instance string System.Security.Permissions.PermissionSetAttribute::get_XML()
			.set instance void System.Security.Permissions.PermissionSetAttribute::set_XML(string)
		}
	}
	.class public sealed serializable PermissionState
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.PermissionState None = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.PermissionState Unrestricted = int32(0x00000001)
	}
	.class public sealed serializable PrincipalPermission
		extends System.Object
		implements System.Security.IPermission, System.Security.Permissions.IUnrestrictedPermission, System.Security.ISecurityEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, string role)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, string role, bool isAuthenticated)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission Union(class System.Security.IPermission other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Demand()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement elem)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public sealed serializable PrincipalPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 44 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Role()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Role(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Authenticated()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Authenticated(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance bool Authenticated()
		{
			.get instance bool System.Security.Permissions.PrincipalPermissionAttribute::get_Authenticated()
			.set instance void System.Security.Permissions.PrincipalPermissionAttribute::set_Authenticated(bool)
		}
		.property instance string Name()
		{
			.get instance string System.Security.Permissions.PrincipalPermissionAttribute::get_Name()
			.set instance void System.Security.Permissions.PrincipalPermissionAttribute::set_Name(string)
		}
		.property instance string Role()
		{
			.get instance string System.Security.Permissions.PrincipalPermissionAttribute::get_Role()
			.set instance void System.Security.Permissions.PrincipalPermissionAttribute::set_Role(string)
		}
	}
	.class public sealed serializable ReflectionPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.ReflectionPermissionFlag flag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype System.Security.Permissions.ReflectionPermissionFlag 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.ReflectionPermissionFlag get_Flags()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission other)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.ReflectionPermissionFlag Flags()
		{
			.get instance valuetype System.Security.Permissions.ReflectionPermissionFlag System.Security.Permissions.ReflectionPermission::get_Flags()
			.set instance void System.Security.Permissions.ReflectionPermission::set_Flags(valuetype System.Security.Permissions.ReflectionPermissionFlag)
		}
	}
	.class public sealed serializable ReflectionPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.ReflectionPermissionFlag get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype System.Security.Permissions.ReflectionPermissionFlag 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_TypeInformation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeInformation(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_MemberAccess()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MemberAccess(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ReflectionEmit()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ReflectionEmit(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.ReflectionPermissionFlag Flags()
		{
			.get instance valuetype System.Security.Permissions.ReflectionPermissionFlag System.Security.Permissions.ReflectionPermissionAttribute::get_Flags()
			.set instance void System.Security.Permissions.ReflectionPermissionAttribute::set_Flags(valuetype System.Security.Permissions.ReflectionPermissionFlag)
		}
		.property instance bool MemberAccess()
		{
			.get instance bool System.Security.Permissions.ReflectionPermissionAttribute::get_MemberAccess()
			.set instance void System.Security.Permissions.ReflectionPermissionAttribute::set_MemberAccess(bool)
		}
		.property instance bool ReflectionEmit()
		{
			.get instance bool System.Security.Permissions.ReflectionPermissionAttribute::get_ReflectionEmit()
			.set instance void System.Security.Permissions.ReflectionPermissionAttribute::set_ReflectionEmit(bool)
		}
		.property instance bool TypeInformation()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 4A 54 68 69 73 20 41 50 49 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance bool System.Security.Permissions.ReflectionPermissionAttribute::get_TypeInformation()
			.set instance void System.Security.Permissions.ReflectionPermissionAttribute::set_TypeInformation(bool)
		}
	}
	.class public sealed serializable ReflectionPermissionFlag
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.ReflectionPermissionFlag AllFlags = int32(0x00000007)
		.field static public literal valuetype System.Security.Permissions.ReflectionPermissionFlag MemberAccess = int32(0x00000002)
		.field static public literal valuetype System.Security.Permissions.ReflectionPermissionFlag NoFlags = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.ReflectionPermissionFlag ReflectionEmit = int32(0x00000004)
		.field static public literal valuetype System.Security.Permissions.ReflectionPermissionFlag TypeInformation = int32(0x00000001)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 4A 54 68 69 73 20 41 50 49 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
	}
	.class public sealed serializable SecurityAction
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.SecurityAction Assert = int32(0x00000003)
		.field static public literal valuetype System.Security.Permissions.SecurityAction Demand = int32(0x00000002)
		.field static public literal valuetype System.Security.Permissions.SecurityAction Deny = int32(0x00000004)
		.field static public literal valuetype System.Security.Permissions.SecurityAction InheritanceDemand = int32(0x00000007)
		.field static public literal valuetype System.Security.Permissions.SecurityAction LinkDemand = int32(0x00000006)
		.field static public literal valuetype System.Security.Permissions.SecurityAction PermitOnly = int32(0x00000005)
		.field static public literal valuetype System.Security.Permissions.SecurityAction RequestMinimum = int32(0x00000008)
		.field static public literal valuetype System.Security.Permissions.SecurityAction RequestOptional = int32(0x00000009)
		.field static public literal valuetype System.Security.Permissions.SecurityAction RequestRefuse = int32(0x0000000A)
	}
	.class public abstract serializable SecurityAttribute
		extends System.Attribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.SecurityAction get_Action()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Action(valuetype System.Security.Permissions.SecurityAction 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Unrestricted()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Unrestricted(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission CreatePermission()
		{
		}
		.property instance valuetype System.Security.Permissions.SecurityAction Action()
		{
			.get instance valuetype System.Security.Permissions.SecurityAction System.Security.Permissions.SecurityAttribute::get_Action()
			.set instance void System.Security.Permissions.SecurityAttribute::set_Action(valuetype System.Security.Permissions.SecurityAction)
		}
		.property instance bool Unrestricted()
		{
			.get instance bool System.Security.Permissions.SecurityAttribute::get_Unrestricted()
			.set instance void System.Security.Permissions.SecurityAttribute::set_Unrestricted(bool)
		}
	}
	.class public sealed serializable SecurityPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityPermissionFlag flag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype System.Security.Permissions.SecurityPermissionFlag 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.SecurityPermissionFlag get_Flags()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.SecurityPermissionFlag Flags()
		{
			.get instance valuetype System.Security.Permissions.SecurityPermissionFlag System.Security.Permissions.SecurityPermission::get_Flags()
			.set instance void System.Security.Permissions.SecurityPermission::set_Flags(valuetype System.Security.Permissions.SecurityPermissionFlag)
		}
	}
	.class public sealed serializable SecurityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.SecurityPermissionFlag get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype System.Security.Permissions.SecurityPermissionFlag 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Assertion()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Assertion(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UnmanagedCode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UnmanagedCode(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SkipVerification()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SkipVerification(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Execution()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Execution(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlThread()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlThread(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlEvidence()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlEvidence(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlPolicy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlPolicy(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SerializationFormatter()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SerializationFormatter(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlDomainPolicy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlDomainPolicy(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlPrincipal()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlPrincipal(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ControlAppDomain()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ControlAppDomain(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_RemotingConfiguration()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_RemotingConfiguration(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Infrastructure()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Infrastructure(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_BindingRedirects()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_BindingRedirects(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance bool Assertion()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_Assertion()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_Assertion(bool)
		}
		.property instance bool BindingRedirects()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_BindingRedirects()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_BindingRedirects(bool)
		}
		.property instance bool ControlAppDomain()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlAppDomain()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlAppDomain(bool)
		}
		.property instance bool ControlDomainPolicy()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlDomainPolicy()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlDomainPolicy(bool)
		}
		.property instance bool ControlEvidence()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlEvidence()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlEvidence(bool)
		}
		.property instance bool ControlPolicy()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlPolicy()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlPolicy(bool)
		}
		.property instance bool ControlPrincipal()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlPrincipal()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlPrincipal(bool)
		}
		.property instance bool ControlThread()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_ControlThread()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_ControlThread(bool)
		}
		.property instance bool Execution()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_Execution()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_Execution(bool)
		}
		.property instance valuetype System.Security.Permissions.SecurityPermissionFlag Flags()
		{
			.get instance valuetype System.Security.Permissions.SecurityPermissionFlag System.Security.Permissions.SecurityPermissionAttribute::get_Flags()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_Flags(valuetype System.Security.Permissions.SecurityPermissionFlag)
		}
		.property instance bool Infrastructure()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_Infrastructure()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_Infrastructure(bool)
		}
		.property instance bool RemotingConfiguration()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_RemotingConfiguration()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_RemotingConfiguration(bool)
		}
		.property instance bool SerializationFormatter()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_SerializationFormatter()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_SerializationFormatter(bool)
		}
		.property instance bool SkipVerification()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_SkipVerification()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_SkipVerification(bool)
		}
		.property instance bool UnmanagedCode()
		{
			.get instance bool System.Security.Permissions.SecurityPermissionAttribute::get_UnmanagedCode()
			.set instance void System.Security.Permissions.SecurityPermissionAttribute::set_UnmanagedCode(bool)
		}
	}
	.class public sealed serializable SecurityPermissionFlag
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag AllFlags = int32(0x00003FFF)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag Assertion = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag BindingRedirects = int32(0x00002000)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlAppDomain = int32(0x00000400)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlDomainPolicy = int32(0x00000100)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlEvidence = int32(0x00000020)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlPolicy = int32(0x00000040)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlPrincipal = int32(0x00000200)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag ControlThread = int32(0x00000010)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag Execution = int32(0x00000008)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag Infrastructure = int32(0x00001000)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag NoFlags = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag RemotingConfiguration = int32(0x00000800)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag SerializationFormatter = int32(0x00000080)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag SkipVerification = int32(0x00000004)
		.field static public literal valuetype System.Security.Permissions.SecurityPermissionFlag UnmanagedCode = int32(0x00000002)
	}
	.class public sealed serializable SiteIdentityPermission
		extends System.Security.CodeAccessPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string site)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Site(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Site()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.property instance string Site()
		{
			.get instance string System.Security.Permissions.SiteIdentityPermission::get_Site()
			.set instance void System.Security.Permissions.SiteIdentityPermission::set_Site(string)
		}
	}
	.class public sealed serializable SiteIdentityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Site()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Site(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance string Site()
		{
			.get instance string System.Security.Permissions.SiteIdentityPermissionAttribute::get_Site()
			.set instance void System.Security.Permissions.SiteIdentityPermissionAttribute::set_Site(string)
		}
	}
	.class public sealed serializable StrongNameIdentityPermission
		extends System.Security.CodeAccessPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Permissions.StrongNamePublicKeyBlob 'blob', string name, class System.Version version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PublicKey(class System.Security.Permissions.StrongNamePublicKeyBlob 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Permissions.StrongNamePublicKeyBlob get_PublicKey()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Version(class System.Version 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Security.Permissions.StrongNameIdentityPermission::get_Name()
			.set instance void System.Security.Permissions.StrongNameIdentityPermission::set_Name(string)
		}
		.property instance class System.Security.Permissions.StrongNamePublicKeyBlob PublicKey()
		{
			.get instance class System.Security.Permissions.StrongNamePublicKeyBlob System.Security.Permissions.StrongNameIdentityPermission::get_PublicKey()
			.set instance void System.Security.Permissions.StrongNameIdentityPermission::set_PublicKey(class System.Security.Permissions.StrongNamePublicKeyBlob)
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.Security.Permissions.StrongNameIdentityPermission::get_Version()
			.set instance void System.Security.Permissions.StrongNameIdentityPermission::set_Version(class System.Version)
		}
	}
	.class public sealed serializable StrongNameIdentityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Version()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Version(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_PublicKey()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PublicKey(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Security.Permissions.StrongNameIdentityPermissionAttribute::get_Name()
			.set instance void System.Security.Permissions.StrongNameIdentityPermissionAttribute::set_Name(string)
		}
		.property instance string PublicKey()
		{
			.get instance string System.Security.Permissions.StrongNameIdentityPermissionAttribute::get_PublicKey()
			.set instance void System.Security.Permissions.StrongNameIdentityPermissionAttribute::set_PublicKey(string)
		}
		.property instance string Version()
		{
			.get instance string System.Security.Permissions.StrongNameIdentityPermissionAttribute::get_Version()
			.set instance void System.Security.Permissions.StrongNameIdentityPermissionAttribute::set_Version(string)
		}
	}
	.class public sealed serializable StrongNamePublicKeyBlob
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(uint8[] publicKey)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public sealed serializable UIPermission
		extends System.Security.CodeAccessPermission
		implements System.Security.Permissions.IUnrestrictedPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.UIPermissionWindow windowFlag, valuetype System.Security.Permissions.UIPermissionClipboard clipboardFlag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.UIPermissionWindow windowFlag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.UIPermissionClipboard clipboardFlag)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Window(valuetype System.Security.Permissions.UIPermissionWindow 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.UIPermissionWindow get_Window()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Clipboard(valuetype System.Security.Permissions.UIPermissionClipboard 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.UIPermissionClipboard get_Clipboard()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool IsUnrestricted()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.UIPermissionClipboard Clipboard()
		{
			.get instance valuetype System.Security.Permissions.UIPermissionClipboard System.Security.Permissions.UIPermission::get_Clipboard()
			.set instance void System.Security.Permissions.UIPermission::set_Clipboard(valuetype System.Security.Permissions.UIPermissionClipboard)
		}
		.property instance valuetype System.Security.Permissions.UIPermissionWindow Window()
		{
			.get instance valuetype System.Security.Permissions.UIPermissionWindow System.Security.Permissions.UIPermission::get_Window()
			.set instance void System.Security.Permissions.UIPermission::set_Window(valuetype System.Security.Permissions.UIPermissionWindow)
		}
	}
	.class public sealed serializable UIPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.UIPermissionWindow get_Window()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Window(valuetype System.Security.Permissions.UIPermissionWindow 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Permissions.UIPermissionClipboard get_Clipboard()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Clipboard(valuetype System.Security.Permissions.UIPermissionClipboard 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance valuetype System.Security.Permissions.UIPermissionClipboard Clipboard()
		{
			.get instance valuetype System.Security.Permissions.UIPermissionClipboard System.Security.Permissions.UIPermissionAttribute::get_Clipboard()
			.set instance void System.Security.Permissions.UIPermissionAttribute::set_Clipboard(valuetype System.Security.Permissions.UIPermissionClipboard)
		}
		.property instance valuetype System.Security.Permissions.UIPermissionWindow Window()
		{
			.get instance valuetype System.Security.Permissions.UIPermissionWindow System.Security.Permissions.UIPermissionAttribute::get_Window()
			.set instance void System.Security.Permissions.UIPermissionAttribute::set_Window(valuetype System.Security.Permissions.UIPermissionWindow)
		}
	}
	.class public sealed serializable UIPermissionClipboard
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.UIPermissionClipboard AllClipboard = int32(0x00000002)
		.field static public literal valuetype System.Security.Permissions.UIPermissionClipboard NoClipboard = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.UIPermissionClipboard OwnClipboard = int32(0x00000001)
	}
	.class public sealed serializable UIPermissionWindow
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Permissions.UIPermissionWindow AllWindows = int32(0x00000003)
		.field static public literal valuetype System.Security.Permissions.UIPermissionWindow NoWindows = int32(0x00000000)
		.field static public literal valuetype System.Security.Permissions.UIPermissionWindow SafeSubWindows = int32(0x00000001)
		.field static public literal valuetype System.Security.Permissions.UIPermissionWindow SafeTopLevelWindows = int32(0x00000002)
	}
	.class public sealed serializable UrlIdentityPermission
		extends System.Security.CodeAccessPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string site)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Url(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.property instance string Url()
		{
			.get instance string System.Security.Permissions.UrlIdentityPermission::get_Url()
			.set instance void System.Security.Permissions.UrlIdentityPermission::set_Url(string)
		}
	}
	.class public sealed serializable UrlIdentityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Url(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance string Url()
		{
			.get instance string System.Security.Permissions.UrlIdentityPermissionAttribute::get_Url()
			.set instance void System.Security.Permissions.UrlIdentityPermissionAttribute::set_Url(string)
		}
	}
	.class public sealed serializable ZoneIdentityPermission
		extends System.Security.CodeAccessPermission
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.PermissionState state)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.SecurityZone zone)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SecurityZone(valuetype System.Security.SecurityZone 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityZone get_SecurityZone()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool IsSubsetOf(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Intersect(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission Union(class System.Security.IPermission target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void FromXml(class System.Security.SecurityElement esd)
		{
			ret
		}
		.property instance valuetype System.Security.SecurityZone SecurityZone()
		{
			.get instance valuetype System.Security.SecurityZone System.Security.Permissions.ZoneIdentityPermission::get_SecurityZone()
			.set instance void System.Security.Permissions.ZoneIdentityPermission::set_SecurityZone(valuetype System.Security.SecurityZone)
		}
	}
	.class public sealed serializable ZoneIdentityPermissionAttribute
		extends System.Security.Permissions.CodeAccessSecurityAttribute
	{
		.custom instance void System.AttributeUsageAttribute::.ctor(valuetype System.AttributeTargets) = (01 00 6D 00 00 00 02 00 54 02 0D 41 6C 6C 6F 77 4D 75 6C 74 69 70 6C 65 01 54 02 09 49 6E 68 65 72 69 74 65 64 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.Permissions.SecurityAction action)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityZone get_Zone()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Zone(valuetype System.Security.SecurityZone 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.IPermission CreatePermission()
		{
			ret
		}
		.property instance valuetype System.Security.SecurityZone Zone()
		{
			.get instance valuetype System.Security.SecurityZone System.Security.Permissions.ZoneIdentityPermissionAttribute::get_Zone()
			.set instance void System.Security.Permissions.ZoneIdentityPermissionAttribute::set_Zone(valuetype System.Security.SecurityZone)
		}
	}
}
.namespace System.Security.Policy
{
	.class public sealed serializable AllMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
	}
	.class public sealed serializable ApplicationDirectory
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Directory()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string Directory()
		{
			.get instance string System.Security.Policy.ApplicationDirectory::get_Directory()
		}
	}
	.class public sealed serializable ApplicationDirectoryMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public serializable CodeConnectAccess
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string allowScheme, int32 allowPort)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.CodeConnectAccess CreateOriginSchemeAccess(int32 allowPort)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.CodeConnectAccess CreateAnySchemeAccess(int32 allowPort)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Scheme()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Port()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.field static public initonly string AnyScheme
		.field static public initonly int32 DefaultPort
		.field static public initonly int32 OriginPort
		.field static public initonly string OriginScheme
		.property instance int32 Port()
		{
			.get instance int32 System.Security.Policy.CodeConnectAccess::get_Port()
		}
		.property instance string Scheme()
		{
			.get instance string System.Security.Policy.CodeConnectAccess::get_Scheme()
		}
	}
	.class public abstract serializable CodeGroup
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor(class System.Security.Policy.IMembershipCondition membershipCondition, class System.Security.Policy.PolicyStatement policy)
		{
			ret
		}
		.method public hidebysig 
			instance void AddChild(class System.Security.Policy.CodeGroup group)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveChild(class System.Security.Policy.CodeGroup group)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.IList get_Children()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Children(class System.Collections.IList 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Policy.IMembershipCondition get_MembershipCondition()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MembershipCondition(class System.Security.Policy.IMembershipCondition 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Policy.PolicyStatement get_PolicyStatement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PolicyStatement(class System.Security.Policy.PolicyStatement 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Description(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.Policy.CodeGroup Copy()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_PermissionSetName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_AttributeString()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_MergeLogic()
		{
		}
		.method public hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public hidebysig 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void CreateXml(class System.Security.SecurityElement element, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public hidebysig 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ParseXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(class System.Security.Policy.CodeGroup cg, bool compareChildren)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string AttributeString()
		{
			.get instance string System.Security.Policy.CodeGroup::get_AttributeString()
		}
		.property instance class System.Collections.IList Children()
		{
			.get instance class System.Collections.IList System.Security.Policy.CodeGroup::get_Children()
			.set instance void System.Security.Policy.CodeGroup::set_Children(class System.Collections.IList)
		}
		.property instance string Description()
		{
			.get instance string System.Security.Policy.CodeGroup::get_Description()
			.set instance void System.Security.Policy.CodeGroup::set_Description(string)
		}
		.property instance class System.Security.Policy.IMembershipCondition MembershipCondition()
		{
			.get instance class System.Security.Policy.IMembershipCondition System.Security.Policy.CodeGroup::get_MembershipCondition()
			.set instance void System.Security.Policy.CodeGroup::set_MembershipCondition(class System.Security.Policy.IMembershipCondition)
		}
		.property instance string MergeLogic()
		{
			.get instance string System.Security.Policy.CodeGroup::get_MergeLogic()
		}
		.property instance string Name()
		{
			.get instance string System.Security.Policy.CodeGroup::get_Name()
			.set instance void System.Security.Policy.CodeGroup::set_Name(string)
		}
		.property instance string PermissionSetName()
		{
			.get instance string System.Security.Policy.CodeGroup::get_PermissionSetName()
		}
		.property instance class System.Security.Policy.PolicyStatement PolicyStatement()
		{
			.get instance class System.Security.Policy.PolicyStatement System.Security.Policy.CodeGroup::get_PolicyStatement()
			.set instance void System.Security.Policy.CodeGroup::set_PolicyStatement(class System.Security.Policy.PolicyStatement)
		}
	}
	.class public sealed serializable Evidence
		extends System.Object
		implements System.Collections.ICollection, System.Collections.IEnumerable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object[] hostEvidence, object[] assemblyEvidence)
		{
			ret
		}
		.method public hidebysig 
			instance void AddHost(object id)
		{
			ret
		}
		.method public hidebysig 
			instance void AddAssembly(object id)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Locked()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Locked(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void Merge(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void CopyTo(class System.Array 'array', int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.IEnumerator GetHostEnumerator()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Collections.IEnumerator GetAssemblyEnumerator()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_SyncRoot()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSynchronized()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public hidebysig 
			instance void Clear()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void RemoveType(class System.Type t)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance int32 Count()
		{
			.get instance int32 System.Security.Policy.Evidence::get_Count()
		}
		.property instance bool IsReadOnly()
		{
			.get instance bool System.Security.Policy.Evidence::get_IsReadOnly()
		}
		.property instance bool IsSynchronized()
		{
			.get instance bool System.Security.Policy.Evidence::get_IsSynchronized()
		}
		.property instance bool Locked()
		{
			.get instance bool System.Security.Policy.Evidence::get_Locked()
			.set instance void System.Security.Policy.Evidence::set_Locked(bool)
		}
		.property instance object SyncRoot()
		{
			.get instance object System.Security.Policy.Evidence::get_SyncRoot()
		}
	}
	.class public sealed serializable FileCodeGroup
		extends System.Security.Policy.CodeGroup
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Policy.IMembershipCondition membershipCondition, valuetype System.Security.Permissions.FileIOPermissionAccess access)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup Copy()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_MergeLogic()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_PermissionSetName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AttributeString()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void CreateXml(class System.Security.SecurityElement element, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void ParseXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string AttributeString()
		{
			.get instance string System.Security.Policy.FileCodeGroup::get_AttributeString()
		}
		.property instance string MergeLogic()
		{
			.get instance string System.Security.Policy.FileCodeGroup::get_MergeLogic()
		}
		.property instance string PermissionSetName()
		{
			.get instance string System.Security.Policy.FileCodeGroup::get_PermissionSetName()
		}
	}
	.class public sealed serializable FirstMatchCodeGroup
		extends System.Security.Policy.CodeGroup
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Policy.IMembershipCondition membershipCondition, class System.Security.Policy.PolicyStatement policy)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup Copy()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_MergeLogic()
		{
			ret
		}
		.property instance string MergeLogic()
		{
			.get instance string System.Security.Policy.FirstMatchCodeGroup::get_MergeLogic()
		}
	}
	.class public sealed serializable GacInstalled
		extends System.Object
		implements System.Security.Policy.IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public sealed serializable GacMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
	}
	.class public interface abstract IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
		}
	}
	.class public interface abstract IMembershipCondition
		implements System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance string ToString()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Equals(object obj)
		{
		}
	}
	.class public sealed serializable NetCodeGroup
		extends System.Security.Policy.CodeGroup
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Policy.IMembershipCondition membershipCondition)
		{
			ret
		}
		.method public hidebysig 
			instance void ResetConnectAccess()
		{
			ret
		}
		.method public hidebysig 
			instance void AddConnectAccess(string originScheme, class System.Security.Policy.CodeConnectAccess connectAccess)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Collections.DictionaryEntry[] GetConnectAccessRules()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup Copy()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_MergeLogic()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_PermissionSetName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_AttributeString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void CreateXml(class System.Security.SecurityElement element, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void ParseXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.field static public initonly string AbsentOriginScheme
		.field static public initonly string AnyOtherOriginScheme
		.property instance string AttributeString()
		{
			.get instance string System.Security.Policy.NetCodeGroup::get_AttributeString()
		}
		.property instance string MergeLogic()
		{
			.get instance string System.Security.Policy.NetCodeGroup::get_MergeLogic()
		}
		.property instance string PermissionSetName()
		{
			.get instance string System.Security.Policy.NetCodeGroup::get_PermissionSetName()
		}
	}
	.class public sealed serializable PermissionRequestEvidence
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.PermissionSet 'request', class System.Security.PermissionSet optional, class System.Security.PermissionSet denied)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.PermissionSet get_RequestedPermissions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.PermissionSet get_OptionalPermissions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.PermissionSet get_DeniedPermissions()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.Policy.PermissionRequestEvidence Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class System.Security.PermissionSet DeniedPermissions()
		{
			.get instance class System.Security.PermissionSet System.Security.Policy.PermissionRequestEvidence::get_DeniedPermissions()
		}
		.property instance class System.Security.PermissionSet OptionalPermissions()
		{
			.get instance class System.Security.PermissionSet System.Security.Policy.PermissionRequestEvidence::get_OptionalPermissions()
		}
		.property instance class System.Security.PermissionSet RequestedPermissions()
		{
			.get instance class System.Security.PermissionSet System.Security.Policy.PermissionRequestEvidence::get_RequestedPermissions()
		}
	}
	.class public serializable PolicyException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception exception)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed serializable PolicyLevel
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			class System.Security.Policy.PolicyLevel CreateAppDomainLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Label()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.PolicyLevelType get_Type()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_StoreLocation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Policy.CodeGroup get_RootCodeGroup()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_RootCodeGroup(class System.Security.Policy.CodeGroup 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.IList get_NamedPermissionSets()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig 
			instance void AddFullTrustAssembly(class System.Security.Policy.StrongName sn)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 C8 42 65 63 61 75 73 65 20 61 6C 6C 20 47 41 43 20 61 73 73 65 6D 62 6C 69 65 73 20 61 6C 77 61 79 73 20 67 65 74 20 66 75 6C 6C 20 74 72 75 73 74 2C 20 74 68 65 20 66 75 6C 6C 20 74 72 75 73 74 20 6C 69 73 74 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 6D 65 61 6E 69 6E 67 66 75 6C 2E 20 59 6F 75 20 73 68 6F 75 6C 64 20 69 6E 73 74 61 6C 6C 20 61 6E 79 20 61 73 73 65 6D 62 6C 69 65 73 20 74 68 61 74 20 61 72 65 20 75 73 65 64 20 69 6E 20 73 65 63 75 72 69 74 79 20 70 6F 6C 69 63 79 20 69 6E 20 74 68 65 20 47 41 43 20 74 6F 20 65 6E 73 75 72 65 20 74 68 65 79 20 61 72 65 20 74 72 75 73 74 65 64 2E 00 00)
			ret
		}
		.method public hidebysig 
			instance void AddFullTrustAssembly(class System.Security.Policy.StrongNameMembershipCondition snMC)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 C8 42 65 63 61 75 73 65 20 61 6C 6C 20 47 41 43 20 61 73 73 65 6D 62 6C 69 65 73 20 61 6C 77 61 79 73 20 67 65 74 20 66 75 6C 6C 20 74 72 75 73 74 2C 20 74 68 65 20 66 75 6C 6C 20 74 72 75 73 74 20 6C 69 73 74 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 6D 65 61 6E 69 6E 67 66 75 6C 2E 20 59 6F 75 20 73 68 6F 75 6C 64 20 69 6E 73 74 61 6C 6C 20 61 6E 79 20 61 73 73 65 6D 62 6C 69 65 73 20 74 68 61 74 20 61 72 65 20 75 73 65 64 20 69 6E 20 73 65 63 75 72 69 74 79 20 70 6F 6C 69 63 79 20 69 6E 20 74 68 65 20 47 41 43 20 74 6F 20 65 6E 73 75 72 65 20 74 68 65 79 20 61 72 65 20 74 72 75 73 74 65 64 2E 00 00)
			ret
		}
		.method public hidebysig 
			instance void RemoveFullTrustAssembly(class System.Security.Policy.StrongName sn)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 C8 42 65 63 61 75 73 65 20 61 6C 6C 20 47 41 43 20 61 73 73 65 6D 62 6C 69 65 73 20 61 6C 77 61 79 73 20 67 65 74 20 66 75 6C 6C 20 74 72 75 73 74 2C 20 74 68 65 20 66 75 6C 6C 20 74 72 75 73 74 20 6C 69 73 74 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 6D 65 61 6E 69 6E 67 66 75 6C 2E 20 59 6F 75 20 73 68 6F 75 6C 64 20 69 6E 73 74 61 6C 6C 20 61 6E 79 20 61 73 73 65 6D 62 6C 69 65 73 20 74 68 61 74 20 61 72 65 20 75 73 65 64 20 69 6E 20 73 65 63 75 72 69 74 79 20 70 6F 6C 69 63 79 20 69 6E 20 74 68 65 20 47 41 43 20 74 6F 20 65 6E 73 75 72 65 20 74 68 65 79 20 61 72 65 20 74 72 75 73 74 65 64 2E 00 00)
			ret
		}
		.method public hidebysig 
			instance void RemoveFullTrustAssembly(class System.Security.Policy.StrongNameMembershipCondition snMC)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 C8 42 65 63 61 75 73 65 20 61 6C 6C 20 47 41 43 20 61 73 73 65 6D 62 6C 69 65 73 20 61 6C 77 61 79 73 20 67 65 74 20 66 75 6C 6C 20 74 72 75 73 74 2C 20 74 68 65 20 66 75 6C 6C 20 74 72 75 73 74 20 6C 69 73 74 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 6D 65 61 6E 69 6E 67 66 75 6C 2E 20 59 6F 75 20 73 68 6F 75 6C 64 20 69 6E 73 74 61 6C 6C 20 61 6E 79 20 61 73 73 65 6D 62 6C 69 65 73 20 74 68 61 74 20 61 72 65 20 75 73 65 64 20 69 6E 20 73 65 63 75 72 69 74 79 20 70 6F 6C 69 63 79 20 69 6E 20 74 68 65 20 47 41 43 20 74 6F 20 65 6E 73 75 72 65 20 74 68 65 79 20 61 72 65 20 74 72 75 73 74 65 64 2E 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.Collections.IList get_FullTrustAssemblies()
		{
			ret
		}
		.method public hidebysig 
			instance void AddNamedPermissionSet(class System.Security.NamedPermissionSet permSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.NamedPermissionSet RemoveNamedPermissionSet(class System.Security.NamedPermissionSet permSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.NamedPermissionSet RemoveNamedPermissionSet(string name)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.NamedPermissionSet ChangeNamedPermissionSet(string name, class System.Security.PermissionSet pSet)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.NamedPermissionSet GetNamedPermissionSet(string name)
		{
			ret
		}
		.method public hidebysig 
			instance void Recover()
		{
			ret
		}
		.method public hidebysig 
			instance void Reset()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public hidebysig 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.property instance class System.Collections.IList FullTrustAssemblies()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 C8 42 65 63 61 75 73 65 20 61 6C 6C 20 47 41 43 20 61 73 73 65 6D 62 6C 69 65 73 20 61 6C 77 61 79 73 20 67 65 74 20 66 75 6C 6C 20 74 72 75 73 74 2C 20 74 68 65 20 66 75 6C 6C 20 74 72 75 73 74 20 6C 69 73 74 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 6D 65 61 6E 69 6E 67 66 75 6C 2E 20 59 6F 75 20 73 68 6F 75 6C 64 20 69 6E 73 74 61 6C 6C 20 61 6E 79 20 61 73 73 65 6D 62 6C 69 65 73 20 74 68 61 74 20 61 72 65 20 75 73 65 64 20 69 6E 20 73 65 63 75 72 69 74 79 20 70 6F 6C 69 63 79 20 69 6E 20 74 68 65 20 47 41 43 20 74 6F 20 65 6E 73 75 72 65 20 74 68 65 79 20 61 72 65 20 74 72 75 73 74 65 64 2E 00 00)
			.get instance class System.Collections.IList System.Security.Policy.PolicyLevel::get_FullTrustAssemblies()
		}
		.property instance string Label()
		{
			.get instance string System.Security.Policy.PolicyLevel::get_Label()
		}
		.property instance class System.Collections.IList NamedPermissionSets()
		{
			.get instance class System.Collections.IList System.Security.Policy.PolicyLevel::get_NamedPermissionSets()
		}
		.property instance class System.Security.Policy.CodeGroup RootCodeGroup()
		{
			.get instance class System.Security.Policy.CodeGroup System.Security.Policy.PolicyLevel::get_RootCodeGroup()
			.set instance void System.Security.Policy.PolicyLevel::set_RootCodeGroup(class System.Security.Policy.CodeGroup)
		}
		.property instance string StoreLocation()
		{
			.get instance string System.Security.Policy.PolicyLevel::get_StoreLocation()
		}
		.property instance valuetype System.Security.PolicyLevelType Type()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype System.Security.PolicyLevelType System.Security.Policy.PolicyLevel::get_Type()
		}
	}
	.class public sealed serializable PolicyStatement
		extends System.Object
		implements System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.PermissionSet permSet)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.PermissionSet permSet, valuetype System.Security.Policy.PolicyStatementAttribute attributes)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.PermissionSet get_PermissionSet()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PermissionSet(class System.Security.PermissionSet 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.Policy.PolicyStatementAttribute get_Attributes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Attributes(valuetype System.Security.Policy.PolicyStatementAttribute 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Security.Policy.PolicyStatement Copy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_AttributeString()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement et)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement et, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance string AttributeString()
		{
			.get instance string System.Security.Policy.PolicyStatement::get_AttributeString()
		}
		.property instance valuetype System.Security.Policy.PolicyStatementAttribute Attributes()
		{
			.get instance valuetype System.Security.Policy.PolicyStatementAttribute System.Security.Policy.PolicyStatement::get_Attributes()
			.set instance void System.Security.Policy.PolicyStatement::set_Attributes(valuetype System.Security.Policy.PolicyStatementAttribute)
		}
		.property instance class System.Security.PermissionSet PermissionSet()
		{
			.get instance class System.Security.PermissionSet System.Security.Policy.PolicyStatement::get_PermissionSet()
			.set instance void System.Security.Policy.PolicyStatement::set_PermissionSet(class System.Security.PermissionSet)
		}
	}
	.class public sealed serializable PolicyStatementAttribute
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Policy.PolicyStatementAttribute All = int32(0x00000003)
		.field static public literal valuetype System.Security.Policy.PolicyStatementAttribute Exclusive = int32(0x00000001)
		.field static public literal valuetype System.Security.Policy.PolicyStatementAttribute LevelFinal = int32(0x00000002)
		.field static public literal valuetype System.Security.Policy.PolicyStatementAttribute Nothing = int32(0x00000000)
	}
	.class public sealed serializable Site
		extends System.Object
		implements System.Security.Policy.IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.Site CreateFromUrl(string url)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Security.Policy.Site::get_Name()
		}
	}
	.class public sealed serializable SiteMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string site)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Site(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Site()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string Site()
		{
			.get instance string System.Security.Policy.SiteMembershipCondition::get_Site()
			.set instance void System.Security.Policy.SiteMembershipCondition::set_Site(string)
		}
	}
	.class public sealed serializable StrongName
		extends System.Object
		implements System.Security.Policy.IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Permissions.StrongNamePublicKeyBlob 'blob', string name, class System.Version version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Permissions.StrongNamePublicKeyBlob get_PublicKey()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Security.Policy.StrongName::get_Name()
		}
		.property instance class System.Security.Permissions.StrongNamePublicKeyBlob PublicKey()
		{
			.get instance class System.Security.Permissions.StrongNamePublicKeyBlob System.Security.Policy.StrongName::get_PublicKey()
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.Security.Policy.StrongName::get_Version()
		}
	}
	.class public sealed serializable StrongNameMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Permissions.StrongNamePublicKeyBlob 'blob', string name, class System.Version version)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PublicKey(class System.Security.Permissions.StrongNamePublicKeyBlob 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Security.Permissions.StrongNamePublicKeyBlob get_PublicKey()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Version(class System.Version 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Version get_Version()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string Name()
		{
			.get instance string System.Security.Policy.StrongNameMembershipCondition::get_Name()
			.set instance void System.Security.Policy.StrongNameMembershipCondition::set_Name(string)
		}
		.property instance class System.Security.Permissions.StrongNamePublicKeyBlob PublicKey()
		{
			.get instance class System.Security.Permissions.StrongNamePublicKeyBlob System.Security.Policy.StrongNameMembershipCondition::get_PublicKey()
			.set instance void System.Security.Policy.StrongNameMembershipCondition::set_PublicKey(class System.Security.Permissions.StrongNamePublicKeyBlob)
		}
		.property instance class System.Version Version()
		{
			.get instance class System.Version System.Security.Policy.StrongNameMembershipCondition::get_Version()
			.set instance void System.Security.Policy.StrongNameMembershipCondition::set_Version(class System.Version)
		}
	}
	.class public sealed serializable UnionCodeGroup
		extends System.Security.Policy.CodeGroup
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Policy.IMembershipCondition membershipCondition, class System.Security.Policy.PolicyStatement policy)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.PolicyStatement Resolve(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup ResolveMatchingCodeGroups(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Security.Policy.CodeGroup Copy()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_MergeLogic()
		{
			ret
		}
		.property instance string MergeLogic()
		{
			.get instance string System.Security.Policy.UnionCodeGroup::get_MergeLogic()
		}
	}
	.class public sealed serializable Url
		extends System.Object
		implements System.Security.Policy.IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string Value()
		{
			.get instance string System.Security.Policy.Url::get_Value()
		}
	}
	.class public sealed serializable UrlMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string url)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Url(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string Url()
		{
			.get instance string System.Security.Policy.UrlMembershipCondition::get_Url()
			.set instance void System.Security.Policy.UrlMembershipCondition::set_Url(string)
		}
	}
	.class public sealed serializable Zone
		extends System.Object
		implements System.Security.Policy.IIdentityPermissionFactory
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.SecurityZone zone)
		{
			ret
		}
		.method public static hidebysig 
			class System.Security.Policy.Zone CreateFromUrl(string url)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.IPermission CreateIdentityPermission(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityZone get_SecurityZone()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public hidebysig 
			instance object Copy()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance valuetype System.Security.SecurityZone SecurityZone()
		{
			.get instance valuetype System.Security.SecurityZone System.Security.Policy.Zone::get_SecurityZone()
		}
	}
	.class public sealed serializable ZoneMembershipCondition
		extends System.Object
		implements System.Security.Policy.IMembershipCondition, System.Security.ISecurityEncodable, System.Security.ISecurityPolicyEncodable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Security.SecurityZone zone)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SecurityZone(valuetype System.Security.SecurityZone 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Security.SecurityZone get_SecurityZone()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance bool Check(class System.Security.Policy.Evidence evidence)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.Policy.IMembershipCondition Copy()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class System.Security.SecurityElement ToXml(class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void FromXml(class System.Security.SecurityElement e, class System.Security.Policy.PolicyLevel level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object o)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance valuetype System.Security.SecurityZone SecurityZone()
		{
			.get instance valuetype System.Security.SecurityZone System.Security.Policy.ZoneMembershipCondition::get_SecurityZone()
			.set instance void System.Security.Policy.ZoneMembershipCondition::set_SecurityZone(valuetype System.Security.SecurityZone)
		}
	}
}
.namespace System.Security.Principal
{
	.class public serializable GenericIdentity
		extends System.Object
		implements System.Security.Principal.IIdentity
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, string 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_AuthenticationType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsAuthenticated()
		{
			ret
		}
		.property instance string AuthenticationType()
		{
			.get instance string System.Security.Principal.GenericIdentity::get_AuthenticationType()
		}
		.property instance bool IsAuthenticated()
		{
			.get instance bool System.Security.Principal.GenericIdentity::get_IsAuthenticated()
		}
		.property instance string Name()
		{
			.get instance string System.Security.Principal.GenericIdentity::get_Name()
		}
	}
	.class public serializable GenericPrincipal
		extends System.Object
		implements System.Security.Principal.IPrincipal
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Security.Principal.IIdentity identity, string[] roles)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class System.Security.Principal.IIdentity get_Identity()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsInRole(string role)
		{
			ret
		}
		.property instance class System.Security.Principal.IIdentity Identity()
		{
			.get instance class System.Security.Principal.IIdentity System.Security.Principal.GenericPrincipal::get_Identity()
		}
	}
	.class public interface abstract IIdentity
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_Name()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance string get_AuthenticationType()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance bool get_IsAuthenticated()
		{
		}
		.property instance string AuthenticationType()
		{
			.get instance string System.Security.Principal.IIdentity::get_AuthenticationType()
		}
		.property instance bool IsAuthenticated()
		{
			.get instance bool System.Security.Principal.IIdentity::get_IsAuthenticated()
		}
		.property instance string Name()
		{
			.get instance string System.Security.Principal.IIdentity::get_Name()
		}
	}
	.class public interface abstract IPrincipal
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig newslot abstract specialname 
			instance class System.Security.Principal.IIdentity get_Identity()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsInRole(string role)
		{
		}
		.property instance class System.Security.Principal.IIdentity Identity()
		{
			.get instance class System.Security.Principal.IIdentity System.Security.Principal.IPrincipal::get_Identity()
		}
	}
	.class public sealed serializable PrincipalPolicy
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Security.Principal.PrincipalPolicy NoPrincipal = int32(0x00000001)
		.field static public literal valuetype System.Security.Principal.PrincipalPolicy UnauthenticatedPrincipal = int32(0x00000000)
	}
}
.namespace System.Text
{
	.class public serializable ASCIIEncoding
		extends System.Text.Encoding
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(string chars)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(string chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string GetString(uint8[] bytes, int32 byteIndex, int32 byteCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxByteCount(int32 charCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_IsSingleByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Decoder GetDecoder()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Encoder GetEncoder()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance bool IsSingleByte()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Text.ASCIIEncoding::get_IsSingleByte()
		}
	}
	.class public abstract serializable Decoder
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.DecoderFallback get_Fallback()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Fallback(class System.Text.DecoderFallback 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.DecoderFallbackBuffer get_FallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Reset()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count, bool flush)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetCharCount(uint8* bytes, int32 count, bool flush)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, bool flush)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Convert(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, int32 charCount, bool flush, [out] int32& bytesUsed, [out] int32& charsUsed, [out] bool& completed)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Convert(uint8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush, [out] int32& bytesUsed, [out] int32& charsUsed, [out] bool& completed)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance class System.Text.DecoderFallback Fallback()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.DecoderFallback System.Text.Decoder::get_Fallback()
			.set instance void System.Text.Decoder::set_Fallback(class System.Text.DecoderFallback)
		}
		.property instance class System.Text.DecoderFallbackBuffer FallbackBuffer()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.DecoderFallbackBuffer System.Text.Decoder::get_FallbackBuffer()
		}
	}
	.class public sealed serializable DecoderExceptionFallback
		extends System.Text.DecoderFallback
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.DecoderFallbackBuffer CreateFallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_MaxCharCount()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.DecoderExceptionFallback::get_MaxCharCount()
		}
	}
	.class public sealed DecoderExceptionFallbackBuffer
		extends System.Text.DecoderFallbackBuffer
	{
		.method public virtual hidebysig 
			instance bool Fallback(uint8[] bytesUnknown, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance char GetNextChar()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MovePrevious()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_Remaining()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.DecoderExceptionFallbackBuffer::get_Remaining()
		}
	}
	.class public abstract serializable DecoderFallback
		extends System.Object
	{
		.method public static hidebysig specialname 
			class System.Text.DecoderFallback get_ReplacementFallback()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.DecoderFallback get_ExceptionFallback()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Text.DecoderFallbackBuffer CreateFallbackBuffer()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_MaxCharCount()
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class System.Text.DecoderFallback ExceptionFallback()
		{
			.get class System.Text.DecoderFallback System.Text.DecoderFallback::get_ExceptionFallback()
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.DecoderFallback::get_MaxCharCount()
		}
		.property class System.Text.DecoderFallback ReplacementFallback()
		{
			.get class System.Text.DecoderFallback System.Text.DecoderFallback::get_ReplacementFallback()
		}
	}
	.class public abstract DecoderFallbackBuffer
		extends System.Object
	{
		.method public virtual hidebysig newslot abstract 
			instance bool Fallback(uint8[] bytesUnknown, int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance char GetNextChar()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool MovePrevious()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_Remaining()
		{
		}
		.method public virtual hidebysig newslot 
			instance void Reset()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.DecoderFallbackBuffer::get_Remaining()
		}
	}
	.class public sealed serializable DecoderFallbackException
		extends System.ArgumentException
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, uint8[] bytesUnknown, int32 index)
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint8[] get_BytesUnknown()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Index()
		{
			ret
		}
		.property instance uint8[] BytesUnknown()
		{
			.get instance uint8[] System.Text.DecoderFallbackException::get_BytesUnknown()
		}
		.property instance int32 Index()
		{
			.get instance int32 System.Text.DecoderFallbackException::get_Index()
		}
	}
	.class public sealed serializable DecoderReplacementFallback
		extends System.Text.DecoderFallback
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string replacement)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DefaultString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.DecoderFallbackBuffer CreateFallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_MaxCharCount()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string DefaultString()
		{
			.get instance string System.Text.DecoderReplacementFallback::get_DefaultString()
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.DecoderReplacementFallback::get_MaxCharCount()
		}
	}
	.class public sealed DecoderReplacementFallbackBuffer
		extends System.Text.DecoderFallbackBuffer
	{
		.method public hidebysig specialname 
			instance void .ctor(class System.Text.DecoderReplacementFallback fallback)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Fallback(uint8[] bytesUnknown, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance char GetNextChar()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MovePrevious()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_Remaining()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reset()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.DecoderReplacementFallbackBuffer::get_Remaining()
		}
	}
	.class public abstract serializable Encoder
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.EncoderFallback get_Fallback()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Fallback(class System.Text.EncoderFallback 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.EncoderFallbackBuffer get_FallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Reset()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count, bool flush)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetByteCount(char* chars, int32 count, bool flush)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex, bool flush)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount, bool flush)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Convert(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex, int32 byteCount, bool flush, [out] int32& charsUsed, [out] int32& bytesUsed, [out] bool& completed)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Convert(char* chars, int32 charCount, uint8* bytes, int32 byteCount, bool flush, [out] int32& charsUsed, [out] int32& bytesUsed, [out] bool& completed)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance class System.Text.EncoderFallback Fallback()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.EncoderFallback System.Text.Encoder::get_Fallback()
			.set instance void System.Text.Encoder::set_Fallback(class System.Text.EncoderFallback)
		}
		.property instance class System.Text.EncoderFallbackBuffer FallbackBuffer()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.EncoderFallbackBuffer System.Text.Encoder::get_FallbackBuffer()
		}
	}
	.class public sealed serializable EncoderExceptionFallback
		extends System.Text.EncoderFallback
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.EncoderFallbackBuffer CreateFallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_MaxCharCount()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.EncoderExceptionFallback::get_MaxCharCount()
		}
	}
	.class public sealed EncoderExceptionFallbackBuffer
		extends System.Text.EncoderFallbackBuffer
	{
		.method public virtual hidebysig 
			instance bool Fallback(char charUnknown, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance char GetNextChar()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MovePrevious()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_Remaining()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.EncoderExceptionFallbackBuffer::get_Remaining()
		}
	}
	.class public abstract serializable EncoderFallback
		extends System.Object
	{
		.method public static hidebysig specialname 
			class System.Text.EncoderFallback get_ReplacementFallback()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.EncoderFallback get_ExceptionFallback()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class System.Text.EncoderFallbackBuffer CreateFallbackBuffer()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_MaxCharCount()
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property class System.Text.EncoderFallback ExceptionFallback()
		{
			.get class System.Text.EncoderFallback System.Text.EncoderFallback::get_ExceptionFallback()
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.EncoderFallback::get_MaxCharCount()
		}
		.property class System.Text.EncoderFallback ReplacementFallback()
		{
			.get class System.Text.EncoderFallback System.Text.EncoderFallback::get_ReplacementFallback()
		}
	}
	.class public abstract EncoderFallbackBuffer
		extends System.Object
	{
		.method public virtual hidebysig newslot abstract 
			instance bool Fallback(char charUnknown, int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance char GetNextChar()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool MovePrevious()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_Remaining()
		{
		}
		.method public virtual hidebysig newslot 
			instance void Reset()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.EncoderFallbackBuffer::get_Remaining()
		}
	}
	.class public sealed serializable EncoderFallbackException
		extends System.ArgumentException
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_CharUnknown()
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_CharUnknownHigh()
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_CharUnknownLow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Index()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsUnknownSurrogate()
		{
			ret
		}
		.property instance char CharUnknown()
		{
			.get instance char System.Text.EncoderFallbackException::get_CharUnknown()
		}
		.property instance char CharUnknownHigh()
		{
			.get instance char System.Text.EncoderFallbackException::get_CharUnknownHigh()
		}
		.property instance char CharUnknownLow()
		{
			.get instance char System.Text.EncoderFallbackException::get_CharUnknownLow()
		}
		.property instance int32 Index()
		{
			.get instance int32 System.Text.EncoderFallbackException::get_Index()
		}
	}
	.class public sealed serializable EncoderReplacementFallback
		extends System.Text.EncoderFallback
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string replacement)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DefaultString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.EncoderFallbackBuffer CreateFallbackBuffer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_MaxCharCount()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance string DefaultString()
		{
			.get instance string System.Text.EncoderReplacementFallback::get_DefaultString()
		}
		.property instance int32 MaxCharCount()
		{
			.get instance int32 System.Text.EncoderReplacementFallback::get_MaxCharCount()
		}
	}
	.class public sealed EncoderReplacementFallbackBuffer
		extends System.Text.EncoderFallbackBuffer
	{
		.method public hidebysig specialname 
			instance void .ctor(class System.Text.EncoderReplacementFallback fallback)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Fallback(char charUnknown, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Fallback(char charUnknownHigh, char charUnknownLow, int32 index)
		{
			ret
		}
		.method public virtual hidebysig 
			instance char GetNextChar()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MovePrevious()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_Remaining()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reset()
		{
			ret
		}
		.property instance int32 Remaining()
		{
			.get instance int32 System.Text.EncoderReplacementFallbackBuffer::get_Remaining()
		}
	}
	.class public abstract serializable Encoding
		extends System.Object
		implements System.ICloneable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(int32 codePage)
		{
			ret
		}
		.method public static hidebysig 
			uint8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, uint8[] bytes)
		{
			ret
		}
		.method public static hidebysig 
			uint8[] Convert(class System.Text.Encoding srcEncoding, class System.Text.Encoding dstEncoding, uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public static hidebysig 
			class System.Text.Encoding GetEncoding(int32 codepage)
		{
			ret
		}
		.method public static hidebysig 
			class System.Text.Encoding GetEncoding(int32 codepage, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback)
		{
			ret
		}
		.method public static hidebysig 
			class System.Text.Encoding GetEncoding(string name)
		{
			ret
		}
		.method public static hidebysig 
			class System.Text.Encoding GetEncoding(string name, class System.Text.EncoderFallback encoderFallback, class System.Text.DecoderFallback decoderFallback)
		{
			ret
		}
		.method public static hidebysig 
			class System.Text.EncodingInfo[] GetEncodings()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] GetPreamble()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_BodyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_EncodingName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_HeaderName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_WebName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_WindowsCodePage()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsBrowserDisplay()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsBrowserSave()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsMailNewsDisplay()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsMailNewsSave()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsSingleByte()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.EncoderFallback get_EncoderFallback()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_EncoderFallback(class System.Text.EncoderFallback 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Text.DecoderFallback get_DecoderFallback()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DecoderFallback(class System.Text.DecoderFallback 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReadOnly()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_ASCII()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetByteCount(char[] chars)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetByteCount(string s)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] GetBytes(char[] chars)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance uint8[] GetBytes(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
		}
		.method public virtual hidebysig newslot 
			instance uint8[] GetBytes(string s)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetBytes(string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 GetCharCount(uint8[] bytes)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance char[] GetChars(uint8[] bytes)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance char[] GetChars(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
		}
		.method public virtual hidebysig newslot 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_CodePage()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsAlwaysNormalized()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsAlwaysNormalized(valuetype System.Text.NormalizationForm form)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Text.Decoder GetDecoder()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_Default()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Text.Encoder GetEncoder()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetMaxByteCount(int32 charCount)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
		}
		.method public virtual hidebysig newslot 
			instance string GetString(uint8[] bytes)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetString(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_Unicode()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_BigEndianUnicode()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_UTF7()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_UTF8()
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Text.Encoding get_UTF32()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property class System.Text.Encoding 'ASCII'()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_ASCII()
		}
		.property class System.Text.Encoding BigEndianUnicode()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_BigEndianUnicode()
		}
		.property instance string BodyName()
		{
			.get instance string System.Text.Encoding::get_BodyName()
		}
		.property instance int32 CodePage()
		{
			.get instance int32 System.Text.Encoding::get_CodePage()
		}
		.property instance class System.Text.DecoderFallback DecoderFallback()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.DecoderFallback System.Text.Encoding::get_DecoderFallback()
			.set instance void System.Text.Encoding::set_DecoderFallback(class System.Text.DecoderFallback)
		}
		.property class System.Text.Encoding Default()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_Default()
		}
		.property instance class System.Text.EncoderFallback EncoderFallback()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance class System.Text.EncoderFallback System.Text.Encoding::get_EncoderFallback()
			.set instance void System.Text.Encoding::set_EncoderFallback(class System.Text.EncoderFallback)
		}
		.property instance string EncodingName()
		{
			.get instance string System.Text.Encoding::get_EncodingName()
		}
		.property instance string HeaderName()
		{
			.get instance string System.Text.Encoding::get_HeaderName()
		}
		.property instance bool IsBrowserDisplay()
		{
			.get instance bool System.Text.Encoding::get_IsBrowserDisplay()
		}
		.property instance bool IsBrowserSave()
		{
			.get instance bool System.Text.Encoding::get_IsBrowserSave()
		}
		.property instance bool IsMailNewsDisplay()
		{
			.get instance bool System.Text.Encoding::get_IsMailNewsDisplay()
		}
		.property instance bool IsMailNewsSave()
		{
			.get instance bool System.Text.Encoding::get_IsMailNewsSave()
		}
		.property instance bool IsReadOnly()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Text.Encoding::get_IsReadOnly()
		}
		.property instance bool IsSingleByte()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance bool System.Text.Encoding::get_IsSingleByte()
		}
		.property class System.Text.Encoding 'UTF32'()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_UTF32()
		}
		.property class System.Text.Encoding 'UTF7'()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_UTF7()
		}
		.property class System.Text.Encoding 'UTF8'()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_UTF8()
		}
		.property class System.Text.Encoding Unicode()
		{
			.get class System.Text.Encoding System.Text.Encoding::get_Unicode()
		}
		.property instance string WebName()
		{
			.get instance string System.Text.Encoding::get_WebName()
		}
		.property instance int32 WindowsCodePage()
		{
			.get instance int32 System.Text.Encoding::get_WindowsCodePage()
		}
	}
	.class public sealed serializable EncodingInfo
		extends System.Object
	{
		.method public hidebysig specialname 
			instance int32 get_CodePage()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DisplayName()
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.Encoding GetEncoding()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance int32 CodePage()
		{
			.get instance int32 System.Text.EncodingInfo::get_CodePage()
		}
		.property instance string DisplayName()
		{
			.get instance string System.Text.EncodingInfo::get_DisplayName()
		}
		.property instance string Name()
		{
			.get instance string System.Text.EncodingInfo::get_Name()
		}
	}
	.class public sealed NormalizationForm
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Text.NormalizationForm FormC = int32(0x00000001)
		.field static public literal valuetype System.Text.NormalizationForm FormD = int32(0x00000002)
		.field static public literal valuetype System.Text.NormalizationForm FormKC = int32(0x00000005)
		.field static public literal valuetype System.Text.NormalizationForm FormKD = int32(0x00000006)
	}
	.class public sealed serializable StringBuilder
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.custom instance void System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 05 43 68 61 72 73 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value', int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string 'value', int32 startIndex, int32 length, int32 capacity)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 capacity, int32 maxCapacity)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.override System.Runtime.Serialization.ISerializable::GetObjectData
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Capacity()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Capacity(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MaxCapacity()
		{
			ret
		}
		.method public hidebysig 
			instance int32 EnsureCapacity(int32 capacity)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance string ToString(int32 startIndex, int32 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Length()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Length(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_Chars(int32 index)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Chars(int32 index, char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(char 'value', int32 repeatCount)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(char[] 'value', int32 startIndex, int32 charCount)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(string 'value', int32 startIndex, int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendLine()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendLine(string 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, string 'value', int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Remove(int32 startIndex, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(uint8 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(int16 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(int64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(float32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Append(char[] 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, bool 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, int8 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, uint8 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, int16 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, char 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, char[] 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, char[] 'value', int32 startIndex, int32 charCount)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, int64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, float32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, float64 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, valuetype System.Decimal 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, uint16 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, uint32 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, uint64 'value')
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Insert(int32 index, object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendFormat(string format, object arg0)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendFormat(string format, object[] args)
		{
			.param [2]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder AppendFormat(class System.IFormatProvider provider, string format, object[] args)
		{
			.param [3]
			.custom instance void System.ParamArrayAttribute::.ctor() = (01 00 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Replace(string oldValue, string newValue)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Replace(string oldValue, string newValue, int32 startIndex, int32 count)
			internalcall 
		{
		}
		.method public hidebysig 
			instance bool Equals(class System.Text.StringBuilder sb)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Replace(char oldChar, char newChar)
		{
			ret
		}
		.method public hidebysig 
			instance class System.Text.StringBuilder Replace(char oldChar, char newChar, int32 startIndex, int32 count)
		{
			ret
		}
		.property instance int32 Capacity()
		{
			.get instance int32 System.Text.StringBuilder::get_Capacity()
			.set instance void System.Text.StringBuilder::set_Capacity(int32)
		}
		.property instance char Chars(int32)
		{
			.get instance char System.Text.StringBuilder::get_Chars(int32)
			.set instance void System.Text.StringBuilder::set_Chars(int32, char)
		}
		.property instance int32 Length()
		{
			.get instance int32 System.Text.StringBuilder::get_Length()
			.set instance void System.Text.StringBuilder::set_Length(int32)
		}
		.property instance int32 MaxCapacity()
		{
			.get instance int32 System.Text.StringBuilder::get_MaxCapacity()
		}
	}
	.class public sealed serializable UTF32Encoding
		extends System.Text.Encoding
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool bigEndian, bool byteOrderMark)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(string s)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string GetString(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Decoder GetDecoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Encoder GetEncoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxByteCount(int32 charCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance uint8[] GetPreamble()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
	}
	.class public serializable UTF7Encoding
		extends System.Text.Encoding
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool allowOptionals)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(string s)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string GetString(uint8[] bytes, int32 index, int32 count)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Decoder GetDecoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Encoder GetEncoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxByteCount(int32 charCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
			ret
		}
	}
	.class public serializable UTF8Encoding
		extends System.Text.Encoding
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool encoderShouldEmitUTF8Identifier)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(string chars)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string GetString(uint8[] bytes, int32 index, int32 count)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Decoder GetDecoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Encoder GetEncoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxByteCount(int32 charCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance uint8[] GetPreamble()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
	}
	.class public serializable UnicodeEncoding
		extends System.Text.Encoding
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool bigEndian, bool byteOrderMark)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char[] chars, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(string s)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetByteCount(char* chars, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(string s, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, uint8[] bytes, int32 byteIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetBytes(char* chars, int32 charCount, uint8* bytes, int32 byteCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8[] bytes, int32 index, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetCharCount(uint8* bytes, int32 count)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetChars(uint8* bytes, int32 byteCount, char* chars, int32 charCount)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance string GetString(uint8[] bytes, int32 index, int32 count)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Encoder GetEncoder()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public virtual hidebysig 
			instance class System.Text.Decoder GetDecoder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance uint8[] GetPreamble()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxByteCount(int32 charCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetMaxCharCount(int32 byteCount)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.field static public literal int32 CharSize = int32(0x00000002)
	}
}
.namespace System.Threading
{
	.class public serializable AbandonedMutexException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 location, class System.Threading.WaitHandle handle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, int32 location, class System.Threading.WaitHandle handle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception inner, int32 location, class System.Threading.WaitHandle handle)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class System.Threading.Mutex get_Mutex()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_MutexIndex()
		{
			ret
		}
		.property instance class System.Threading.Mutex Mutex()
		{
			.get instance class System.Threading.Mutex System.Threading.AbandonedMutexException::get_Mutex()
		}
		.property instance int32 MutexIndex()
		{
			.get instance int32 System.Threading.AbandonedMutexException::get_MutexIndex()
		}
	}
	.class public sequential sealed AsyncFlowControl
		extends System.ValueType
		implements System.IDisposable
	{
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.method public hidebysig 
			instance void Undo()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Threading.AsyncFlowControl obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Threading.AsyncFlowControl a, valuetype System.Threading.AsyncFlowControl b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Threading.AsyncFlowControl a, valuetype System.Threading.AsyncFlowControl b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed AutoResetEvent
		extends System.Threading.EventWaitHandle
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool initialState)
		{
			ret
		}
	}
	.class public sealed serializable CompressedStack
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.CompressedStack GetCompressedStack()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.CompressedStack Capture()
		{
			ret
		}
		.method public static hidebysig 
			void Run(class System.Threading.CompressedStack compressedStack, class System.Threading.ContextCallback callback, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance class System.Threading.CompressedStack CreateCopy()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
	}
	.class public sealed ContextCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object state)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object state, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed EventResetMode
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Threading.EventResetMode AutoReset = int32(0x00000000)
		.field static public literal valuetype System.Threading.EventResetMode ManualReset = int32(0x00000001)
	}
	.class public EventWaitHandle
		extends System.Threading.WaitHandle
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool initialState, valuetype System.Threading.EventResetMode mode, string name, [out] bool& createdNew)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.EventWaitHandle OpenExisting(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance bool Reset()
		{
			ret
		}
		.method public hidebysig 
			instance bool Set()
		{
			ret
		}
	}
	.class public sealed serializable ExecutionContext
		extends System.Object
		implements System.Runtime.Serialization.ISerializable
	{
		.method public static hidebysig 
			void Run(class System.Threading.ExecutionContext executionContext, class System.Threading.ContextCallback callback, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance class System.Threading.ExecutionContext CreateCopy()
		{
			ret
		}
		.method public static hidebysig 
			valuetype System.Threading.AsyncFlowControl SuppressFlow()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void RestoreFlow()
		{
			ret
		}
		.method public static hidebysig 
			bool IsFlowSuppressed()
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.ExecutionContext Capture()
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			.permissionset linkcheck = (00)
			ret
		}
	}
	.class public HostExecutionContext
		extends System.Object
	{
		.method famorassem hidebysig specialname 
			instance object get_State()
		{
			ret
		}
		.method famorassem hidebysig specialname 
			instance void set_State(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object state)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Threading.HostExecutionContext CreateCopy()
		{
			ret
		}
		.property instance object State()
		{
			.get instance object System.Threading.HostExecutionContext::get_State()
			.set instance void System.Threading.HostExecutionContext::set_State(object)
		}
	}
	.class public HostExecutionContextManager
		extends System.Object
	{
		.method public virtual hidebysig newslot 
			instance class System.Threading.HostExecutionContext Capture()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object SetHostExecutionContext(class System.Threading.HostExecutionContext hostExecutionContext)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Revert(object previousState)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed IOCompletionCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(uint32 errorCode, uint32 numBytes, valuetype System.Threading.NativeOverlapped* pOVERLAP)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(uint32 errorCode, uint32 numBytes, valuetype System.Threading.NativeOverlapped* pOVERLAP, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract sealed Interlocked
		extends System.Object
	{
		.method public static hidebysig 
			int32 Increment(int32& location)
			internalcall 
		{
		}
		.method public static hidebysig 
			int64 Increment(int64& location)
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 Decrement(int32& location)
			internalcall 
		{
		}
		.method public static hidebysig 
			int64 Decrement(int64& location)
			internalcall 
		{
		}
		.method public static hidebysig 
			int32 Exchange(int32& location1, int32 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			int64 Exchange(int64& location1, int64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			float32 Exchange(float32& location1, float32 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 Exchange(float64& location1, float64 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			object Exchange(object& location1, object 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			native int Exchange(native int& location1, native int 'value')
			internalcall 
		{
		}
		.method public static hidebysig 
			!!0 Exchange<class T>(!!0& location1, !!0 'value')
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 CompareExchange(int32& location1, int32 'value', int32 comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			int64 CompareExchange(int64& location1, int64 'value', int64 comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			float32 CompareExchange(float32& location1, float32 'value', float32 comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			float64 CompareExchange(float64& location1, float64 'value', float64 comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			object CompareExchange(object& location1, object 'value', object comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			native int CompareExchange(native int& location1, native int 'value', native int comparand)
			internalcall 
		{
		}
		.method public static hidebysig 
			!!0 CompareExchange<class T>(!!0& location1, !!0 'value', !!0 comparand)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			int32 Add(int32& location1, int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 Add(int64& location1, int64 'value')
		{
			ret
		}
		.method public static hidebysig 
			int64 Read(int64& location)
		{
			ret
		}
	}
	.class public sequential sealed LockCookie
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(valuetype System.Threading.LockCookie obj)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(valuetype System.Threading.LockCookie a, valuetype System.Threading.LockCookie b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(valuetype System.Threading.LockCookie a, valuetype System.Threading.LockCookie b)
		{
			ret
		}

		//This private field was generated by ASMMETA as a placeholder and does not exist in the actual assembly.
		.field private int32 __Asmmeta_Private_Field
	}
	.class public sealed ManualResetEvent
		extends System.Threading.EventWaitHandle
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool initialState)
		{
			ret
		}
	}
	.class public abstract sealed Monitor
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public static hidebysig 
			void Enter(object obj)
			internalcall 
		{
		}
		.method public static hidebysig 
			void Exit(object obj)
			internalcall 
		{
		}
		.method public static hidebysig 
			bool TryEnter(object obj)
		{
			ret
		}
		.method public static hidebysig 
			bool TryEnter(object obj, int32 millisecondsTimeout)
		{
			ret
		}
		.method public static hidebysig 
			bool TryEnter(object obj, valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public static hidebysig 
			bool Wait(object obj, int32 millisecondsTimeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			bool Wait(object obj, valuetype System.TimeSpan timeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			bool Wait(object obj, int32 millisecondsTimeout)
		{
			ret
		}
		.method public static hidebysig 
			bool Wait(object obj, valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public static hidebysig 
			bool Wait(object obj)
		{
			ret
		}
		.method public static hidebysig 
			void Pulse(object obj)
		{
			ret
		}
		.method public static hidebysig 
			void PulseAll(object obj)
		{
			ret
		}
	}
	.class public sealed Mutex
		extends System.Threading.WaitHandle
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(bool initiallyOwned, string name, [out] bool& createdNew)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool initiallyOwned, string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(bool initiallyOwned)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.Mutex OpenExisting(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void ReleaseMutex()
		{
			ret
		}
	}
	.class public sequential sealed NativeOverlapped
		extends System.ValueType
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public native int InternalLow
		.field public native int InternalHigh
		.field public int32 OffsetLow
		.field public int32 OffsetHigh
		.field public native int EventHandle
	}
	.class public Overlapped
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 offsetLo, int32 offsetHi, native int hEvent, class System.IAsyncResult ar)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 offsetLo, int32 offsetHi, int32 hEvent, class System.IAsyncResult ar)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 80 98 54 68 69 73 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 69 73 20 6E 6F 74 20 36 34 2D 62 69 74 20 63 6F 6D 70 61 74 69 62 6C 65 2E 20 20 55 73 65 20 74 68 65 20 63 6F 6E 73 74 72 75 63 74 6F 72 20 74 68 61 74 20 74 61 6B 65 73 20 61 6E 20 49 6E 74 50 74 72 20 66 6F 72 20 74 68 65 20 65 76 65 6E 74 20 68 61 6E 64 6C 65 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.IAsyncResult get_AsyncResult()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AsyncResult(class System.IAsyncResult 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_OffsetLow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_OffsetLow(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_OffsetHigh()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_OffsetHigh(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_EventHandle()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_EventHandle(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance native int get_EventHandleIntPtr()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_EventHandleIntPtr(native int 'value')
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.NativeOverlapped* Pack(class System.Threading.IOCompletionCallback iocb)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 6A 54 68 69 73 20 6D 65 74 68 6F 64 20 69 73 20 6E 6F 74 20 73 61 66 65 2E 20 20 55 73 65 20 50 61 63 6B 20 28 69 6F 63 62 2C 20 75 73 65 72 44 61 74 61 29 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.NativeOverlapped* Pack(class System.Threading.IOCompletionCallback iocb, object userData)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.NativeOverlapped* UnsafePack(class System.Threading.IOCompletionCallback iocb)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 70 54 68 69 73 20 6D 65 74 68 6F 64 20 69 73 20 6E 6F 74 20 73 61 66 65 2E 20 20 55 73 65 20 55 6E 73 61 66 65 50 61 63 6B 20 28 69 6F 63 62 2C 20 75 73 65 72 44 61 74 61 29 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.NativeOverlapped* UnsafePack(class System.Threading.IOCompletionCallback iocb, object userData)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.Overlapped Unpack(valuetype System.Threading.NativeOverlapped* nativeOverlappedPtr)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void Free(valuetype System.Threading.NativeOverlapped* nativeOverlappedPtr)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.property instance class System.IAsyncResult AsyncResult()
		{
			.get instance class System.IAsyncResult System.Threading.Overlapped::get_AsyncResult()
			.set instance void System.Threading.Overlapped::set_AsyncResult(class System.IAsyncResult)
		}
		.property instance int32 EventHandle()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 75 54 68 69 73 20 70 72 6F 70 65 72 74 79 20 69 73 20 6E 6F 74 20 36 34 2D 62 69 74 20 63 6F 6D 70 61 74 69 62 6C 65 2E 20 20 55 73 65 20 45 76 65 6E 74 48 61 6E 64 6C 65 49 6E 74 50 74 72 20 69 6E 73 74 65 61 64 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00)
			.get instance int32 System.Threading.Overlapped::get_EventHandle()
			.set instance void System.Threading.Overlapped::set_EventHandle(int32)
		}
		.property instance native int EventHandleIntPtr()
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance native int System.Threading.Overlapped::get_EventHandleIntPtr()
			.set instance void System.Threading.Overlapped::set_EventHandleIntPtr(native int)
		}
		.property instance int32 OffsetHigh()
		{
			.get instance int32 System.Threading.Overlapped::get_OffsetHigh()
			.set instance void System.Threading.Overlapped::set_OffsetHigh(int32)
		}
		.property instance int32 OffsetLow()
		{
			.get instance int32 System.Threading.Overlapped::get_OffsetLow()
			.set instance void System.Threading.Overlapped::set_OffsetLow(int32)
		}
	}
	.class public sealed ParameterizedThreadStart
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object obj)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object obj, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed ReaderWriterLock
		extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsReaderLockHeld()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsWriterLockHeld()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_WriterSeqNum()
		{
			ret
		}
		.method public hidebysig 
			instance void AcquireReaderLock(int32 millisecondsTimeout)
		{
			ret
		}
		.method public hidebysig 
			instance void AcquireReaderLock(valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public hidebysig 
			instance void AcquireWriterLock(int32 millisecondsTimeout)
		{
			ret
		}
		.method public hidebysig 
			instance void AcquireWriterLock(valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public hidebysig 
			instance void ReleaseReaderLock()
		{
			ret
		}
		.method public hidebysig 
			instance void ReleaseWriterLock()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.LockCookie UpgradeToWriterLock(int32 millisecondsTimeout)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.LockCookie UpgradeToWriterLock(valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public hidebysig 
			instance void DowngradeFromWriterLock(valuetype System.Threading.LockCookie& lockCookie)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype System.Threading.LockCookie ReleaseLock()
		{
			ret
		}
		.method public hidebysig 
			instance void RestoreLock(valuetype System.Threading.LockCookie& lockCookie)
		{
			ret
		}
		.method public hidebysig 
			instance bool AnyWritersSince(int32 seqNum)
			internalcall 
		{
		}
		.property instance bool IsReaderLockHeld()
		{
			.get instance bool System.Threading.ReaderWriterLock::get_IsReaderLockHeld()
		}
		.property instance bool IsWriterLockHeld()
		{
			.get instance bool System.Threading.ReaderWriterLock::get_IsWriterLockHeld()
		}
		.property instance int32 WriterSeqNum()
		{
			.get instance int32 System.Threading.ReaderWriterLock::get_WriterSeqNum()
		}
	}
	.class public sealed RegisteredWaitHandle
		extends System.MarshalByRefObject
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig 
			instance bool Unregister(class System.Threading.WaitHandle waitObject)
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
			ret
		}
	}
	.class public sealed SendOrPostCallback
		extends System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object state)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object state, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public SynchronizationContext
		extends System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig 
			instance void SetWaitNotificationRequired()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsWaitNotificationRequired()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Send(class System.Threading.SendOrPostCallback d, object state)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Post(class System.Threading.SendOrPostCallback d, object state)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OperationStarted()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OperationCompleted()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Wait(native int[] waitHandles, bool waitAll, int32 millisecondsTimeout)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method family static hidebysig 
			int32 WaitHelper(native int[] waitHandles, bool waitAll, int32 millisecondsTimeout)
			internalcall 
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public static hidebysig 
			void SetSynchronizationContext(class System.Threading.SynchronizationContext syncContext)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class System.Threading.SynchronizationContext get_Current()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class System.Threading.SynchronizationContext CreateCopy()
		{
			ret
		}
		.property class System.Threading.SynchronizationContext Current()
		{
			.get class System.Threading.SynchronizationContext System.Threading.SynchronizationContext::get_Current()
		}
	}
	.class public serializable SynchronizationLockException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed Thread
		extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject
		implements System.Runtime.InteropServices._Thread
	{
		.custom instance void System.Runtime.InteropServices.ClassInterfaceAttribute::.ctor(valuetype System.Runtime.InteropServices.ClassInterfaceType) = (01 00 00 00 00 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComDefaultInterfaceAttribute::.ctor(class System.Type) = (01 00 26 53 79 73 74 65 6D 2E 52 75 6E 74 69 6D 65 2E 49 6E 74 65 72 6F 70 53 65 72 76 69 63 65 73 2E 5F 54 68 72 65 61 64 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.ThreadStart start)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.ThreadStart start, int32 maxStackSize)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.ParameterizedThreadStart start)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.ParameterizedThreadStart start, int32 maxStackSize)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
			internalcall 
		{
			.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		}
		.method public hidebysig specialname 
			instance int32 get_ManagedThreadId()
			internalcall 
		{
		}
		.method public hidebysig 
			instance void Start()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance void Start(object parameter)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.Threading.ExecutionContext get_ExecutionContext()
		{
			ret
		}
		.method public hidebysig 
			instance void SetCompressedStack(class System.Threading.CompressedStack stack)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 67 54 68 72 65 61 64 2E 53 65 74 43 6F 6D 70 72 65 73 73 65 64 53 74 61 63 6B 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 73 75 70 70 6F 72 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 74 68 65 20 53 79 73 74 65 6D 2E 54 68 72 65 61 64 69 6E 67 2E 43 6F 6D 70 72 65 73 73 65 64 53 74 61 63 6B 20 63 6C 61 73 73 00 00)
			ret
		}
		.method public hidebysig 
			instance class System.Threading.CompressedStack GetCompressedStack()
		{
			.permissionset linkcheck = (00)
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 67 54 68 72 65 61 64 2E 47 65 74 43 6F 6D 70 72 65 73 73 65 64 53 74 61 63 6B 20 69 73 20 6E 6F 20 6C 6F 6E 67 65 72 20 73 75 70 70 6F 72 74 65 64 2E 20 50 6C 65 61 73 65 20 75 73 65 20 74 68 65 20 53 79 73 74 65 6D 2E 54 68 72 65 61 64 69 6E 67 2E 43 6F 6D 70 72 65 73 73 65 64 53 74 61 63 6B 20 63 6C 61 73 73 00 00)
			ret
		}
		.method public hidebysig 
			instance void Abort(object stateInfo)
		{
			ret
		}
		.method public hidebysig 
			instance void Abort()
		{
			ret
		}
		.method public static hidebysig 
			void ResetAbort()
		{
			ret
		}
		.method public hidebysig 
			instance void Suspend()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 80 DB 54 68 72 65 61 64 2E 53 75 73 70 65 6E 64 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6F 74 68 65 72 20 63 6C 61 73 73 65 73 20 69 6E 20 53 79 73 74 65 6D 2E 54 68 72 65 61 64 69 6E 67 2C 20 73 75 63 68 20 61 73 20 4D 6F 6E 69 74 6F 72 2C 20 4D 75 74 65 78 2C 20 45 76 65 6E 74 2C 20 61 6E 64 20 53 65 6D 61 70 68 6F 72 65 2C 20 74 6F 20 73 79 6E 63 68 72 6F 6E 69 7A 65 20 54 68 72 65 61 64 73 20 6F 72 20 70 72 6F 74 65 63 74 20 72 65 73 6F 75 72 63 65 73 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void Resume()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 80 DA 54 68 72 65 61 64 2E 52 65 73 75 6D 65 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 6F 74 68 65 72 20 63 6C 61 73 73 65 73 20 69 6E 20 53 79 73 74 65 6D 2E 54 68 72 65 61 64 69 6E 67 2C 20 73 75 63 68 20 61 73 20 4D 6F 6E 69 74 6F 72 2C 20 4D 75 74 65 78 2C 20 45 76 65 6E 74 2C 20 61 6E 64 20 53 65 6D 61 70 68 6F 72 65 2C 20 74 6F 20 73 79 6E 63 68 72 6F 6E 69 7A 65 20 54 68 72 65 61 64 73 20 6F 72 20 70 72 6F 74 65 63 74 20 72 65 73 6F 75 72 63 65 73 2E 20 20 68 74 74 70 3A 2F 2F 67 6F 2E 6D 69 63 72 6F 73 6F 66 74 2E 63 6F 6D 2F 66 77 6C 69 6E 6B 2F 3F 6C 69 6E 6B 69 64 3D 31 34 32 30 32 00 00 00)
			ret
		}
		.method public hidebysig 
			instance void Interrupt()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Threading.ThreadPriority get_Priority()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Priority(valuetype System.Threading.ThreadPriority 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsAlive()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsThreadPoolThread()
		{
			ret
		}
		.method public hidebysig 
			instance void Join()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance bool Join(int32 millisecondsTimeout)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance bool Join(valuetype System.TimeSpan timeout)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void Sleep(int32 millisecondsTimeout)
		{
			ret
		}
		.method public static hidebysig 
			void Sleep(valuetype System.TimeSpan timeout)
		{
			ret
		}
		.method public static hidebysig 
			void SpinWait(int32 iterations)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class System.Threading.Thread get_CurrentThread()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsBackground()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsBackground(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance valuetype System.Threading.ThreadState get_ThreadState()
		{
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot AllocateDataSlot()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot AllocateNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.LocalDataStoreSlot GetNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void FreeNamedDataSlot(string name)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			object GetData(class System.LocalDataStoreSlot slot)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void SetData(class System.LocalDataStoreSlot slot, object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.Globalization.CultureInfo get_CurrentUICulture()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrentUICulture(class System.Globalization.CultureInfo 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance class System.Globalization.CultureInfo get_CurrentCulture()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CurrentCulture(class System.Globalization.CultureInfo 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			class System.Runtime.Remoting.Contexts.Context get_CurrentContext()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig specialname 
			class System.Security.Principal.IPrincipal get_CurrentPrincipal()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_CurrentPrincipal(class System.Security.Principal.IPrincipal 'value')
		{
			ret
		}
		.method public static hidebysig 
			class System.AppDomain GetDomain()
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDomainID()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Name(string 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			void BeginCriticalRegion()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void EndCriticalRegion()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void BeginThreadAffinity()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			void EndThreadAffinity()
			internalcall 
		{
			.permissionset linkcheck = (00)
		}
		.method public static hidebysig 
			uint8 VolatileRead(uint8& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			int16 VolatileRead(int16& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			int32 VolatileRead(int32& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			int64 VolatileRead(int64& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			int8 VolatileRead(int8& address)
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint16 VolatileRead(uint16& address)
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint32 VolatileRead(uint32& address)
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			native int VolatileRead(native int& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			native uint VolatileRead(native uint& address)
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			uint64 VolatileRead(uint64& address)
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			float32 VolatileRead(float32& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			float64 VolatileRead(float64& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			object VolatileRead(object& address)
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(uint8& address, uint8 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(int16& address, int16 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(int32& address, int32 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(int64& address, int64 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(int8& address, int8 'value')
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(uint16& address, uint16 'value')
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(uint32& address, uint32 'value')
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(native int& address, native int 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(native uint& address, native uint 'value')
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(uint64& address, uint64 'value')
			noinlining 
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(float32& address, float32 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(float64& address, float64 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void VolatileWrite(object& address, object 'value')
			noinlining 
		{
			ret
		}
		.method public static hidebysig 
			void MemoryBarrier()
			internalcall 
		{
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Thread.GetTypeInfoCount([out] uint32& pcTInfo)
		{
			.override System.Runtime.InteropServices._Thread::GetTypeInfoCount
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Thread.GetTypeInfo(uint32 iTInfo, uint32 lcid, native int ppTInfo)
		{
			.override System.Runtime.InteropServices._Thread::GetTypeInfo
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Thread.GetIDsOfNames([in] valuetype System.Guid& riid, native int rgszNames, uint32 cNames, uint32 lcid, native int rgDispId)
		{
			.override System.Runtime.InteropServices._Thread::GetIDsOfNames
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.Runtime.InteropServices._Thread.Invoke(uint32 dispIdMember, [in] valuetype System.Guid& riid, uint32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr)
		{
			.override System.Runtime.InteropServices._Thread::Invoke
			ret
		}
		.property class System.Runtime.Remoting.Contexts.Context CurrentContext()
		{
			.get class System.Runtime.Remoting.Contexts.Context System.Threading.Thread::get_CurrentContext()
		}
		.property instance class System.Globalization.CultureInfo CurrentCulture()
		{
			.get instance class System.Globalization.CultureInfo System.Threading.Thread::get_CurrentCulture()
			.set instance void System.Threading.Thread::set_CurrentCulture(class System.Globalization.CultureInfo)
		}
		.property class System.Security.Principal.IPrincipal CurrentPrincipal()
		{
			.get class System.Security.Principal.IPrincipal System.Threading.Thread::get_CurrentPrincipal()
			.set void System.Threading.Thread::set_CurrentPrincipal(class System.Security.Principal.IPrincipal)
		}
		.property class System.Threading.Thread CurrentThread()
		{
			.get class System.Threading.Thread System.Threading.Thread::get_CurrentThread()
		}
		.property instance class System.Globalization.CultureInfo CurrentUICulture()
		{
			.get instance class System.Globalization.CultureInfo System.Threading.Thread::get_CurrentUICulture()
			.set instance void System.Threading.Thread::set_CurrentUICulture(class System.Globalization.CultureInfo)
		}
		.property instance class System.Threading.ExecutionContext ExecutionContext()
		{
			.get instance class System.Threading.ExecutionContext System.Threading.Thread::get_ExecutionContext()
		}
		.property instance bool IsAlive()
		{
			.get instance bool System.Threading.Thread::get_IsAlive()
		}
		.property instance bool IsBackground()
		{
			.get instance bool System.Threading.Thread::get_IsBackground()
			.set instance void System.Threading.Thread::set_IsBackground(bool)
		}
		.property instance bool IsThreadPoolThread()
		{
			.get instance bool System.Threading.Thread::get_IsThreadPoolThread()
		}
		.property instance int32 ManagedThreadId()
		{
			.get instance int32 System.Threading.Thread::get_ManagedThreadId()
		}
		.property instance string Name()
		{
			.get instance string System.Threading.Thread::get_Name()
			.set instance void System.Threading.Thread::set_Name(string)
		}
		.property instance valuetype System.Threading.ThreadPriority Priority()
		{
			.get instance valuetype System.Threading.ThreadPriority System.Threading.Thread::get_Priority()
			.set instance void System.Threading.Thread::set_Priority(valuetype System.Threading.ThreadPriority)
		}
		.property instance valuetype System.Threading.ThreadState ThreadState()
		{
			.get instance valuetype System.Threading.ThreadState System.Threading.Thread::get_ThreadState()
		}
	}
	.class public sealed serializable ThreadAbortException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance object get_ExceptionState()
		{
			ret
		}
		.property instance object ExceptionState()
		{
			.get instance object System.Threading.ThreadAbortException::get_ExceptionState()
		}
	}
	.class public serializable ThreadInterruptedException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract sealed ThreadPool
		extends System.Object
	{
		.permissionset linkcheck = (00)
		.method public static hidebysig 
			bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads)
		{
			ret
		}
		.method public static hidebysig 
			void GetMaxThreads([out] int32& workerThreads, [out] int32& completionPortThreads)
		{
			ret
		}
		.method public static hidebysig 
			bool SetMinThreads(int32 workerThreads, int32 completionPortThreads)
		{
			ret
		}
		.method public static hidebysig 
			void GetMinThreads([out] int32& workerThreads, [out] int32& completionPortThreads)
		{
			ret
		}
		.method public static hidebysig 
			void GetAvailableThreads([out] int32& workerThreads, [out] int32& completionPortThreads)
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, uint32 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, uint32 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce)
		{
			ret
		}
		.method public static hidebysig 
			class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state)
		{
			ret
		}
		.method public static hidebysig 
			bool QueueUserWorkItem(class System.Threading.WaitCallback callBack)
		{
			ret
		}
		.method public static hidebysig 
			bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public static hidebysig 
			bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped)
		{
			.permissionset linkcheck = (00)
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool BindHandle(native int osHandle)
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string, bool) = (01 00 69 54 68 72 65 61 64 50 6F 6F 6C 2E 42 69 6E 64 48 61 6E 64 6C 65 28 49 6E 74 50 74 72 29 20 68 61 73 20 62 65 65 6E 20 64 65 70 72 65 63 61 74 65 64 2E 20 20 50 6C 65 61 73 65 20 75 73 65 20 54 68 72 65 61 64 50 6F 6F 6C 2E 42 69 6E 64 48 61 6E 64 6C 65 28 53 61 66 65 48 61 6E 64 6C 65 29 20 69 6E 73 74 65 61 64 2E 00 00 00)
			ret
		}
		.method public static hidebysig 
			bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle)
		{
			ret
		}
	}
	.class public sealed serializable ThreadPriority
		extends System.Enum
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Threading.ThreadPriority AboveNormal = int32(0x00000003)
		.field static public literal valuetype System.Threading.ThreadPriority BelowNormal = int32(0x00000001)
		.field static public literal valuetype System.Threading.ThreadPriority Highest = int32(0x00000004)
		.field static public literal valuetype System.Threading.ThreadPriority Lowest = int32(0x00000000)
		.field static public literal valuetype System.Threading.ThreadPriority Normal = int32(0x00000002)
	}
	.class public sealed ThreadStart
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed serializable ThreadStartException
		extends System.SystemException
	{
	}
	.class public sealed serializable ThreadState
		extends System.Enum
	{
		.custom instance void System.FlagsAttribute::.ctor() = (01 00 00 00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Threading.ThreadState AbortRequested = int32(0x00000080)
		.field static public literal valuetype System.Threading.ThreadState Aborted = int32(0x00000100)
		.field static public literal valuetype System.Threading.ThreadState Background = int32(0x00000004)
		.field static public literal valuetype System.Threading.ThreadState Running = int32(0x00000000)
		.field static public literal valuetype System.Threading.ThreadState StopRequested = int32(0x00000001)
		.field static public literal valuetype System.Threading.ThreadState Stopped = int32(0x00000010)
		.field static public literal valuetype System.Threading.ThreadState SuspendRequested = int32(0x00000002)
		.field static public literal valuetype System.Threading.ThreadState Suspended = int32(0x00000040)
		.field static public literal valuetype System.Threading.ThreadState Unstarted = int32(0x00000008)
		.field static public literal valuetype System.Threading.ThreadState WaitSleepJoin = int32(0x00000020)
	}
	.class public serializable ThreadStateException
		extends System.SystemException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public abstract sealed Timeout
		extends System.Object
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.field static public literal int32 Infinite = int32(0xFFFFFFFF)
	}
	.class public sealed Timer
		extends System.MarshalByRefObject
		implements System.IDisposable
	{
		.permissionset linkcheck = (00)
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.TimerCallback callback, object state, int32 dueTime, int32 period)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.TimerCallback callback, object state, valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.TimerCallback callback, object state, uint32 dueTime, uint32 period)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.TimerCallback callback, object state, int64 dueTime, int64 period)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class System.Threading.TimerCallback callback)
		{
			ret
		}
		.method public hidebysig 
			instance bool Change(int32 dueTime, int32 period)
		{
			ret
		}
		.method public hidebysig 
			instance bool Change(valuetype System.TimeSpan dueTime, valuetype System.TimeSpan period)
		{
			ret
		}
		.method public hidebysig 
			instance bool Change(uint32 dueTime, uint32 period)
		{
			.custom instance void System.CLSCompliantAttribute::.ctor(bool) = (01 00 00 00 00)
			ret
		}
		.method public hidebysig 
			instance bool Change(int64 dueTime, int64 period)
		{
			ret
		}
		.method public hidebysig 
			instance bool Dispose(class System.Threading.WaitHandle notifyObject)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
	}
	.class public sealed TimerCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object state)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object state, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed WaitCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object state)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object state, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract WaitHandle
		extends System.MarshalByRefObject
		implements System.IDisposable
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance native int get_Handle()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Handle(native int 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void set_SafeWaitHandle(class Microsoft.Win32.SafeHandles.SafeWaitHandle 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool WaitOne(int32 millisecondsTimeout, bool exitContext)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool WaitOne(valuetype System.TimeSpan timeout, bool exitContext)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool WaitOne()
		{
			ret
		}
		.method public static hidebysig 
			bool WaitAll(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			bool WaitAll(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			bool WaitAll(class System.Threading.WaitHandle[] waitHandles)
		{
			ret
		}
		.method public static hidebysig 
			int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, int32 millisecondsTimeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			int32 WaitAny(class System.Threading.WaitHandle[] waitHandles, valuetype System.TimeSpan timeout, bool exitContext)
		{
			ret
		}
		.method public static hidebysig 
			int32 WaitAny(class System.Threading.WaitHandle[] waitHandles)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Close()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool explicitDisposing)
		{
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override System.IDisposable::Dispose
			ret
		}
		.field static family initonly native int InvalidHandle
		.field static public literal int32 WaitTimeout = int32(0x00000102)
		.property instance native int Handle()
		{
			.custom instance void System.ObsoleteAttribute::.ctor(string) = (01 00 28 55 73 65 20 74 68 65 20 53 61 66 65 57 61 69 74 48 61 6E 64 6C 65 20 70 72 6F 70 65 72 74 79 20 69 6E 73 74 65 61 64 2E 00 00)
			.get instance native int System.Threading.WaitHandle::get_Handle()
			.set instance void System.Threading.WaitHandle::set_Handle(native int)
		}
		.property instance class Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle()
		{
			.get instance class Microsoft.Win32.SafeHandles.SafeWaitHandle System.Threading.WaitHandle::get_SafeWaitHandle()
			.set instance void System.Threading.WaitHandle::set_SafeWaitHandle(class Microsoft.Win32.SafeHandles.SafeWaitHandle)
		}
	}
	.class public serializable WaitHandleCannotBeOpenedException
		extends System.ApplicationException
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string message, class System.Exception innerException)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public sealed WaitOrTimerCallback
		extends System.MulticastDelegate
	{
		.custom instance void System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object state, bool timedOut)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class System.IAsyncResult BeginInvoke(object state, bool timedOut, class System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class System.IAsyncResult result)
			runtime 
		{
		}
	}
}
