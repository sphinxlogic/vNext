.assembly extern System
{
	.publickeytoken = (B7 7A 5C 56 19 34 E0 89)
	.ver 2:0:0:0
}
.assembly extern mscorlib
{
	.publickeytoken = (B7 7A 5C 56 19 34 E0 89)
	.ver 2:0:0:0
}
.assembly System.Runtime.Remoting
{
	.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
	.publickey = (00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00)
	.hash algorithm 0x00008004
	.ver 2:0:0:0
}
.namespace System.Runtime.Remoting.Channels
{
	.class public BinaryClientFormatterSink
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IClientFormatterSink, [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink, [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink, [mscorlib]System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink nextSink)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink get_NextSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void ProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class [mscorlib]'System.IO.Stream' requestStream, [out] class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class [mscorlib]'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessRequest(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkStack sinkStack, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class [mscorlib]System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]'System.IO.Stream' GetRequestStream(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink NextChannelSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink System.Runtime.Remoting.Channels.BinaryClientFormatterSink::get_NextChannelSink()
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink NextSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink System.Runtime.Remoting.Channels.BinaryClientFormatterSink::get_NextSink()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.Channels.BinaryClientFormatterSink::get_Properties()
		}
	}
	.class public BinaryClientFormatterSinkProvider
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IClientFormatterSinkProvider, [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Collections.ICollection providerData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink CreateSink(class [mscorlib]System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider::set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider)
		}
	}
	.class public BinaryServerFormatterSink
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink, [mscorlib]System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.class nested public sealed serializable Protocol
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol Http = int32(0x00000000)
			.field static public literal valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol Other = int32(0x00000001)
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol protocol, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver receiver)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel get_TypeFilterLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype [mscorlib]System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage requestMsg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class [mscorlib]'System.IO.Stream' requestStream, [out] class [mscorlib]System.Runtime.Remoting.Messaging.IMessage& responseMsg, [out] class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class [mscorlib]'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]'System.IO.Stream' GetResponseStream(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.BinaryServerFormatterSink::get_NextChannelSink()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.Channels.BinaryServerFormatterSink::get_Properties()
		}
		.property instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel()
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel System.Runtime.Remoting.Channels.BinaryServerFormatterSink::get_TypeFilterLevel()
			.set instance void System.Runtime.Remoting.Channels.BinaryServerFormatterSink::set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel)
		}
	}
	.class public BinaryServerFormatterSinkProvider
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerFormatterSinkProvider, [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Collections.ICollection providerData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetChannelData(class [mscorlib]System.Runtime.Remoting.Channels.IChannelDataStore channelData)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink CreateSink(class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver channel)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel get_TypeFilterLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel 'value')
		{
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider Next()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider::set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
		}
		.property instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel()
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider::get_TypeFilterLevel()
			.set instance void System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider::set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel)
		}
	}
	.class public CommonTransportKeys
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public literal string ConnectionId = "__ConnectionId"
		.field static public literal string IPAddress = "__IPAddress"
		.field static public literal string RequestUri = "__RequestUri"
	}
	.class public interface abstract IAuthorizeRemotingConnection
	{
		.method public virtual hidebysig newslot abstract 
			instance bool IsConnectingEndPointAuthorized(class [System]System.Net.EndPoint endPoint)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsConnectingIdentityAuthorized(class [mscorlib]System.Security.Principal.IIdentity identity)
		{
		}
	}
	.class public SoapClientFormatterSink
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IClientFormatterSink, [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink, [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink, [mscorlib]System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink nextSink)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink get_NextSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink replySink)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void ProcessMessage(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class [mscorlib]'System.IO.Stream' requestStream, [out] class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class [mscorlib]'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessRequest(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkStack sinkStack, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class [mscorlib]System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]'System.IO.Stream' GetRequestStream(class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink NextChannelSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink System.Runtime.Remoting.Channels.SoapClientFormatterSink::get_NextChannelSink()
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink NextSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink System.Runtime.Remoting.Channels.SoapClientFormatterSink::get_NextSink()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.Channels.SoapClientFormatterSink::get_Properties()
		}
	}
	.class public SoapClientFormatterSinkProvider
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IClientFormatterSinkProvider, [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Collections.ICollection providerData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSink CreateSink(class [mscorlib]System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider::set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider)
		}
	}
	.class public SoapServerFormatterSink
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink, [mscorlib]System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.class nested public sealed serializable Protocol
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype System.Runtime.Remoting.Channels.SoapServerFormatterSink/Protocol Http = int32(0x00000000)
			.field static public literal valuetype System.Runtime.Remoting.Channels.SoapServerFormatterSink/Protocol Other = int32(0x00000001)
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype System.Runtime.Remoting.Channels.SoapServerFormatterSink/Protocol protocol, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver receiver)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel get_TypeFilterLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype [mscorlib]System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage requestMsg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class [mscorlib]'System.IO.Stream' requestStream, [out] class [mscorlib]System.Runtime.Remoting.Messaging.IMessage& responseMsg, [out] class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class [mscorlib]'System.IO.Stream'& responseStream)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]'System.IO.Stream' GetResponseStream(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink get_NextChannelSink()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.SoapServerFormatterSink::get_NextChannelSink()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.Channels.SoapServerFormatterSink::get_Properties()
		}
		.property instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel()
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel System.Runtime.Remoting.Channels.SoapServerFormatterSink::get_TypeFilterLevel()
			.set instance void System.Runtime.Remoting.Channels.SoapServerFormatterSink::set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel)
		}
	}
	.class public SoapServerFormatterSinkProvider
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerFormatterSinkProvider, [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Collections.ICollection providerData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetChannelData(class [mscorlib]System.Runtime.Remoting.Channels.IChannelDataStore channelData)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink CreateSink(class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver channel)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider get_Next()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel get_TypeFilterLevel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel 'value')
		{
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider Next()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider::set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
		}
		.property instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel()
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 00 00 00)
			.get instance valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider::get_TypeFilterLevel()
			.set instance void System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider::set_TypeFilterLevel(valuetype [mscorlib]System.Runtime.Serialization.Formatters.TypeFilterLevel)
		}
	}
	.class public sealed SocketCachePolicy
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.Channels.SocketCachePolicy AbsoluteTimeout = int32(0x00000001)
		.field static public literal valuetype System.Runtime.Remoting.Channels.SocketCachePolicy Default = int32(0x00000000)
	}
}
.namespace System.Runtime.Remoting.Channels.Http
{
	.class public HttpChannel
		extends [mscorlib]System.Runtime.Remoting.Channels.BaseChannelWithProperties
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver, [mscorlib]System.Runtime.Remoting.Channels.IChannelSender, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiverHook, [mscorlib]System.Runtime.Remoting.Channels.ISecurableChannel
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider clientSinkProvider, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider serverSinkProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_ChannelData()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string[] GetUrlsForUri(string objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StartListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StopListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelScheme()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_WantsToListen()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void set_WantsToListen(bool 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink get_ChannelSinkChain()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddHookChannelUri(string channelUri)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Collections.ICollection get_Keys()
		{
			ret
		}
		.property instance object ChannelData()
		{
			.get instance object System.Runtime.Remoting.Channels.Http.HttpChannel::get_ChannelData()
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Http.HttpChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Http.HttpChannel::get_ChannelPriority()
		}
		.property instance string ChannelScheme()
		{
			.get instance string System.Runtime.Remoting.Channels.Http.HttpChannel::get_ChannelScheme()
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.Http.HttpChannel::get_ChannelSinkChain()
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.Http.HttpChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.Http.HttpChannel::set_IsSecured(bool)
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.Http.HttpChannel::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.Http.HttpChannel::set_Item(object, object)
		}
		.property instance class [mscorlib]System.Collections.ICollection Keys()
		{
			.get instance class [mscorlib]System.Collections.ICollection System.Runtime.Remoting.Channels.Http.HttpChannel::get_Keys()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.Channels.Http.HttpChannel::get_Properties()
		}
		.property instance bool WantsToListen()
		{
			.get instance bool System.Runtime.Remoting.Channels.Http.HttpChannel::get_WantsToListen()
			.set instance void System.Runtime.Remoting.Channels.Http.HttpChannel::set_WantsToListen(bool)
		}
	}
	.class public HttpClientChannel
		extends [mscorlib]System.Runtime.Remoting.Channels.BaseChannelWithProperties
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelSender, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.ISecurableChannel
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Collections.ICollection get_Keys()
		{
			ret
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Http.HttpClientChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Http.HttpClientChannel::get_ChannelPriority()
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.Http.HttpClientChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.Http.HttpClientChannel::set_IsSecured(bool)
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.Http.HttpClientChannel::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.Http.HttpClientChannel::set_Item(object, object)
		}
		.property instance class [mscorlib]System.Collections.ICollection Keys()
		{
			.get instance class [mscorlib]System.Collections.ICollection System.Runtime.Remoting.Channels.Http.HttpClientChannel::get_Keys()
		}
	}
	.class public HttpServerChannel
		extends [mscorlib]System.Runtime.Remoting.Channels.BaseChannelWithProperties
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiverHook
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = (01 00 04 49 74 65 6D 00 00)
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, int32 port, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_ChannelData()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance string GetChannelUri()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string[] GetUrlsForUri(string objectUri)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StartListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StopListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelScheme()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_WantsToListen()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig specialname 
			instance void set_WantsToListen(bool 'value')
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink get_ChannelSinkChain()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AddHookChannelUri(string channelUri)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_Item(object key)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Item(object key, object 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Collections.ICollection get_Keys()
		{
			ret
		}
		.property instance object ChannelData()
		{
			.get instance object System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_ChannelData()
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_ChannelPriority()
		}
		.property instance string ChannelScheme()
		{
			.get instance string System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_ChannelScheme()
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_ChannelSinkChain()
		}
		.property instance object Item(object)
		{
			.get instance object System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_Item(object)
			.set instance void System.Runtime.Remoting.Channels.Http.HttpServerChannel::set_Item(object, object)
		}
		.property instance class [mscorlib]System.Collections.ICollection Keys()
		{
			.get instance class [mscorlib]System.Collections.ICollection System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_Keys()
		}
		.property instance bool WantsToListen()
		{
			.get instance bool System.Runtime.Remoting.Channels.Http.HttpServerChannel::get_WantsToListen()
			.set instance void System.Runtime.Remoting.Channels.Http.HttpServerChannel::set_WantsToListen(bool)
		}
	}
}
.namespace System.Runtime.Remoting.Channels.Tcp
{
	.class public TcpChannel
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver, [mscorlib]System.Runtime.Remoting.Channels.IChannelSender, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.ISecurableChannel
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider clientSinkProvider, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider serverSinkProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_ChannelData()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string[] GetUrlsForUri(string objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StartListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StopListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance object ChannelData()
		{
			.get instance object System.Runtime.Remoting.Channels.Tcp.TcpChannel::get_ChannelData()
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Tcp.TcpChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Tcp.TcpChannel::get_ChannelPriority()
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.Tcp.TcpChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.Tcp.TcpChannel::set_IsSecured(bool)
		}
	}
	.class public TcpClientChannel
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelSender, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.ISecurableChannel
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IClientChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink(string url, object remoteChannelData, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Tcp.TcpClientChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Tcp.TcpClientChannel::get_ChannelPriority()
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.Tcp.TcpClientChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.Tcp.TcpClientChannel::set_IsSecured(bool)
		}
	}
	.class public TcpServerChannel
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver, [mscorlib]System.Runtime.Remoting.Channels.IChannel, [mscorlib]System.Runtime.Remoting.Channels.ISecurableChannel
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, int32 port)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, int32 port, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, class System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection authorizeCallback)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance bool get_IsSecured()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_IsSecured(bool 'value')
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance int32 get_ChannelPriority()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance string get_ChannelName()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance string Parse(string url, [out] string& objectURI)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance object get_ChannelData()
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public hidebysig 
			instance string GetChannelUri()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string[] GetUrlsForUri(string objectUri)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StartListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void StopListening(object data)
		{
			.permissionset linkcheck = (00)
			ret
		}
		.property instance object ChannelData()
		{
			.get instance object System.Runtime.Remoting.Channels.Tcp.TcpServerChannel::get_ChannelData()
		}
		.property instance string ChannelName()
		{
			.get instance string System.Runtime.Remoting.Channels.Tcp.TcpServerChannel::get_ChannelName()
		}
		.property instance int32 ChannelPriority()
		{
			.get instance int32 System.Runtime.Remoting.Channels.Tcp.TcpServerChannel::get_ChannelPriority()
		}
		.property instance bool IsSecured()
		{
			.get instance bool System.Runtime.Remoting.Channels.Tcp.TcpServerChannel::get_IsSecured()
			.set instance void System.Runtime.Remoting.Channels.Tcp.TcpServerChannel::set_IsSecured(bool)
		}
	}
}
.namespace System.Runtime.Remoting.MetadataServices
{
	.class public MetaData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void ConvertTypesToSchemaToFile(class [mscorlib]System.Type[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertTypesToSchemaToStream(class [mscorlib]System.Type[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, class [mscorlib]'System.IO.Stream' outputStream)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertTypesToSchemaToFile(class System.Runtime.Remoting.MetadataServices.ServiceType[] types, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, string path)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertTypesToSchemaToStream(class System.Runtime.Remoting.MetadataServices.ServiceType[] serviceTypes, valuetype System.Runtime.Remoting.MetadataServices.SdlType sdlType, class [mscorlib]'System.IO.Stream' outputStream)
		{
			ret
		}
		.method public static hidebysig 
			void RetrieveSchemaFromUrlToStream(string url, class [mscorlib]'System.IO.Stream' outputStream)
		{
			ret
		}
		.method public static hidebysig 
			void RetrieveSchemaFromUrlToFile(string url, string path)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class [mscorlib]'System.IO.Stream' inputStream, class [mscorlib]System.Collections.ArrayList outCodeStreamList, string proxyUrl, string proxyNamespace)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class [mscorlib]'System.IO.Stream' inputStream, class [mscorlib]System.Collections.ArrayList outCodeStreamList, string proxyUrl)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertSchemaStreamToCodeSourceStream(bool clientProxy, string outputDirectory, class [mscorlib]'System.IO.Stream' inputStream, class [mscorlib]System.Collections.ArrayList outCodeStreamList)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertCodeSourceStreamToAssemblyFile(class [mscorlib]System.Collections.ArrayList outCodeStreamList, string assemblyPath, string strongNameFilename)
		{
			ret
		}
		.method public static hidebysig 
			void ConvertCodeSourceFileToAssemblyFile(string codePath, string assemblyPath, string strongNameFilename)
		{
			ret
		}
		.method public static hidebysig 
			void SaveStreamToFile(class [mscorlib]'System.IO.Stream' inputStream, string path)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public serializable SUDSGeneratorException
		extends [mscorlib]System.Exception
	{
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.Serialization.SerializationInfo info, valuetype [mscorlib]System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public serializable SUDSParserException
		extends [mscorlib]System.Exception
	{
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.Serialization.SerializationInfo info, valuetype [mscorlib]System.Runtime.Serialization.StreamingContext context)
		{
			ret
		}
	}
	.class public SdlChannelSink
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink, [mscorlib]System.Runtime.Remoting.Channels.IChannelSinkBase
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver receiver, class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink nextSink)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance valuetype [mscorlib]System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage requestMsg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class [mscorlib]'System.IO.Stream' requestStream, [out] class [mscorlib]System.Runtime.Remoting.Messaging.IMessage& responseMsg, [out] class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders& responseHeaders, [out] class [mscorlib]'System.IO.Stream'& responseStream)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void AsyncProcessResponse(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers, class [mscorlib]'System.IO.Stream' 'stream')
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]'System.IO.Stream' GetResponseStream(class [mscorlib]System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class [mscorlib]System.Runtime.Remoting.Messaging.IMessage msg, class [mscorlib]System.Runtime.Remoting.Channels.ITransportHeaders headers)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink get_NextChannelSink()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IDictionary get_Properties()
		{
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink System.Runtime.Remoting.MetadataServices.SdlChannelSink::get_NextChannelSink()
		}
		.property instance class [mscorlib]System.Collections.IDictionary Properties()
		{
			.get instance class [mscorlib]System.Collections.IDictionary System.Runtime.Remoting.MetadataServices.SdlChannelSink::get_Properties()
		}
	}
	.class public SdlChannelSinkProvider
		extends [mscorlib]System.Object
		implements [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.IDictionary properties, class [mscorlib]System.Collections.ICollection providerData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance void GetChannelData(class [mscorlib]System.Runtime.Remoting.Channels.IChannelDataStore localChannelData)
		{
			ret
		}
		.method public final virtual hidebysig newslot 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSink CreateSink(class [mscorlib]System.Runtime.Remoting.Channels.IChannelReceiver channel)
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider get_Next()
		{
			ret
		}
		.method public final virtual hidebysig newslot specialname 
			instance void set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider 'value')
		{
			ret
		}
		.property instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider Next()
		{
			.get instance class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider::get_Next()
			.set instance void System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider::set_Next(class [mscorlib]System.Runtime.Remoting.Channels.IServerChannelSinkProvider)
		}
	}
	.class public sealed serializable SdlType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype System.Runtime.Remoting.MetadataServices.SdlType Sdl = int32(0x00000000)
		.field static public literal valuetype System.Runtime.Remoting.MetadataServices.SdlType Wsdl = int32(0x00000001)
	}
	.class public ServiceType
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type 'type', string url)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_ObjectType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.property instance class [mscorlib]System.Type ObjectType()
		{
			.get instance class [mscorlib]System.Type System.Runtime.Remoting.MetadataServices.ServiceType::get_ObjectType()
		}
		.property instance string Url()
		{
			.get instance string System.Runtime.Remoting.MetadataServices.ServiceType::get_Url()
		}
	}
}
.namespace System.Runtime.Remoting.Services
{
	.class public abstract RemotingClientProxy
		extends [System]System.ComponentModel.Component
	{
		.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = (01 00 01 00 00)
		.method family hidebysig 
			instance void ConfigureProxy(class [mscorlib]System.Type 'type', string url)
		{
			ret
		}
		.method family hidebysig 
			instance void ConnectProxy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AllowAutoRedirect()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AllowAutoRedirect(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Cookies()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_EnableCookies()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_EnableCookies(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_PreAuthenticate()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PreAuthenticate(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Path()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Path(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Timeout()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Timeout(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Url()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Url(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_UserAgent()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UserAgent(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Username()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Username(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Password()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Password(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Domain()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Domain(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ProxyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ProxyName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ProxyPort()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ProxyPort(int32 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field family object _tp
		.field family class [mscorlib]System.Type _type
		.field family string _url
		.property instance bool AllowAutoRedirect()
		{
			.get instance bool System.Runtime.Remoting.Services.RemotingClientProxy::get_AllowAutoRedirect()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_AllowAutoRedirect(bool)
		}
		.property instance object Cookies()
		{
			.get instance object System.Runtime.Remoting.Services.RemotingClientProxy::get_Cookies()
		}
		.property instance string Domain()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_Domain()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Domain(string)
		}
		.property instance bool EnableCookies()
		{
			.get instance bool System.Runtime.Remoting.Services.RemotingClientProxy::get_EnableCookies()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_EnableCookies(bool)
		}
		.property instance string Password()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_Password()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Password(string)
		}
		.property instance string Path()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_Path()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Path(string)
		}
		.property instance bool PreAuthenticate()
		{
			.get instance bool System.Runtime.Remoting.Services.RemotingClientProxy::get_PreAuthenticate()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_PreAuthenticate(bool)
		}
		.property instance string ProxyName()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_ProxyName()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_ProxyName(string)
		}
		.property instance int32 ProxyPort()
		{
			.get instance int32 System.Runtime.Remoting.Services.RemotingClientProxy::get_ProxyPort()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_ProxyPort(int32)
		}
		.property instance int32 Timeout()
		{
			.get instance int32 System.Runtime.Remoting.Services.RemotingClientProxy::get_Timeout()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Timeout(int32)
		}
		.property instance string Url()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_Url()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Url(string)
		}
		.property instance string UserAgent()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_UserAgent()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_UserAgent(string)
		}
		.property instance string Username()
		{
			.get instance string System.Runtime.Remoting.Services.RemotingClientProxy::get_Username()
			.set instance void System.Runtime.Remoting.Services.RemotingClientProxy::set_Username(string)
		}
	}
}
