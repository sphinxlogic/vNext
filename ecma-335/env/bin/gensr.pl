#!perl -w
#
# 
#  Copyright (c) 2006 Microsoft Corporation.  All rights reserved.
# 
#  The use and distribution terms for this software are contained in the file
#  named license.txt, which can be found in the root of this distribution.
#  By using this software in any fashion, you are agreeing to be bound by the
#  terms of this license.
# 
#  You must not remove this notice, or any other, from this software.
# 
#
# gensr <input file> <output file> <fullclassname> <resource file name>
#
# Builds a .cs file containing a class definition with string constants
# for all the resources in <input file>.
#


use strict;
use File::Copy;

my ($infile, $outfile, $fullclassname, $resfile, $visibility, $sealed) = @ARGV;

my @myList = split /\\/, $infile;
my $listSize = @myList;
if ($listSize>3) {
    copy($infile, $myList[$listSize-1]);
}

@myList = split /\\/, $resfile;
$listSize = @myList;
$resfile = $myList[$listSize-1];     

print "Outfile: " . $outfile . "\n";
print "Infile: " . $infile . "\n";
print "Resfile: " . $resfile . "\n";


my $sealedText = "";
if ($sealed) {
    $sealedText = "sealed";
}

my $AspNetHostingPermission = "";
if ($visibility eq "public") {
    $AspNetHostingPermission = <<'END_OF_ASPNETHOSTINGPERMISSION';
    [AspNetHostingPermission(SecurityAction.LinkDemand, Unrestricted = true)]        
    [AspNetHostingPermission(SecurityAction.InheritanceDemand, Unrestricted = true)] 
END_OF_ASPNETHOSTINGPERMISSION
}

#
# get namespace and class from $fullclassname, e.g.
#   $namespace = System.Web
#   $class = SR
#
my ($namespace, $class) = ($fullclassname =~ /^(.+)\.(.+)$/);

my $descAttr = $class . "DescriptionAttribute";
my $catAttr = $class . "CategoryAttribute";

my $errmsg = "gensr : error :";

# top of generated file
my $header = <<"END_OF_HEADER" ;
//------------------------------------------------------------------------------
// This file is autogenerated by gensr.pl utilitity. Do not modify.
//------------------------------------------------------------------------------

namespace $namespace {
    using System;
    using System.Reflection;
    using System.Globalization;
    using System.Resources;
    using System.Text;
    using System.Threading;
    using System.ComponentModel;
    using System.Security.Permissions;

    [AttributeUsage(AttributeTargets.All)]
    internal sealed class $descAttr : DescriptionAttribute {

        private bool replaced = false;

        /// <summary>
        ///     Constructs a new sys description.
        /// </summary>
        /// <param name='description'>
        ///     description text.
        /// </param>
        public $descAttr(string description) : base(description) {
        }

        /// <summary>
        ///     Retrieves the description text.
        /// </summary>
        /// <returns>
        ///     description
        /// </returns>
        public override string Description {
            get {
                if (!replaced) {
                    replaced = true;
                    DescriptionValue = $class.GetString(base.Description);
                }
                return base.Description;
            }
        }
    }

    [AttributeUsage(AttributeTargets.All)]
    internal sealed class $catAttr : CategoryAttribute {

        public $catAttr(string category) : base(category) {
        }

        protected override string GetLocalizedString(string value) {
            return $class.GetString(value);
        }
    }

    /// <summary>
    ///    AutoGenerated resource class. Usage:
    ///
    ///        string s = $class.GetString($class.MyIdenfitier);
    /// </summary>
    $AspNetHostingPermission
    $visibility $sealedText class $class {
END_OF_HEADER


my $footer = "" ;

if ($visibility eq "public") {
# bottom of generated file
$footer = <<"END_OF_PUBLIC_FOOTER" ;

        static $class loader = null;
        ResourceManager resources;

        private static Object s_InternalSyncObject;
        private static Object InternalSyncObject {
            get {
                if (s_InternalSyncObject == null) {
                    Object o = new Object();
                    Interlocked.CompareExchange(ref s_InternalSyncObject, o, null);
                }
                return s_InternalSyncObject;
            }
        }
        
        $visibility $class() {
            resources = new System.Resources.ResourceManager("$resfile", this.GetType().Assembly);
        }
        
        private static $class GetLoader() {
            if (loader == null) {
                lock (InternalSyncObject) {
                   if (loader == null) {
                       loader = new $class();
                   }
               }
            }
            
            return loader;
        }

        private static CultureInfo Culture {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }

        public static string GetString(string name, params object[] args) {
            // null CultureInfo: let ResouceManager determine the culture
            // fxcop complains about not suppling a culture
            return GetString($class.Culture, name, args);
        }
        public static string GetString(CultureInfo culture, string name, params object[] args) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            string res = sys.resources.GetString(name, culture);

            if (args != null && args.Length > 0) {
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else {
                return res;
            }
        }

        public static string GetString(string name) {
            return GetString($class.Culture, name);
        }
        public static string GetString(CultureInfo culture, string name) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetString(name, culture);
        }
        public static bool GetBoolean(string name) {
            return GetBoolean($class.Culture, name);
        }
        public static bool GetBoolean(CultureInfo culture, string name) {
            bool val = false;;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is bool) {
                    val = (bool)res;
                }
            }
            return val;
        }
        public static char GetChar(string name) {
            return GetChar($class.Culture, name);
        }
        public static char GetChar(CultureInfo culture, string name) {
            char val = (char)0;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is char) {
                    val = (char)res;
                }
            }
            return val;
        }
        public static byte GetByte(string name) {
            return GetByte($class.Culture, name);
        }
        public static byte GetByte(CultureInfo culture, string name) {
            byte val = (byte)0;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is byte) {
                    val = (byte)res;
                }
            }
            return val;
        }
        public static short GetShort(string name) {
            return GetShort($class.Culture, name);
        }
        public static short GetShort(CultureInfo culture, string name) {
            short val = (short)0;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is short) {
                    val = (short)res;
                }
            }
            return val;
        }
        public static int GetInt(string name) {
            return GetInt($class.Culture, name);
        }
        public static int GetInt(CultureInfo culture, string name) {
            int val = 0;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is int) {
                    val = (int)res;
                }
            }
            return val;
        }
        public static long GetLong(string name) {
            return GetLong($class.Culture, name);
        }
        public static long GetLong(CultureInfo culture, string name) {
            long val = 0L;

            $class sys = GetLoader();
            if (sys != null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is long) {
                    val = (long)res;
                }
            }
            return val;
        }
        public static float GetFloat(string name) {
            return GetFloat($class.Culture, name);
        }
        public static float GetFloat(CultureInfo culture, string name) {
            float val = 0.0f;

            $class sys = GetLoader();
            if (sys == null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is float) {
                    val = (float)res;
                }
            }
            return val;
        }
        public static double GetDouble(string name) {
            return GetDouble($class.Culture, name);
        }
        public static double GetDouble(CultureInfo culture, string name) {
            double val = 0.0;

            $class sys = GetLoader();
            if (sys == null) {
                object res = sys.resources.GetObject(name, culture);
                if (res is double) {
                    val = (double)res;
                }
            }
            return val;
        }
        public static object GetObject(string name) {
            return GetObject($class.Culture, name);
        }
        public static object GetObject(CultureInfo culture, string name) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetObject(name, culture);
        }
    }
}
END_OF_PUBLIC_FOOTER
}
else {
# bottom of generated file
$footer = <<"END_OF_FOOTER" ;

        static $class loader = null;
        ResourceManager resources;

        private static Object s_InternalSyncObject;
        private static Object InternalSyncObject {
            get {
                if (s_InternalSyncObject == null) {
                    Object o = new Object();
                    Interlocked.CompareExchange(ref s_InternalSyncObject, o, null);
                }
                return s_InternalSyncObject;
            }
        }
        
        $visibility $class() {
            resources = new System.Resources.ResourceManager("$resfile", this.GetType().Assembly);
        }
        
        private static $class GetLoader() {
            if (loader == null) {
                lock (InternalSyncObject) {
                   if (loader == null) {
                       loader = new $class();
                   }
               }
            }
            
            return loader;
        }

        private static CultureInfo Culture {
            get { return null/*use ResourceManager default, CultureInfo.CurrentUICulture*/; }
        }
        
        public static ResourceManager Resources {
            get {
                return GetLoader().resources;
            }
        }
        
        public static string GetString(string name, params object[] args) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            string res = sys.resources.GetString(name, $class.Culture);

            if (args != null && args.Length > 0) {
                return String.Format(CultureInfo.CurrentCulture, res, args);
            }
            else {
                return res;
            }
        }

        public static string GetString(string name) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetString(name, $class.Culture);
        }
        
        public static object GetObject(string name) {
            $class sys = GetLoader();
            if (sys == null)
                return null;
            return sys.resources.GetObject(name, $class.Culture);
        }
    }
}
END_OF_FOOTER
}

# open the input and output files
open(IN, $infile)         || die "$errmsg Can't open $infile: $!, stopped";
open(OUT, '>' . $outfile) || die "$errmsg Can't open $outfile: $!, stopped";

# print the top of the file
print OUT $header;

# spit out constant definition for each resource
while (<IN>) {
    if (/^(\w+)=/o) {
         print OUT "        $visibility const string $1 = \"$1\";\n";
    }
}

# print the bottom of the file
print OUT $footer;

# close the files
close(IN)   || die "$errmsg Can't close $infile: $!, stopped";
close(OUT)  || die "$errmsg Can't close $outfile: $!, stopped";
