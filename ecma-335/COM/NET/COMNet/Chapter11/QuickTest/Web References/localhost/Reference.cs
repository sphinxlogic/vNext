//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.526
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 1.1.4322.526.
// 
namespace QuickTest.localhost {
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'method' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    // CODEGEN: The optional WSDL extension element 'class' from namespace 'http://www.w3.org/2000/wsdl/suds' was not handled.
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MathFunctionsBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/MyMath/MyMath%2C%20Version%3D1.1.0.0%2C%" +
"20Culture%3Dneutral%2C%20PublicKeyToken%3D21999781f0cc1fd7")]
    public class MathFunctionsService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public MathFunctionsService() {
            this.Url = "http://localhost:80/MyMathMethod/MyMath.MathFunctions.soap";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath#DoDivide", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DoDivide(int Value1, int Value2) {
            object[] results = this.Invoke("DoDivide", new object[] {
                        Value1,
                        Value2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoDivide(int Value1, int Value2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoDivide", new object[] {
                        Value1,
                        Value2}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDoDivide(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath#DoMultiply", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DoMultiply(int Value1, int Value2) {
            object[] results = this.Invoke("DoMultiply", new object[] {
                        Value1,
                        Value2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoMultiply(int Value1, int Value2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoMultiply", new object[] {
                        Value1,
                        Value2}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDoMultiply(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath#DoSubtract", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DoSubtract(int Value1, int Value2) {
            object[] results = this.Invoke("DoSubtract", new object[] {
                        Value1,
                        Value2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoSubtract(int Value1, int Value2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoSubtract", new object[] {
                        Value1,
                        Value2}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDoSubtract(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath#DoAdd", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/MyMath.MathFunctions/MyMath")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public int DoAdd(int Value1, int Value2) {
            object[] results = this.Invoke("DoAdd", new object[] {
                        Value1,
                        Value2});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDoAdd(int Value1, int Value2, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DoAdd", new object[] {
                        Value1,
                        Value2}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDoAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
    }
}
